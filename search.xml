<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>AutoCAD</title>
    <url>/posts/51510.html</url>
    <content><![CDATA[<p>[TOC]</p>
<blockquote>
<p>CAD是先设置相关样式，后绘制</p>
</blockquote>
<h1>命令</h1>
<h2 id="MENUBAR-菜单模式">MENUBAR(菜单模式)</h2>
<blockquote>
<p>0 非标准菜单模式</p>
<p>1 标准菜单模式</p>
</blockquote>
<h2 id="GRID-辅助栅格">GRID(辅助栅格)</h2>
<blockquote>
<p>显示/不显示</p>
<p>开(ON) 关(OFF) 捕捉(S) 主(M) 自适应(D) 界限(L) 跟随(F) 纵横向间距(A)</p>
</blockquote>
<h2 id="OP-界面设置">OP(界面设置)</h2>
<blockquote>
<p>界面设置</p>
</blockquote>
<p><strong>再次按下回车可以重复运行上次的指令</strong></p>
<h2 id="CTRL-o-全屏">CTRL+o(全屏)</h2>
<h2 id="QS-快速保存">QS(快速保存)</h2>
<h2 id="LA-图层命令">LA(图层命令)</h2>
<blockquote>
<p>图层命令</p>
</blockquote>
<h2 id="Z-缩放">Z(缩放)</h2>
<h2 id="绘制相关">绘制相关</h2>
<h3 id="L-直线-PL-多段线">L(直线)  PL(多段线)</h3>
<pre><code>&gt; 注意 **相对坐标**
</code></pre>
<h3 id="REC-矩形">REC(矩形)</h3>
<pre><code>&gt; 参数：
&gt;
&gt; E （完全显示）
</code></pre>
<h3 id="LW-线宽">LW(线宽)</h3>
<h3 id="SPL-曲线">SPL(曲线)</h3>
<blockquote>
<p>完成闭合曲线后，输入c（闭合）</p>
</blockquote>
<h2 id="X">X</h2>
<p>将一条线段分为两条</p>
<h2 id="O-偏移命令">O(偏移命令)</h2>
<blockquote>
<p>按键后输入偏移值</p>
</blockquote>
<h2 id="U">U</h2>
<blockquote>
<p>U == ctrl+z</p>
</blockquote>
<h2 id="TR-修剪">TR(修剪)</h2>
<blockquote>
<p>按键后按T，选择剪切边，回车，再次选择，被选择线与剪切边间的线将被剪切</p>
</blockquote>
<h2 id="CO-copy">CO(copy)</h2>
<blockquote>
<p>选完后回车</p>
<p>选择基准点，选完后要求选新的基准点</p>
</blockquote>
<h2 id="文字相关">文字相关</h2>
<h3 id="MT-多行文字">MT(多行文字)</h3>
<h3 id="DT-单行文字">DT(单行文字)</h3>
<h3 id="ST-文字样式">ST(文字样式)</h3>
<h3 id="DDEDIT-文字编辑">DDEDIT(文字编辑)</h3>
<h3 id="B-块定义">B(块定义)</h3>
<h3 id="BEDIT-编辑块定义">BEDIT( 编辑块定义)</h3>
<h2 id="线">线</h2>
<h3 id="MLSTY-多线样式">MLSTY(多线样式)</h3>
<p>默认的多线样式只有两条平行线，上面那个为0.5 下面那个为-0.5，他们相对于中间的零线有0.5的偏移</p>
<h3 id="ML-多线绘制">ML(多线绘制)</h3>
<p><img src="../../../../MarkDownPhoto/AutoCAD/image-20230406201653998.png" alt="image-20230406201653998"></p>
<h3 id="MLEDIT-编辑多线连接处">MLEDIT(编辑多线连接处)</h3>
<h3 id="EL-椭圆">EL(椭圆)</h3>
<h3 id="DO-圆环">DO(圆环)</h3>
<h3 id="BH-图案填充">BH(图案填充)</h3>
<h2 id="点">点</h2>
<h3 id="DDPTYPE-设置点样式-PT">DDPTYPE(设置点样式[PT])</h3>
<h3 id="PO-绘制点">PO(绘制点)</h3>
<h3 id="DIV-用点等分线-分几段输入几">DIV(用点等分线) 分几段输入几</h3>
<h3 id="ME-MEASURE">ME(MEASURE)</h3>
<h3 id="XL">XL</h3>
<h2 id="PA-粘贴，可以以外部excel等内容为源">PA(粘贴，可以以外部excel等内容为源)</h2>
<h2 id="TS-表格样式">TS(表格样式)</h2>
<h2 id="属性">属性</h2>
<h3 id="ATT-属性定义">ATT(属性定义)</h3>
<h2 id="三维">三维</h2>
<h3 id="REGION-将封闭图形转为面域">REGION(将封闭图形转为面域)</h3>
<h3 id="VPOINT-视点预设">VPOINT(视点预设)</h3>
<h3 id="EXT-拉伸">EXT(拉伸)</h3>
<h3 id="SUBTRACT-两个集合-物体-差集">SUBTRACT(两个集合[物体]差集)</h3>
<blockquote>
<p>第一次选择：被减数图源（例如外围长方体）</p>
<p>第二次选择：减数对象（例如内含圆柱体）</p>
</blockquote>
<hr>
<h2 id="标注相关">标注相关</h2>
<blockquote>
<p>DAL(两点间 尺寸标注)</p>
<p>DIM(元素尺寸标注)</p>
<p>D(DIMSTYLE) 标注样式设置</p>
<p>QDIM(框选几何图形快速标注)</p>
</blockquote>
<hr>
<p><strong>ARRAYCLASSIC</strong>经典阵列</p>
<h2 id="转为PDF">转为PDF</h2>
<blockquote>
<p><strong>PLOT</strong></p>
<p><img src="../../../../MarkDownPhoto/AutoCAD/image-20230406193650067.png" alt="image-20230406193650067"></p>
</blockquote>
<h2 id="AREA-面积">AREA(面积)</h2>
<p>！得到的面积为图上面积，不为真实面积，需要进行换算</p>
<blockquote>
<p>O（对obj操作）</p>
<blockquote>
<p>$实际面积=图上面积\ *\ 实际长度^2 \ / \ 图上长度^2$</p>
</blockquote>
</blockquote>
<h2 id="DI（distance）">DI（distance）</h2>
<h1>*注</h1>
<p>线宽粗线细线约为2倍差距</p>
<p>不同类型的线要分层</p>
<p>以水平向右x轴正方向，向水平向上y轴正方向选择为正方向</p>
<p>在 CAD 绘图中，通常建议将不同类型的线按照类别分层。这样做可以使绘图更具有可读性，方便后期的编辑和修改。分层的方式可以根据具体需要进行调整，但一般包括以下几个基本层：</p>
<p>1.图框层(Frame)：绘制图框和边框线。</p>
<p>2.文字层(Text)：绘制标注和注释的文字。</p>
<p>3.注释层(Notes)：绘制图形中的注释和说明文字。</p>
<p>4.图形层(Graphics)：绘制主要的图形和构件。</p>
<p>5.隐藏层(Hidden)：绘制被遮挡或者隐藏的线条，用虚线表示。</p>
<p>6.辅助层(Auxiliary)：绘制辅助线、切线等辅助构件。</p>
<p>7.尺寸层(Dimension)：绘制尺寸标注。</p>
<p>8.中心线层(Center)：绘制中心线和轴线等。</p>
<p>以上层级只是一种基本的分层方式，根据具体的需要，可以添加或删除某些层，或者对层级进行更细致的分层。总之，分层的目的是为了使绘图更加清晰、易读、易修改。</p>
<hr>
<h1>CTRL</h1>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">按住ctrl按右键<br>ctrl + 1	特性管理器<br></code></pre></td></tr></table></figure>
<hr>
<h1>遇见的问题:</h1>
<h3 id="Q-DIM标注时，标注内容自动为其余图层样式">Q:DIM标注时，标注内容自动为其余图层样式</h3>
<p>A:输入DIM回车，输入L，选择相应标注图层，以改变标注内容图层，解决</p>
]]></content>
      <categories>
        <category>CAD</category>
      </categories>
  </entry>
  <entry>
    <title>C++ STL</title>
    <url>/posts/15764.html</url>
    <content><![CDATA[<blockquote>
<p>#include  <algorithm></p>
<p>求交集：</p>
<p>set_intersection(first1,last1,first2,last2, result)</p>
<p>求集合差：set_difference(first1,last1,first2,last2, result)</p>
<p>合并两个集合：set_union(first1,last1,first2,last2, result)</p>
</blockquote>
<p><strong>上述所传递的容器必须是排序的</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(vm.<span class="hljs-built_in">begin</span>(), vm.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">sort</span>(vn.<span class="hljs-built_in">begin</span>(), vn.<span class="hljs-built_in">end</span>());<br>   vector&lt;<span class="hljs-type">int</span>&gt; result;<br>   <span class="hljs-built_in">set_intersection</span>(vm.<span class="hljs-built_in">begin</span>(), vm.<span class="hljs-built_in">end</span>(), vn.<span class="hljs-built_in">begin</span>(), vn.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">inserter</span>(result, result.<span class="hljs-built_in">begin</span>()));<br>result.<span class="hljs-built_in">erase</span>(<span class="hljs-built_in">unique</span>(result.<span class="hljs-built_in">begin</span>(), result.<span class="hljs-built_in">end</span>()), result.<span class="hljs-built_in">end</span>());<span class="hljs-comment">//这是由于vector元素可能存在重复，需要去重</span><br></code></pre></td></tr></table></figure>
<h3 id="set-intersection实现">set_intersection实现</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIterator1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputIterator2</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputIterator</span>&gt;<br><span class="hljs-function">OutputIterator <span class="hljs-title">set_intersection</span> <span class="hljs-params">(InputIterator1 first1, InputIterator1 last1,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 InputIterator2 first2, InputIterator2 last2,</span></span><br><span class="hljs-params"><span class="hljs-function">                                 OutputIterator result)</span></span>&#123;<br>  <span class="hljs-keyword">while</span> (first1!=last1 &amp;&amp; first2!=last2)<br>  &#123;<br>    <span class="hljs-keyword">if</span> (*first1&lt;*first2) ++first1;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (*first2&lt;*first1) ++first2;<br>    <span class="hljs-keyword">else</span> &#123;<br>      *result = *first1;<br>      ++result; ++first1; ++first2;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> result;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>C++ 格式化输出（前置补0，有效位数，保留小数）</title>
    <url>/posts/26837.html</url>
    <content><![CDATA[<h2 id="1-默认情况">1. 默认情况</h2>
<p>C++默认的浮点数输出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	cout &lt;&lt; <span class="hljs-number">0.123456789</span> &lt;&lt; endl;<span class="hljs-comment">//0.123457</span><br>	cout &lt;&lt; <span class="hljs-number">1.123456789</span> &lt;&lt; endl;<span class="hljs-comment">//1.12346</span><br>	cout &lt;&lt; <span class="hljs-number">1.23456789</span> &lt;&lt; endl;<span class="hljs-comment">//1.2346</span><br>&#125; <br><br></code></pre></td></tr></table></figure>
<h2 id="2-前置补0">2. 前置补0</h2>
<p>E.g:格式化输出时间<code>HH:mm:ss</code>。倘若时间不够10，则需要在前面补0。</p>
<ul>
<li>
<p>头文件<code>iomanip</code></p>
</li>
<li>
<p>输出控制符<code>setw</code></p>
<ul>
<li>理解：set width设置输出宽度。</li>
<li>作用范围：仅对后续的&lt;&lt;生效一次。所以输出一次用一次。</li>
</ul>
</li>
<li>
<p>输出控制符<code>setfill</code></p>
<ul>
<li>理解：set fill character 设置填充的字符，不写参数的话默认是空格。</li>
<li>作用范围：自设置之后的所有&lt;&lt;，直到下一个<code>setfill</code>才更改。所以用一次就好啦。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iomanip&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<span class="hljs-type">int</span> hour = <span class="hljs-number">2</span>;<br>	<span class="hljs-type">int</span> minute = <span class="hljs-number">33</span>;<br>	<span class="hljs-type">int</span> second = <span class="hljs-number">0</span>;	<br>	cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; hour &lt;&lt;<span class="hljs-string">&quot;:&quot;</span> <br>		 &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; minute &lt;&lt;<span class="hljs-string">&quot;:&quot;</span><br>		 &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">2</span>) &lt;&lt; second &lt;&lt; endl;  <span class="hljs-comment">//02:33:00</span><br>&#125; <br></code></pre></td></tr></table></figure>
<h2 id="3-保留有效位数">3. 保留有效位数</h2>
<ul>
<li>
<p>头文件<code>iomanip</code>，</p>
</li>
<li>
<p>输出控制符<code> setprecision</code></p>
<ul>
<li>理解：可以设置输出精度。（总有效位数，包括整数部分）</li>
<li>作用范围：同<code>setfill</code>，可以对后续的输出产生影响。</li>
</ul>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/////////////////////////测试示例都是分开测试。///////////////////////////</span><br><span class="hljs-type">float</span> t1 = <span class="hljs-number">12345</span>;												<span class="hljs-comment">//</span><br>cout &lt;&lt; t1 &lt;&lt;<span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>) &lt;&lt; t1 &lt;&lt; endl;				   <span class="hljs-comment">//</span><br><span class="hljs-comment">//12345 1.234e+04												//</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////</span><br><span class="hljs-type">float</span> t2 = <span class="hljs-number">1.2345</span>;												<span class="hljs-comment">//</span><br>cout &lt;&lt; t2 &lt;&lt;<span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>) &lt;&lt; t2 &lt;&lt; endl;				   <span class="hljs-comment">//</span><br><span class="hljs-comment">//1.2345 1.235													//</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////</span><br><span class="hljs-type">float</span> t3 = <span class="hljs-number">0.12345</span>;												<span class="hljs-comment">//</span><br>cout &lt;&lt; t3 &lt;&lt;<span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>) &lt;&lt; t3 &lt;&lt; endl;				   <span class="hljs-comment">//</span><br><span class="hljs-comment">//0.12345 0.1235												//</span><br><span class="hljs-comment">///////////////////////////////////////////////////////////////////////</span><br></code></pre></td></tr></table></figure>
<h2 id="4-保留小数">4. 保留小数</h2>
<ul>
<li>头文件<code>iomanip</code></li>
<li>流操作符<code>fixed</code>
<ul>
<li>理解：它表示浮点输出应该以固定点或小数点表示法显示。</li>
<li>作用范围：之后所有。</li>
</ul>
</li>
</ul>
<blockquote>
<p>fixed 操作符可能最重要的还是当它与 <code>setprecision</code> 操作符一起使用时，<code>setprecision</code> 即可以以一种新的方式显示。它将指定浮点数字的小数点后要显示的位数，而不是要显示的总有效数位数。而这通常正是我们想要的。<br>
——摘自C语言中文网</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">cout &lt;&lt; fixed &lt;&lt; <span class="hljs-built_in">setprecision</span>(<span class="hljs-number">4</span>);	<br><span class="hljs-type">float</span> big = <span class="hljs-number">12345</span>;<br>cout  &lt;&lt; big &lt;&lt; endl;<span class="hljs-comment">// 12345.0000</span><br><span class="hljs-type">float</span> middle = <span class="hljs-number">1.2345</span>;	<br>cout &lt;&lt; middle &lt;&lt; endl;<span class="hljs-comment">// 1.2345</span><br><span class="hljs-type">float</span> mini = <span class="hljs-number">0.12345</span>;<br>cout &lt;&lt; mini &lt;&lt; endl;<span class="hljs-comment">//0.1235</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>格式化输出</tag>
      </tags>
  </entry>
  <entry>
    <title>C++药品管理系统</title>
    <url>/posts/32231.html</url>
    <content><![CDATA[<blockquote>
<p>爱来自ZZULI❤<a href="https://luoy-oss.github.io">drluo</a></p>
</blockquote>
<p><img src="/img/page/ZZULI.webp" alt=""></p>
<blockquote>
<p>本项目旨在编写一个以 C 语言为基础框架的程序，实现对药品数据的相关管理操作（增、删、改、查、统计）。</p>
</blockquote>
<blockquote>
<p>统由六大主模块和三大辅助模块构成：</p>
<p><strong>六大主模块：</strong></p>
<blockquote>
<ol>
<li>
<p>登录/注册模块：界面化的登录/注册操作，具有相关登录提示功能。</p>
</li>
<li>
<p>药品添加模块：用户可直接向相应文本框种输入药品数据，具备相关错误检查和处理机制，可防止无效药品信息的输入。</p>
</li>
<li>
<p>药品删除模块：数据表格与删除按钮的结合，鼠标移动到相关删除按钮时，表格会进行高亮，用户可通过点击删除按钮来直接进行删除操作。</p>
</li>
<li>
<p>药品修改模块：类似于药品删除模块，数据表格与修改按钮相结合，用户仅需通过点击修改按钮即可修改所选内容。</p>
</li>
<li>
<p>药品查询模块：数据完备的查询方法，用户可以选择性的给出查询内容，对用户所给内容进行全表的模糊匹配后，给出查询结果。</p>
</li>
<li>
<p>药品统计模块：具备多种统计方法（按药品名称排序、按药品制造商排序、按药品生产日期排序、按药品保质期排序、按药品库存量排序），用户仅需点击相关按钮，通过程序的快排函数，以最快速度给出相关统计结果。</p>
</li>
</ol>
</blockquote>
<p><strong>三大辅助模块：</strong></p>
<blockquote>
<ol>
<li>
<p>按钮模块：基于easyx模块实现，通过相应左上角、右下角坐标绘制按钮，并实现鼠标移动到按钮上时，按钮高亮的动效（部分效果可自定义）。</p>
</li>
<li>
<p>文本框模块：基于easyx模块实现，通过相应左上角、右下角坐标绘制文本框，并实现鼠标点击后文本框的相应效果已经光标闪烁效果（部分效果可自定义）。</p>
</li>
<li>
<p>表格模块：基于easyx模块实现，通过相应左上角坐标、表格行列数、单元格的宽高，绘制表格，并提供相应表格高亮函数。</p>
</li>
</ol>
</blockquote>
</blockquote>
<p>github仓库：</p>
<p><a href="https://github.com/luoy-oss/drugSystem">luoy-oss/drugSystem (github.com)</a></p>
<p>蓝奏云：</p>
<p><a href="https://drluo.lanzoul.com/ijGDv1a56wuf">drluo.lanzoui.com</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>Bi-LSTM(Attention)的PyTorch实现</title>
    <url>/posts/633.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p>实现如下，代码解释以注释的方式呈现</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.optim <span class="hljs-keyword">as</span> optim<br><span class="hljs-keyword">import</span> torch.nn.functional <span class="hljs-keyword">as</span> F<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BiLSTM_Attention</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(BiLSTM_Attention, self).__init__()<br><br>        <span class="hljs-comment"># 嵌入层，用于将文本中的词汇映射为密集向量表示</span><br>        <span class="hljs-comment"># nn.Embedding 是PyTorch提供的用于词嵌入（Word Embedding）的层。</span><br>        <span class="hljs-comment"># vocab_size 是词汇表大小，代表有多少个不同的词汇。</span><br>        <span class="hljs-comment"># embedding_dim 是嵌入向量的维度，它将每个词汇映射到一个具有 embedding_dim 维度的向量空间中</span><br>        self.embedding = nn.Embedding(vocab_size, embedding_dim)<br><br>        <span class="hljs-comment"># 双向LSTM层，处理嵌入后的词向量，生成LSTM输出</span><br>        <span class="hljs-comment"># nn.LSTM 是PyTorch提供的LSTM层。</span><br>        <span class="hljs-comment"># embedding_dim 是嵌入向量的维度，也是LSTM层的输入尺寸（input_size），代表每个时间步的输入特征维度。</span><br>        <span class="hljs-comment"># n_hidden 是LSTM层的隐藏单元数（hidden_size），代表每个时间步的隐藏状态的维度</span><br>        <span class="hljs-comment"># bidirectional=True 表示该LSTM是双向的，即同时考虑正向和反向的序列信息，增加了模型对序列信息的理解能力。</span><br>        <span class="hljs-comment"># 这个LSTM层将用于处理输入的嵌入向量，生成LSTM的输出和最终的隐藏状态</span><br>        self.lstm = nn.LSTM(embedding_dim, n_hidden, bidirectional=<span class="hljs-literal">True</span>)<br><br>        <span class="hljs-comment"># 双向LSTM层，处理嵌入后的词向量，生成LSTM输出</span><br>        <span class="hljs-comment"># nn.Linear 是PyTorch提供的全连接（线性）层。</span><br>        <span class="hljs-comment"># n_hidden * 2 表示输入特征的维度，由于使用了双向LSTM，所以将正向和反向的隐藏状态拼接在一起，维度变为原来的两倍。</span><br>        <span class="hljs-comment"># num_classes 表示分类问题的类别数，因为这是一个二分类任务，所以设为2。</span><br>        <span class="hljs-comment"># 这个输出层将用于将LSTM的输出转换为最终的分类结果。输出为2维，其中一个维度表示负面情感的概率，另一个维度表示正面情感的概率</span><br>        self.out = nn.Linear(n_hidden * <span class="hljs-number">2</span>, num_classes)<br><br>    <span class="hljs-comment"># 该函数用于计算注意力权重，然后根据注意力权重对LSTM输出进行加权平均得到上下文向量</span><br>    <span class="hljs-comment"># lstm_output : LSTM的输出，维度为 [batch_size, n_step, n_hidden * num_directions(=2)]</span><br>    <span class="hljs-comment"># final_state : LSTM最终的隐藏状态，维度为 [num_layers(=1) * num_directions(=2), batch_size, n_hidden]</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">attention_net</span>(<span class="hljs-params">self, lstm_output, final_state</span>):<br>        <span class="hljs-comment"># final_state 是LSTM在输入序列最后一个时间步的隐藏状态，维度为 [num_layers(=1) * num_directions(=2), batch_size, n_hidden]</span><br>        <span class="hljs-comment"># n_hidden * 2 表示双向LSTM的隐藏状态的维度，乘以2是因为它包含了前向和后向两个方向的隐藏状态。</span><br>        <span class="hljs-comment"># final_state.view(-1, n_hidden * 2, 1) 将 final_state 的维度从 [num_layers * num_directions, batch_size, n_hidden]</span><br>        <span class="hljs-comment"># 转换为 [batch_size, n_hidden * 2, 1]，在第三维度上增加了一个维度，这是为了后续计算注意力权重做准备</span><br>        <span class="hljs-comment"># hidden : [batch_size, n_hidden * num_directions(=2), 1(=n_layer)]</span><br>        hidden = final_state.view(-<span class="hljs-number">1</span>, n_hidden * <span class="hljs-number">2</span>, <span class="hljs-number">1</span>)<br><br>        <span class="hljs-comment"># lstm_output 是LSTM的输出，维度为 [batch_size, n_step, n_hidden * num_directions(=2)]。</span><br>        <span class="hljs-comment"># hidden 是通过上面的操作得到的 final_state 的改变维度后的表示，维度为 [batch_size, n_hidden * 2, 1]。</span><br>        <span class="hljs-comment"># torch.bmm(lstm_output, hidden) 进行矩阵相乘，实现对 lstm_output 和 hidden 进行注意力权重的计算。注意力权重表示LSTM输出中每个时间步对应的重要程度。</span><br>        <span class="hljs-comment"># squeeze(2) 将注意力权重张量的第三个维度（为1维）挤压掉，得到维度为 [batch_size, n_step] 的 attn_weights</span><br>        attn_weights = torch.bmm(lstm_output, hidden).squeeze(<span class="hljs-number">2</span>) <span class="hljs-comment"># attn_weights : [batch_size, n_step]</span><br><br>        <span class="hljs-comment"># F.softmax(attn_weights, 1) 对注意力权重 attn_weights 进行softmax操作，将注意力权重转换为概率分布，使得每个时间步的权重值在0到1之间且和为1</span><br>        soft_attn_weights = F.softmax(attn_weights, <span class="hljs-number">1</span>)<br><br><br>        <span class="hljs-comment"># [batch_size, n_hidden * num_directions(=2), n_step] * [batch_size, n_step, 1] = [batch_size, n_hidden * num_directions(=2), 1]</span><br>        <span class="hljs-comment"># lstm_output.transpose(1, 2) 对LSTM输出进行转置，维度从 [batch_size, n_step, n_hidden * num_directions] 变为 [batch_size, n_hidden * num_directions, n_step]。</span><br>        <span class="hljs-comment"># soft_attn_weights.unsqueeze(2) 将 soft_attn_weights 张量的维度从 [batch_size, n_step] 扩展为 [batch_size, n_step, 1]，以便进行矩阵相乘。</span><br>        <span class="hljs-comment"># torch.bmm(lstm_output.transpose(1, 2), soft_attn_weights.unsqueeze(2)) 实现LSTM输出和注意力权重的加权平均，得到上下文向量。</span><br>        <span class="hljs-comment"># squeeze(2) 将上下文向量张量的第三个维度（为1维）挤压掉，得到维度为 [batch_size, n_hidden * num_directions] 的 context</span><br>        context = torch.bmm(lstm_output.transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), soft_attn_weights.unsqueeze(<span class="hljs-number">2</span>)).squeeze(<span class="hljs-number">2</span>)<br><br>        <span class="hljs-comment"># 返回上下文向量 context 和注意力权重 soft_attn_weights。</span><br>        <span class="hljs-comment"># context 是根据注意力权重加权平均得到的LSTM输出的上下文向量，用于表示输入序列的重要信息。</span><br>        <span class="hljs-comment"># soft_attn_weights.data.numpy() 将注意力权重 soft_attn_weights 转换为NumPy数组形式并返回，以便后续可视化注意力权重矩阵</span><br>        <span class="hljs-keyword">return</span> context, soft_attn_weights.data.numpy() <span class="hljs-comment"># context : [batch_size, n_hidden * num_directions(=2)]</span><br><br>    <span class="hljs-comment"># 前向传播函数</span><br>    <span class="hljs-comment"># X : 输入的文本序列，维度为 [batch_size, len_seq]</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, X</span>):<br>        <span class="hljs-comment"># 首先将输入进行嵌入操作，然后交换维度以适应LSTM的输入格式</span><br>        <span class="hljs-comment"># 这里使用了 nn.Embedding 层，将输入的文本序列 X 中的每个词汇（对应的索引）映射为一个密集向量表示。</span><br>        <span class="hljs-comment"># input 变量维度为 [batch_size, len_seq, embedding_dim]</span><br>        <span class="hljs-comment"># 其中 batch_size 表示批次大小，len_seq 表示每个句子中的词汇数，embedding_dim 表示词向量的维度。</span><br>        <span class="hljs-built_in">input</span> = self.embedding(X)<br><br><br>        <span class="hljs-comment"># 交换维度以适应LSTM的输入格式</span><br>        <span class="hljs-comment"># LSTM模型的输入需要将序列长度维度放在第一位，因此这里使用 permute 方法交换了 input 的维度，使其变为 [len_seq, batch_size, embedding_dim]</span><br>        <span class="hljs-built_in">input</span> = <span class="hljs-built_in">input</span>.permute(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><br><br>        <span class="hljs-comment"># 初始化LSTM的隐藏状态和记忆单元状态为全零张量</span><br>        <span class="hljs-comment"># 这里创建了两个零张量 hidden_state 和 cell_state</span><br>        <span class="hljs-comment"># 用于存储LSTM的初始隐藏状态和记忆单元状态。</span><br>        <span class="hljs-comment"># 这里 1*2 表示LSTM的层数乘以双向LSTM的方向数（正向和反向）</span><br><br>        <span class="hljs-comment"># 维度为：[num_layers(=1) * num_directions(=2), batch_size, n_hidden]</span><br>        hidden_state = torch.zeros(<span class="hljs-number">1</span>*<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(X), n_hidden)<br>        <span class="hljs-comment"># 维度为：[num_layers(=1) * num_directions(=2), batch_size, n_hidden]</span><br>        cell_state = torch.zeros(<span class="hljs-number">1</span>*<span class="hljs-number">2</span>, <span class="hljs-built_in">len</span>(X), n_hidden)<br><br>        <span class="hljs-comment"># final_hidden_state, final_cell_state : [num_layers(=1) * num_directions(=2), batch_size, n_hidden]</span><br>        <span class="hljs-comment"># 将嵌入后的序列输入LSTM，得到输出和最终的隐藏状态</span><br>        <span class="hljs-comment"># 这里调用了 nn.LSTM 层 self.lstm 来进行前向传播。</span><br>        <span class="hljs-comment"># output 是LSTM在所有时间步的输出，维度为 [len_seq, batch_size, n_hidden * num_directions(=2)]。</span><br>        <span class="hljs-comment"># final_hidden_state 和 final_cell_state 是LSTM的最终隐藏状态和记忆单元状态，维度均为 [num_layers(=1) * num_directions(=2), batch_size, n_hidden]</span><br>        output, (final_hidden_state, final_cell_state) = self.lstm(<span class="hljs-built_in">input</span>, (hidden_state, cell_state))<br><br><br>        <span class="hljs-comment"># 这里再次使用 permute 方法调整输出维度，使output恢复为 [batch_size, len_seq, n_hidden]</span><br>        output = output.permute(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>)<br><br><br>        <span class="hljs-comment"># 调用 attention_net 函数得到注意力加权的上下文向量。</span><br>        <span class="hljs-comment"># 将上下文向量输入输出层，得到最终的分类结果和注意力权重</span><br>        <span class="hljs-comment"># 这里调用了在 BiLSTM_Attention 类中定义的 attention_net 方法</span><br>        <span class="hljs-comment"># 该方法用于计算注意力权重并将其应用于LSTM输出 output，得到上下文向量 attn_output 和注意力权重矩阵 attention</span><br>        attn_output, attention = self.attention_net(output, final_hidden_state)<br><br>        <span class="hljs-comment"># 将上下文向量输入输出层，得到最终的分类结果和注意力权重</span><br>        <span class="hljs-comment"># 这里将上下文向量 attn_output 输入全连接输出层 self.out，得到最终的分类结果(model)，维度为 [batch_size, num_classes]。</span><br>        <span class="hljs-comment"># 返回注意力权重矩阵(attention)，维度为 [batch_size, n_step]。</span><br>        <span class="hljs-comment"># 注意力权重矩阵表示模型在分类时对文本序列中每个词的关注程度，可以用于可视化和分析模型的注意力行为</span><br>        <span class="hljs-keyword">return</span> self.out(attn_output), attention<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-comment"># embedding_dim 是嵌入维度，用于表示文本中的每个词汇的密集向量表示。</span><br>    <span class="hljs-comment"># 在自然语言处理任务中，文本数据往往是由离散的词汇组成，而神经网络很难直接处理这种离散形式的数据。</span><br>    <span class="hljs-comment"># 因此，需要将文本中的词汇映射为连续的向量表示，以便神经网络能够处理。</span><br>    <span class="hljs-comment"># 嵌入层（nn.Embedding）就是用来完成这个映射过程的。</span><br>    <span class="hljs-comment"># 它接受一个词汇表的大小（vocab_size）和一个嵌入维度（embedding_dim）作为输入，</span><br>    <span class="hljs-comment"># 然后根据词汇表的大小创建一个随机初始化的嵌入矩阵，其中每个词汇对应一个向量，</span><br>    <span class="hljs-comment"># 向量的维度为 embedding_dim。模型在训练过程中，会根据文本数据对这些嵌入向量进行学习，使得相似的词汇在嵌入空间中距离更近，有更好的表示能力</span><br>    embedding_dim = <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># n_hidden 表示LSTM隐藏层中的隐藏单元数（也称为隐藏状态的维度）。</span><br>    <span class="hljs-comment"># 在双向LSTM模型中，LSTM层会有两个方向的隐藏状态，所以总的隐藏单元数会是 n_hidden * 2。</span><br>    <span class="hljs-comment"># 在LSTM中，隐藏状态（hidden state）用于存储过去时间步的信息，通过更新和传递隐藏状态，LSTM能够在处理时间序列数据时更好地捕捉长期依赖关系。</span><br>    <span class="hljs-comment"># n_hidden 的值会影响LSTM模型的表示能力和学习能力，过小的值可能会导致模型拟合不足，无法捕获数据的复杂模式，而过大的值可能会增加模型复杂性，使得训练过程变得困难。</span><br>    <span class="hljs-comment"># 通常，对于不同的任务和数据集，合适的 n_hidden 取值会有所差异。</span><br>    <span class="hljs-comment"># 选择合适的 n_hidden 取决于数据集的大小和复杂度，以及任务的复杂性。</span><br>    <span class="hljs-comment"># 常见的做法是通过尝试不同的 n_hidden 值，然后根据在验证集上的性能选择最优的值</span><br>    n_hidden = <span class="hljs-number">5</span><br><br>    <span class="hljs-comment"># num_classes 在这个代码中用于指定文本分类任务的类别数量。在该代码中，文本分类任务有两个类别，即&quot;好&quot;和&quot;不好&quot;，分别用 1 和 0 表示。</span><br>    <span class="hljs-comment"># 在模型的输出层，我们使用 self.out = nn.Linear(n_hidden * 2, num_classes) 这一行代码来定义输出层。</span><br>    <span class="hljs-comment"># 这个输出层是一个全连接层，将 LSTM 输出的特征（n_hidden * 2 维）转换成最终的分类结果（num_classes 维）。</span><br>    <span class="hljs-comment"># 对于本例中的二分类任务，num_classes 为 2，因为我们需要输出两个值（0或1）来表示分类结果。</span><br>    <span class="hljs-comment"># 这样，模型的输出维度就对应着两个类别的概率分布。</span><br><br>    <span class="hljs-comment"># 在训练阶段，模型输出的结果会通过 softmax 函数处理，得到对应类别的概率分布。</span><br>    <span class="hljs-comment"># 例如，如果模型输出 [0.7, 0.3]，则表示模型认为该文本属于&quot;好&quot;的概率为 0.7，属于&quot;不好&quot;的概率为 0.3。最终分类结果会根据概率值选择概率较大的类别，例如这里会选择&quot;好&quot;类别(0.7 &gt; 0.3)。</span><br>    <span class="hljs-comment"># 因此，num_classes 在代码中用于定义输出层的维度，确保模型能够输出正确的类别概率分布，并根据分类结果进行准确的文本分类</span><br>    num_classes = <span class="hljs-number">2</span><br><br>    <span class="hljs-comment"># 3词汇句子</span><br><span class="hljs-comment">#    sentences = [&quot;我 爱 你&quot;, &quot;他 爱 我&quot;, &quot;她 喜欢 篮球&quot;, &quot;她 喜欢 他&quot;, &quot;我 讨厌 你&quot;,&quot;他 讨厌 我&quot;, &quot;我 对不起 你&quot;]</span><br><span class="hljs-comment">#    labels = [1, 1, 1, 1, 0, 0, 0]  # 1 是 好, 0 是 不好. 构建词汇表，并为每个词汇赋予一个唯一的索引</span><br>    sentences = [<span class="hljs-string">&quot;我 爱 你&quot;</span>, <span class="hljs-string">&quot;他 爱 我&quot;</span>, <span class="hljs-string">&quot;她 喜欢 篮球&quot;</span>, <span class="hljs-string">&quot;她 喜欢 他&quot;</span>, <span class="hljs-string">&quot;我 讨厌 你&quot;</span>, <span class="hljs-string">&quot;他 讨厌 我&quot;</span>, <span class="hljs-string">&quot;我 对不起 你&quot;</span>,<br>                 <span class="hljs-string">&quot;我 很高兴&quot;</span>,<span class="hljs-string">&quot;他 很高兴&quot;</span>,<span class="hljs-string">&quot;你 很高兴&quot;</span>,<span class="hljs-string">&quot;我 不高兴&quot;</span>,<span class="hljs-string">&quot;他 不高兴&quot;</span>,<span class="hljs-string">&quot;她 不高兴&quot;</span>]<br>    labels = [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]<br><br>    <span class="hljs-comment"># Define the maximum sequence length</span><br>    max_seq_length = <span class="hljs-number">6</span><br><br>    <span class="hljs-comment"># 为每个句子添加一个特殊的标记（例如&lt;PAD&gt;），使其与最长句子长度保持一致，以便构成一个批次的张量输入</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pad_sequence</span>(<span class="hljs-params">sentence, max_len</span>):<br>        words = sentence.split()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(words) &lt; max_len:<br>            words.extend([<span class="hljs-string">&#x27;&lt;PAD&gt;&#x27;</span>] * (max_len - <span class="hljs-built_in">len</span>(words)))<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; &quot;</span>.join(words[:max_len])<br><br>    <span class="hljs-comment"># 对所有句子进行填充</span><br>    sentences = [pad_sequence(sentence, max_seq_length) <span class="hljs-keyword">for</span> sentence <span class="hljs-keyword">in</span> sentences]<br><br>    <span class="hljs-comment"># 构建词汇表，并为每个词汇赋予一个唯一的索引</span><br>    <span class="hljs-comment"># 这段代码将所有的文本合并成一个字符串，然后按照空格分割成词汇列表。</span><br>    <span class="hljs-comment"># 使用set去重，确保每个词汇只出现一次，然后为每个词汇赋予一个唯一的索引。</span><br>    <span class="hljs-comment"># 构建出词汇表word_dict，其中键是词汇，值是对应的唯一索引，vocab_size表示词汇表的大小</span><br>    word_list = <span class="hljs-string">&quot; &quot;</span>.join(sentences).split()<br>    word_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(word_list))<br>    word_dict = &#123;w: i <span class="hljs-keyword">for</span> i, w <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(word_list)&#125;<br>    vocab_size = <span class="hljs-built_in">len</span>(word_dict)<br><br>    <span class="hljs-comment"># 创建 BiLSTM_Attention 类的实例 model</span><br>    <span class="hljs-comment"># 创建了一个带有注意力机制的双向LSTM文本分类模型</span><br>    model = BiLSTM_Attention()<br><br>    <span class="hljs-comment"># 定义损失函数 criterion 为交叉熵损失，优化器 optimizer 为Adam优化器</span><br>    <span class="hljs-comment"># 交叉熵损失适用于多分类任务，而Adam优化器是一种常用的优化算法</span><br>    criterion = nn.CrossEntropyLoss()<br>    optimizer = optim.Adam(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br><br>    <span class="hljs-comment"># 准备输入数据 inputs 和目标标签 targets</span><br>    <span class="hljs-comment"># 这段代码首先将每个句子转换为对应的索引序列，并将其转换为PyTorch的LongTensor类型，作为输入数据inputs。</span><br>    <span class="hljs-comment"># targets是标签序列，也转换为PyTorch的LongTensor类型。</span><br>    inputs = torch.LongTensor([np.asarray([word_dict[n] <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> sen.split()]) <span class="hljs-keyword">for</span> sen <span class="hljs-keyword">in</span> sentences])<br>    targets = torch.LongTensor([out <span class="hljs-keyword">for</span> out <span class="hljs-keyword">in</span> labels])  <span class="hljs-comment"># To using Torch Softmax Loss function</span><br><br>    <span class="hljs-comment"># 进行模型训练</span><br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5000</span>):<br>        <span class="hljs-comment"># 在每一轮训练中，首先将优化器的梯度清零（optimizer.zero_grad()）</span><br>        optimizer.zero_grad()<br><br>        <span class="hljs-comment"># 然后将输入数据输入模型，得到模型的输出和注意力权重。</span><br>        output, attention = model(inputs)<br><br>        <span class="hljs-comment"># 计算交叉熵损失</span><br>        loss = criterion(output, targets)<br>        <span class="hljs-keyword">if</span> (epoch + <span class="hljs-number">1</span>) % <span class="hljs-number">1000</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch:&#x27;</span>, <span class="hljs-string">&#x27;%04d&#x27;</span> % (epoch + <span class="hljs-number">1</span>), <span class="hljs-string">&#x27;cost =&#x27;</span>, <span class="hljs-string">&#x27;&#123;:.6f&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(loss))<br><br>        <span class="hljs-comment"># 进行反向传播</span><br>        loss.backward()<br><br>        <span class="hljs-comment"># 参数优化</span><br>        optimizer.step()<br><br>    <span class="hljs-comment"># Test</span><br>    <span class="hljs-comment"># 定义一个测试文本 test_text</span><br>    test_text = <span class="hljs-string">&#x27;她 不高兴&#x27;</span><br>    <span class="hljs-comment"># 并转换为张量</span><br>    tests = [np.asarray([word_dict[n] <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> test_text.split()])]<br>    <span class="hljs-comment"># print(tests)</span><br><br>    test_batch = torch.LongTensor(tests)<br><br>    <span class="hljs-comment"># 进行预测</span><br>    predict, _ = model(test_batch)<br>    predict = predict.data.<span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>, keepdim=<span class="hljs-literal">True</span>)[<span class="hljs-number">1</span>]<br>    <span class="hljs-comment"># 根据预测结果，判断测试文本的意义是&quot;好&quot;还是&quot;不好&quot;</span><br>    <span class="hljs-keyword">if</span> predict[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(test_text,<span class="hljs-string">&quot;is Bad Mean...&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(test_text,<span class="hljs-string">&quot;is Good Mean!!&quot;</span>)<br><br><br>    <span class="hljs-comment"># 可视化注意力权重</span><br>    <span class="hljs-comment"># 这段代码使用Matplotlib绘制了注意力权重矩阵的热力图。</span><br>    <span class="hljs-comment"># 矩阵的横轴表示文本序列中的每个词汇（&quot;first_word&quot;, &quot;second_word&quot;, &quot;third_word&quot;）</span><br>    <span class="hljs-comment"># 纵轴表示输入数据的批次（&quot;batch_1&quot;, &quot;batch_2&quot;, &quot;batch_3&quot;, &quot;batch_4&quot;, &quot;batch_5&quot;, &quot;batch_6&quot;）。</span><br>    <span class="hljs-comment"># 不同颜色的方块表示不同位置的词汇在分类时所受到的注意力程度。</span><br>    <span class="hljs-comment"># 通过该热力图可以观察模型在分类时关注的重要词</span><br>    fig = plt.figure(figsize=(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>)) <span class="hljs-comment"># [batch_size, n_step]</span><br>    ax = fig.add_subplot(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    ax.matshow(attention, cmap=<span class="hljs-string">&#x27;viridis&#x27;</span>)<br>    ax.set_xticklabels([<span class="hljs-string">&#x27;&#x27;</span>]+[<span class="hljs-string">&#x27;first_word&#x27;</span>, <span class="hljs-string">&#x27;second_word&#x27;</span>, <span class="hljs-string">&#x27;third_word&#x27;</span>], fontdict=&#123;<span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">14</span>&#125;, rotation=<span class="hljs-number">90</span>)<br>    ax.set_yticklabels([<span class="hljs-string">&#x27;&#x27;</span>]+[<span class="hljs-string">&#x27;batch_1&#x27;</span>, <span class="hljs-string">&#x27;batch_2&#x27;</span>, <span class="hljs-string">&#x27;batch_3&#x27;</span>, <span class="hljs-string">&#x27;batch_4&#x27;</span>, <span class="hljs-string">&#x27;batch_5&#x27;</span>, <span class="hljs-string">&#x27;batch_6&#x27;</span>], fontdict=&#123;<span class="hljs-string">&#x27;fontsize&#x27;</span>: <span class="hljs-number">14</span>&#125;)<br>    plt.show()<br><br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>PyTorch</tag>
        <tag>Python</tag>
        <tag>NLP</tag>
      </tags>
  </entry>
  <entry>
    <title>CH32(F10X F20X)</title>
    <url>/posts/57388.html</url>
    <content><![CDATA[<h1>对于WCH-link的接线</h1>
<h2 id="F103">F103</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">U	-&gt;	板上SWD区域<br>Rx	-&gt;	PA9(Tx)<br>Tx	-&gt;	PA10(Rx)<br>GND	-&gt;	GND<br>3V3	-&gt;	VCC<br>SWDIO-&gt;	PA13<br>SWDLK-&gt;	PA14<br></code></pre></td></tr></table></figure>
<h2 id="F207">F207</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">U	-&gt;	板上SWD区域<br>Rx	-&gt;	TXD<br>Tx	-&gt;	RXD<br>GND	-&gt;	GND<br>3V3	-&gt;	VDD<br>SWDIO	-&gt;	SWIO<br>SWDLK	-&gt;	SWCK<br></code></pre></td></tr></table></figure>
<h1>对于096 OLED屏幕接线</h1>
<h2 id="F207-2">F207</h2>
<blockquote>
<p>GND 电源地<br>
VCC 电源正（3.3～5V）<br>
D0(SCL) SCK管脚<br>
D1(SDA) MOSI管脚<br>
RES(RST) 用来复位（低电平复位）<br>
DC(D/C) 数据和命令控制管脚 1表示数据 0表示命令<br>
CS(NSS) 片选管脚</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">GND	-&gt;	GND<br>VCC	-&gt;	3V3<br>D0	-&gt;	PA5<br>D1	-&gt;	PA7<br>RES	-&gt;	PA4<br>DC	-&gt;	PA6<br>CS	-&gt;	NONE<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CH32</category>
      </categories>
  </entry>
  <entry>
    <title>CSP-S 2021游记</title>
    <url>/posts/8713.html</url>
    <content><![CDATA[<hr>
<blockquote>
<p><strong>结构体指针三目乱飞，球体体积交怼脸，手算 base64，现学四毛子算法，欢迎来到 CSP2021-S1。</strong></p>
</blockquote>
<p>身为蒟蒻的咱，心态平和🤔走的很安详</p>
<blockquote>
<p><strong>这里，我想用一下<a href="https://www.luogu.com.cn/user/486119">Naptie</a>大佬的概括</strong></p>
<p><strong>《平凡的单选题》</strong><br>
<strong>《acos(0.5)》</strong><br>
<strong>《d1, d2表示半径》</strong><br>
<strong>《两球体积交》</strong><br>
<strong>《含四个整型的结构体重载加号》</strong><br>
<strong>《int(char(0f))》</strong><br>
<strong>《Cg==》</strong><br>
<strong>《手算Base64编解码》</strong><br>
<strong>《121行代码》</strong><br>
<strong>《四毛子算法课》</strong><br>
<strong>《结构体与指针的复杂应用》</strong></p>
</blockquote>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>C、C++关键字</title>
    <url>/posts/7618.html</url>
    <content><![CDATA[<blockquote>
<p>本文章面向初学者问题：对C语言中的相应字符和单词用法不理解</p>
</blockquote>
<p>初学者第一次接触到的程序大都是打印hello world</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>作为初学者，面对代码中的<code>include、int、main、printf</code>，大部分人是不懂为什么用这些东西就可以做到打印<code>hello world</code>的效果的。</p>
<p>先了解两个概念：<strong>关键字</strong> 和 <strong>预处理</strong></p>
<hr>
<h2 id="什么是关键字？">什么是关键字？</h2>
<p>在C/C++中，我们常说到的关键字就是用于编程的一些<strong>具有特殊作用的词语</strong></p>
<p><strong>以下内容，详情请看各分块所给的链接详解</strong></p>
<h3 id="数据类型关键字">数据类型关键字</h3>
<p>详情情看：<a href="https://www.drluo.top/posts/48531">C/C++数据类型关键字详解 | www.drluo.top</a></p>
<p>char：声明字符型变量或函数</p>
<p>short: 声明短整型变量或函数</p>
<p>int： 声明整型变量或函数</p>
<p>float：声明单精度浮点型变量或函数</p>
<p>double：声明双精度浮点型变量或函数</p>
<p>long：声明长整型变量或函数（实际声明长整型会使用long long）</p>
<p>signed/unsigned：声明有符号/无符号类型变量或函数</p>
<p>struct：声明结构体变量或函数</p>
<p>enum：声明枚举类型</p>
<p>union：声明联合数据类型</p>
<p>unsigned：声明无符号类型变量或函数</p>
<p>void：声明函数无返回值或无参数，声明无类型指针…</p>
<h3 id="控制语句关键字">控制语句关键字</h3>
<p>详情情看：<a href="https://www.drluo.top/posts/23650">C/C++控制语句关键字详解 | www.drluo.top</a></p>
<p>循环语句 ：</p>
<p>​	for，while，do…while</p>
<p>​	break：跳出当前循环，也在switch中使用。</p>
<p>​	continue：结束当前循环，开始下一轮循环</p>
<p>条件语句：</p>
<p>​	if: 条件语句，只有当指定条件为 true 时，会执行if语句后<strong>有效范围</strong>内的代码</p>
<p>​	else ：如果 if 语句的条件为false，则执行else语句后<strong>有效范围</strong>内的代码</p>
<p>​	else if: 检测一个新的条件，当且仅当前一个条件为false时执行，执行的为该语句后<strong>有效范围</strong>内的代码</p>
<p>​	switch: 判断语句，用于多段分支</p>
<p>​	case：判断语句分支</p>
<p>​	default：判断语句中的“其他”分支</p>
<p>​	return：子程序返回语句</p>
<h3 id="存储类型关键字">存储类型关键字</h3>
<p>详情情看：<a href="https://www.drluo.top/posts/229">C/C++存储类型关键字详解 | www.drluo.top</a></p>
<p>auto ：声明自动变量（详情请看上方链接详解）</p>
<p>extern：声明变量是在其他文件正声明（也可以看做是引用变量）</p>
<p>register：声明寄存器变量</p>
<p>static ：声明静态变量</p>
<h3 id="其它关键字">其它关键字</h3>
<p>详情情看：<a href="https://www.drluo.top/posts/28732">C/C++其他关键字详解 | www.drluo.top</a></p>
<p>const ：声明只读变量</p>
<p>sizeof：计算数据类型长度</p>
<p>typedef：用以给数据类型取别名 等</p>
<p>volatile：说明变量在程序执行中可被隐式改变</p>
<p>goto：跳转语句</p>
<h2 id="什么是预处理？">什么是预处理？</h2>
<p><strong>C 预处理器</strong>不是编译器的组成部分，但是它是编译过程中一个单独的步骤。</p>
<p>简言之，<strong>C 预处理器</strong>只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。</p>
<p>详情情看：<a href="https://www.drluo.top/posts/1746">C/C++预处理详解 | www.drluo.top</a></p>
<table>
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">#define</td>
<td style="text-align:left">定义宏</td>
</tr>
<tr>
<td style="text-align:left">#include</td>
<td style="text-align:left">包含一个源代码文件</td>
</tr>
<tr>
<td style="text-align:left">#undef</td>
<td style="text-align:left">取消已定义的宏</td>
</tr>
<tr>
<td style="text-align:left">#ifdef</td>
<td style="text-align:left">如果宏已经定义，则返回真</td>
</tr>
<tr>
<td style="text-align:left">#ifndef</td>
<td style="text-align:left">如果宏没有定义，则返回真</td>
</tr>
<tr>
<td style="text-align:left">#if</td>
<td style="text-align:left">如果给定条件为真，则编译下面代码</td>
</tr>
<tr>
<td style="text-align:left">#else</td>
<td style="text-align:left">#if 的替代方案</td>
</tr>
<tr>
<td style="text-align:left">#elif</td>
<td style="text-align:left">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td>
</tr>
<tr>
<td style="text-align:left">#endif</td>
<td style="text-align:left">结束一个 #if……#else 条件编译块</td>
</tr>
<tr>
<td style="text-align:left">#error</td>
<td style="text-align:left">当遇到标准错误时，输出错误消息</td>
</tr>
<tr>
<td style="text-align:left">#pragma</td>
<td style="text-align:left">使用标准化方法，向编译器发布特殊的命令到编译器中</td>
</tr>
</tbody>
</table>
<hr>
<p>理解了关键字和预处理后，让我们再看这段代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>#include &lt;stdio.h&gt;</code>： 这是一个预处理指令，用于包含标准输入输出库（Standard Input/Output Library），它提供了一系列用于输入和输出的函数。</p>
<blockquote>
<p><code>stdio.h</code>是一个标准C库头文件，包含了用于标准输入输出操作的声明和定义。</p>
<p>通过包含这个头文件，你可以在程序中使用<code>printf</code>和其他与输入输出相关的函数。</p>
</blockquote>
<p><code>int main()</code>： 这是程序的主函数。</p>
<blockquote>
<p>在C语言中，每个C程序都必须包含一个<code>main</code>函数，它是程序的入口点。<code>int</code>是返回类型，表示<code>main</code>函数将返回一个整数值。在这个简单的程序中，<code>main</code>函数没有任何参数。</p>
</blockquote>
<p><code>&#123;</code> 和 <code>&#125;</code>： 这些大括号用于定义<code>main</code>函数的开始和结束，在这些大括号之间的所有代码都属于<code>main</code>函数。</p>
<p><code>printf(&quot;Hello World!\n&quot;);</code>： 这是一个<code>printf</code>函数调用，用于将文本&quot;Hello World!&quot;输出到标准输出（通常是屏幕）。</p>
<blockquote>
<p><code>printf</code>函数是C语言中用于格式化输出的函数。在这里，它输出了一个字符串Hello World!，并在字符串末尾添加了一个换行符<code>\n</code>，以使输出换行，让下一个输出位于新的一行。</p>
<p>\n是一个转义字符，他代表换行符。</p>
</blockquote>
<p><code>return 0;</code>： 这是<code>main</code>函数的返回语句。</p>
<blockquote>
<p>该语句告诉操作系统程序已经成功执行，并返回一个整数值0。</p>
<p>在C语言中，0通常被视为成功的返回状态码。</p>
<p>可以留意程序执行后弹出的窗口，在出现错误时，程序的返回值是一个非0数。</p>
<p>你也可以修改这里的返回值，留意弹出后的窗口所返回的值，可以发现与此处设置的值相同。（前提是你的程序没有错误）</p>
</blockquote>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++存储类型关键字详解</title>
    <url>/posts/229.html</url>
    <content><![CDATA[<h1>存储类型关键字</h1>
<h2 id="auto">auto</h2>
<ul>
<li><code>auto</code> 是默认的存储类别关键字，它用于定义自动变量。</li>
<li>自动变量的生命周期仅限于定义它们的代码块，当代码块执行结束时，它们会被销毁。</li>
</ul>
<p>示例代码（<strong>记作代码1</strong>）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">auto</span> <span class="hljs-type">int</span> x = <span class="hljs-number">10</span>; <span class="hljs-comment">// 可以省略 &quot;auto&quot;，因为它是默认的存储类别</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x: %d\n&quot;</span>, x);<br>    <span class="hljs-comment">// x 的生命周期仅限于 main 函数</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上方代码1中，<code>auto int x = 10;</code>和<code>int x = 10;</code>是等效的：</p>
<p>这是因为 <code>int x = 10;</code> 默认就是一个自动变量，编译器会根据上下文自动识别它为自动变量。</p>
<p>同样，例如下方代码（<strong>记作代码2</strong>）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">auto</span> <span class="hljs-type">int</span> x = <span class="hljs-number">10</span>; <span class="hljs-comment">// 可以省略 &quot;auto&quot;，因为它是默认的存储类别</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x: %d\n&quot;</span>, x);<br><br>    <span class="hljs-keyword">auto</span> y = x;		 <span class="hljs-comment">// 使用auto类型定义变量y</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;y: %d\n&quot;</span>, y);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>当你写 <code>auto y = x;</code> 时，编译器也会将 <code>y</code> 类型设置为 <code>int</code>，因为 <code>x</code> 是 <code>int</code> 类型，所以 <code>y</code> 也被赋予了相同的类型。</p>
<p>C语言的类型系统会<strong>根据右侧表达式的类型来确定左侧变量的类型</strong>，这就是类型推断。</p>
<p>因此，在<strong>代码2</strong>中，<code>y</code> 被推断为 <code>int</code> 类型，与 <code>x</code> 相同。</p>
<h2 id="extern">extern</h2>
<ul>
<li><code>extern</code> 用于声明一个全局变量，它表明<strong>该变量在当前文件中并没有被定义，而是在其他文件中定义的</strong>。</li>
<li>这允许<strong>多个文件共享同一个全局变量</strong>，该变量可以被多个文件调用，并修改其值。</li>
</ul>
<p>示例代码（<code>extern</code>使用时，对应着多文件场景）：</p>
<p>文件1.c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> globalVar; <span class="hljs-comment">// 定义全局变量</span><br></code></pre></td></tr></table></figure>
<p>文件2.c:</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> globalVar; <span class="hljs-comment">// 声明全局变量，以便在其他文件中使用</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;globalVar: %d\n&quot;</span>, globalVar);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="register">register</h2>
<ul>
<li><code>register</code> 用于请求编译器将变量存储在CPU寄存器中，以加快对变量的访问速度。</li>
<li>这是一个建议（编译阶段请求将register存储在CPU寄存器中），<strong>编译器可能会忽略它</strong>，特别是在如今的编译器中（因为如今的编译器已经非常智能，它们能够更好地管理寄存器分配，从而提高代码的性能，通常来说，如今的编译器比程序员更了解如何优化代码）。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-type">int</span> i = <span class="hljs-number">5</span>; <span class="hljs-comment">// 请求将变量 i 存储在寄存器中</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i: %d\n&quot;</span>, i);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="static">static</h2>
<ul>
<li><code>static</code> 用于改变变量的存储期和可见性。</li>
<li>在函数内部使用 <code>static</code> 声明的变量具有持久的存储期，而在如今的使用 <code>static</code> 声明的变量<strong>只在当前文件中可见</strong>。</li>
</ul>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 持久性的局部变量</span><br>    count++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count: %d\n&quot;</span>, count);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    demo(); <span class="hljs-comment">// 输出 count: 1</span><br>    demo(); <span class="hljs-comment">// 输出 count: 2</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果上述代码不加<code>static</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">0</span>; <span class="hljs-comment">// 持久性的局部变量</span><br>    count++;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;count: %d\n&quot;</span>, count);<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    demo(); <span class="hljs-comment">// 输出 count: 1</span><br>    demo(); <span class="hljs-comment">// 输出 count: 1</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++其他关键字详解</title>
    <url>/posts/28732.html</url>
    <content><![CDATA[<h1>其它关键字</h1>
<h2 id="const">const</h2>
<ul>
<li><strong>作用</strong>：<code>const</code> 用于声明常量，表示变量的值不可被修改。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">const</span> <span class="hljs-type">int</span> age = <span class="hljs-number">30</span>; <span class="hljs-comment">// 定义一个不可修改的整数常量</span><br>age = <span class="hljs-number">35</span>; <span class="hljs-comment">// 这里会导致编译错误，因为常量不可被修改</span><br></code></pre></td></tr></table></figure>
<h2 id="sizeof">sizeof</h2>
<ul>
<li><strong>作用</strong>：<code>sizeof</code> 用于获取数据类型或变量占用的内存字节数。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">size_t</span> size = <span class="hljs-keyword">sizeof</span>(x); <span class="hljs-comment">// 获取整数变量 x 占用的字节数</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x 占用的字节数为: %zu\n&quot;</span>, size);<br></code></pre></td></tr></table></figure>
<h2 id="typedef">typedef</h2>
<ul>
<li><strong>作用</strong>：<code>typedef</code> 用于创建自定义数据类型的别名。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Age; <span class="hljs-comment">// 创建一个名为 Age 的整数别名</span><br>Age myAge = <span class="hljs-number">25</span>; <span class="hljs-comment">// 使用 Age 别名定义整数变量</span><br></code></pre></td></tr></table></figure>
<ul>
<li><strong>另一个示例：</strong></li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125; Point;<br><br>Point p;<br>p.x = <span class="hljs-number">5</span>;<br><span class="hljs-comment">// 使用自定义的数据类型别名 Point 来声明变量</span><br></code></pre></td></tr></table></figure>
<h2 id="volatile">volatile</h2>
<ul>
<li><strong>作用</strong>：<code>volatile</code> 用于告诉编译器该变量的值可能在编译器控制之外的情况下发生变化（<strong>被修改</strong>），因此不应进行优化。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> sensorValue; <span class="hljs-comment">// 定义一个用于传感器值的变量</span><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> reading = sensorValue; <span class="hljs-comment">// 读取传感器值</span><br>    <span class="hljs-comment">// 这里编译器不会对 reading 进行优化，以确保每次都读取最新值</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="何为“不应进行优化？”">何为“不应进行优化？”</h3>
<p>具体来说，<strong>不进行优化</strong>意味着编译器不会对这些变量的读取和写入操作进行任何形式的优化，以确保它们在程序中的每次引用都<strong>反映其实际状态</strong>，而不会被优化掉或重排序。</p>
<p>通常情况下，<code>volatile</code> 用于描述那些<strong>可能被外部因素更改</strong>的变量，如<strong>硬件寄存器</strong>或<strong>多线程程序</strong>中的<strong>共享变量</strong>。</p>
<p>这些变量可能在<strong>程序之外</strong>的上下文中被更改，例如硬件设备可能会更新某个寄存器的值，或者在多线程环境中，一个线程可能会更改另一个线程正在访问的共享变量。</p>
<p>因此，编译器不能对这些变量的操作进行优化，以确保程序的行为是可预测的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> sensorValue; <span class="hljs-comment">// 定义一个用于传感器值的 volatile 变量</span><br><br><span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-type">int</span> reading = sensorValue; <span class="hljs-comment">// 读取传感器值</span><br>    <span class="hljs-comment">// 编译器不会优化这里的 reading，以确保每次都读取最新的传感器值</span><br>    <span class="hljs-comment">// 这是因为 sensorValue 可能在程序之外的上下文中被更改</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>如果不将 <code>sensorValue</code>变量声明为 <code>volatile</code>，编译器可能会认为 <code>reading</code> 的值在循环中不会改变，从而进行优化，导致不正确的行为。</p>
<p>总之，<code>volatile</code> 关键字用于告诉编译器不要对其修饰的变量进行任何优化，以确保这些变量的值在程序中的每次引用都是最新的。</p>
<h2 id="goto">goto</h2>
<ul>
<li><strong>作用</strong>：<code>goto</code> 用于实现无条件跳转到程序中的标签位置，但通常不推荐使用（goto语句的随性跳转会极大的降低代码可读性，对维护不利，且可能造成逻辑混乱）。</li>
<li><strong>示例</strong>：</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-keyword">goto</span> jump_here; <span class="hljs-comment">// 无条件跳转到标签位置</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>&#125;<br><br>jump_here: <span class="hljs-comment">// 标签位置</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Jumped here!\n&quot;</span>);<br></code></pre></td></tr></table></figure>
<h1>总结</h1>
<p><strong>一般来说，应该尽量避免使用 <code>goto</code>，因为它可以导致代码难以理解和维护</strong>。</p>
<p><strong>初学者通常不需要使用 <code>volatile</code>，而应当谨慎使用 <code>typedef</code></strong></p>
<p>const<code>和</code>sizeof` 是C语言中非常常见和有用的关键字</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++控制语句关键字详解</title>
    <url>/posts/23650.html</url>
    <content><![CDATA[<h1>控制语句关键字</h1>
<p>下面是关于循环语句和条件语句的详细解释，包括特性、用法以及示例代码。我将注释来解释每个示例的执行流程，以及这些语句通常在哪些方面使用。</p>
<h2 id="循环语句：">循环语句：</h2>
<h4 id="for">for</h4>
<ul>
<li>
<p>特性：<code>for</code> 循环用于重复执行一段代码，通常在已知循环次数的情况下使用。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123; <span class="hljs-comment">// 初始化；条件；迭代</span><br>    <span class="hljs-comment">// 循环体代码</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i); <span class="hljs-comment">// 打印当前循环次数</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>示例中的<code>for</code>循环会执行5次。</p>
<p>最终打印出0到4这五个数字：</p>
<blockquote>
<p>0</p>
<p>1</p>
<p>2</p>
<p>3</p>
<p>4</p>
<blockquote></blockquote>
</blockquote>
<p>for常用于在一个范围内进行循环。</p>
</li>
</ul>
<h4 id="while">while</h4>
<ul>
<li>
<p>特性：<code>while</code> 循环用于根据条件重复执行一段代码，通常在循环次数不确定的情况下使用。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>) &#123; <span class="hljs-comment">// 条件</span><br>    <span class="hljs-comment">// 循环体代码</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i); <span class="hljs-comment">// 打印当前循环次数</span><br>    i++; <span class="hljs-comment">// 迭代</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>示例中的<code>while</code>循环会执行直到<code>i</code>不再小于5为止。</p>
<p>这个示例也会打印出0到4这五个数字。</p>
<p>while常用于需要不确定次数的循环。</p>
</li>
</ul>
<h4 id="do…while">do…while</h4>
<ul>
<li>
<p>特性：<code>do...while</code> 循环与<code>while</code>循环类似，不同之处在于它先执行一次循环体，然后再检查条件。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">do</span> &#123;<br>    <span class="hljs-comment">// 循环体代码</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i); <span class="hljs-comment">// 打印当前循环次数</span><br>    i++; <span class="hljs-comment">// 迭代</span><br>&#125; <span class="hljs-keyword">while</span> (i &lt; <span class="hljs-number">5</span>); <span class="hljs-comment">// 条件</span><br></code></pre></td></tr></table></figure>
<p>示例中的<code>do...while</code>循环至少会执行一次循环体，然后重复执行，直到条件不再满足。</p>
<p>这个示例也会打印出0到4这五个数字，但至少会执行一次循环体。</p>
</li>
</ul>
<h4 id="break">break</h4>
<ul>
<li>
<p>特性：<code>break</code> 语句用于在循环内部提前退出循环，无论循环条件是否满足。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">5</span>) &#123;<br>        <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 提前退出循环</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>示例中，当<code>i</code>等于5时，<code>break</code>会终止整个<code>for</code>循环的执行。</p>
<p><code>break</code> 通常用于退出循环，但也可以在<code>switch</code>语句中用于终止<code>case</code>分支的执行。</p>
</li>
</ul>
<h4 id="continue">continue</h4>
<ul>
<li>
<p>特性：<code>continue</code> 语句用于跳过当前循环的剩余代码，继续下一次循环。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br>    <span class="hljs-keyword">if</span> (i == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过i等于2的情况</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>示例中，当<code>i</code>等于2时，<code>continue</code>会跳过当前循环，继续下一次。</p>
<p>最终打印出：</p>
<blockquote>
<p>0</p>
<p>1</p>
<p>3</p>
<p>4</p>
<blockquote></blockquote>
</blockquote>
</li>
</ul>
<h2 id="条件语句：">条件语句：</h2>
<h4 id="if-和-else">if 和 else</h4>
<ul>
<li>
<p>特性：<code>if</code> 用于执行条件为真时的代码块，<code>else</code> 用于执行条件为假时的代码块。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">5</span>) &#123; <span class="hljs-comment">// 如果条件为真</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x大于5\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// 如果上方if的条件为假</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x不大于5\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>if</code> 和 <code>else</code> 语句用于根据条件执行不同的代码块。</p>
<p>这个示例中，由于<code>x</code>大于5，所以将执行<code>if</code>块内的代码。</p>
<p><strong>可能你对if后大括号的添加与否有疑问，请查看<a href="https://www.drluo.top/posts/57353">C/C++的大括号是必须的部分吗？</a></strong></p>
</li>
</ul>
<h4 id="else-if">else if</h4>
<ul>
<li>
<p>特性：<code>else if</code> 用于在多个条件之间进行选择，如果前面的条件不满足，则继续检查下一个条件。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">15</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x大于15\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">10</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x大于10但不大于15\n&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x不大于10\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>else if</code> 允许你在多个条件之间选择执行，而不仅仅是真或假。</p>
<p>这个示例中，由于<code>x</code>不大于15，所以将执行<code>else if</code>的判断(x &gt; 10)，发现其判断依旧为false，将继续往后判断，发现最后为else语句，没有另外的判断条件，则最终会输出else部分的代码。</p>
</li>
</ul>
<h4 id="switch">switch</h4>
<ul>
<li>
<p>特性：<code>switch</code> 语句用于基于表达式的值选择执行不同的代码块。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> day = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span> (day) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期一\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期二\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;星期三\n&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;其他\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>switch</code> 语句基于<code>day</code>的值选择执行不同的<code>case</code>块。</p>
<p>这个示例根据<code>day</code>的值执行不同的代码块。由于<code>day</code>等于3，因此执行<code>case 3: </code></p>
<p>必须使用<code>break</code>来防止执行其他<code>case</code>块。</p>
<p>你可以去掉<code>break</code>，然后运行以上部分代码，查看<code>break</code>在<code>switch</code>中的效果。</p>
</li>
</ul>
<h4 id="return">return</h4>
<ul>
<li>
<p>特性：<code>return</code> 语句用于从函数中返回一个值，或提前退出函数。</p>
</li>
<li>
<p>用法示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> &#123;<br>    <span class="hljs-keyword">return</span> a + b; <span class="hljs-comment">// 返回a和b的和</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>return</code> 用于将计算结果返回给调用函数，也可用于提前退出函数。</p>
</li>
</ul>
<p>总结：</p>
<ul>
<li><code>for</code>、<code>while</code>、<code>do...while</code> 用于控制循环。</li>
<li><code>break</code> 用于退出循环。</li>
<li><code>continue</code> 用于跳过当前循环。</li>
<li><code>if</code> 和 <code>else</code> 主要用于条件判断，<code>switch</code> 用于多条件选择。</li>
</ul>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++数据类型关键字详解</title>
    <url>/posts/48531.html</url>
    <content><![CDATA[<h1>数据类型关键字</h1>
<p>以下是对每个C语言数据类型关键字的详细解释，包括其包括特性、用法以及可能的范围和精度限制。</p>
<h3 id="char">char</h3>
<ul>
<li>特性：<code>char</code>（字符型）用于存储单个字符，通常占用1个字节的内存空间。它可以表示ASCII字符集中的字符。范围通常为-128到127。</li>
<li>用法：通常用于存储字符或小整数值。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">char</span> letter = <span class="hljs-string">&#x27;A&#x27;</span>; <span class="hljs-comment">// 定义一个字符变量并赋值</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="short">short</h3>
<ul>
<li>特性：<code>short</code>（短整型）用于存储整数值，通常占用2个字节的内存空间。范围通常为-32768到32767。</li>
<li>用法：适用于节省内存空间但需要存储整数的情况。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">short</span> temperature = <span class="hljs-number">-10</span>; <span class="hljs-comment">// 定义一个短整数变量并赋值</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="int">int</h3>
<ul>
<li>
<p>特性：<code>int</code>（整型）用于存储整数值，通常占用4个字节的内存空间。这是最常用的整数类型。范围通常为-2147483648到2147483647。</p>
</li>
<li>
<p>用法：通常用于存储整数，执行基本数学运算等。</p>
</li>
<li>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> count = <span class="hljs-number">100</span>; <span class="hljs-comment">// 定义一个整数变量并赋值</span><br></code></pre></td></tr></table></figure>
<p>int类型在计算过程中，会仅保留整数位，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">3</span>;<br>a = a/<span class="hljs-number">2</span>;<br><span class="hljs-comment">//经过a/2计算后，3/2=1.5,实际上a被赋予的值是1</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="float">float</h3>
<ul>
<li>特性：<code>float</code>（单精度浮点型）用于存储浮点数，通常占用4个字节的内存空间。它具有单精度（约6-7位有效数字）。</li>
<li>用法：用于存储小数或具有小数部分的数值。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">float</span> pi = <span class="hljs-number">3.14</span>; <span class="hljs-comment">// 定义一个单精度浮点数变量并赋值为 3.14</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="double">double</h3>
<ul>
<li>特性：<code>double</code>（双精度浮点型）用于存储双精度浮点数，通常占用8个字节的内存空间。它具有更高的精度（约15-16位有效数字）。</li>
<li>用法：用于存储需要高精度的浮点数。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> salary = <span class="hljs-number">2.71828</span>; <span class="hljs-comment">// 定义一个双精度浮点数变量并赋值为 2.71828</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="long">long</h3>
<ul>
<li>特性：<code>long</code>（长整型）用于存储长整数，通常占用4个或8个字节的内存空间，具体大小取决于编译器和平台。通常用1long long`去声明一个长整数。</li>
<li>用法：用于存储大整数值。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">long</span> <span class="hljs-type">long</span> population = <span class="hljs-number">8000000L</span>; <span class="hljs-comment">// 定义一个长整数变量并赋值，L表示值为长整数</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="signed-和-unsigned">signed 和 unsigned</h3>
<ul>
<li>特性：这两个关键字用于指定整数的符号性质。<code>signed</code>用于表示有符号整数，可以表示正数、负数和零；<code>unsigned</code>用于表示无符号整数，只能表示非负整数。</li>
<li>用法：根据需求选择合适的符号性质。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">signed</span> <span class="hljs-type">int</span> temperature = <span class="hljs-number">-5</span>; <span class="hljs-comment">// 有符号整数</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> score = <span class="hljs-number">95</span>; <span class="hljs-comment">// 无符号整数</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="struct">struct</h3>
<ul>
<li>特性：<code>struct</code>（结构体）用于定义自定义的数据类型，可以包含多个不同类型的成员变量。</li>
<li>用法：用于组织和存储多个相关数据项。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> &#123;</span><br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Point</span> <span class="hljs-title">p1</span> =</span> &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;; <span class="hljs-comment">// 定义一个结构体变量</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="enum">enum</h3>
<ul>
<li>特性：<code>enum</code>（枚举类型）用于创建一个有限集合的命名整数常量。</li>
<li>用法：用于提高代码可读性，将整数值与有意义的标识符关联起来。</li>
<li>示例代码：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Days</span> &#123;</span> Sunday, Monday, Tuesday, Wednesday, Thursday, Friday, Saturday &#125;;<br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Days</span> <span class="hljs-title">today</span> =</span> Tuesday; <span class="hljs-comment">// 使用枚举值</span><br></code></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="union">union</h3>
<pre><code>- 特性：`union`（联合体）用于在相同的内存位置存储不同类型的数据，但只能同时存储其中一个成员。
    - 用法：用于节省内存空间，但需要同时存储不同类型的数据。
    - 示例代码：
  <figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Data</span> &#123;</span><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">float</span> f;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">union</span> <span class="hljs-title">Data</span> <span class="hljs-title">value</span>;</span><br>value.i = <span class="hljs-number">42</span>; <span class="hljs-comment">// 存储整数</span><br></code></pre></td></tr></table></figure>
</code></pre>
<h3 id="void">void</h3>
<pre><code>- 特性：`void`用于表示没有特定数据类型的值，通常用于函数的返回类型和指针类型。
    - 用法：
  - 函数返回类型：用于表示函数不返回任何值。
  - 指针类型：用于创建通用指针（`void*`），可以指向任何类型的数据。
    
    - 示例代码：
    
      <figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">printMessage</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>&#125;<br><span class="hljs-type">void</span>* ptr; <span class="hljs-comment">// 定义一个通用指针</span><br><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br>ptr = &amp;x; <span class="hljs-comment">// 将通用指针指向一个整数</span><br></code></pre></td></tr></table></figure>
</code></pre>
<p>每种数据类型都有其自身的特性和适用场景。范围和精度限制取决于具体的数据类型和编译器/平台的实现。</p>
<p>例如，整数类型的范围受到位数的限制，浮点数类型的精度受到<a href="https://zhuanlan.zhihu.com/p/480834719">IEEE 754标准</a>的限制。</p>
<p>在程序编写过程中，使用合适的数据类型可以提高程序的性能和可维护性。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++数组，指针，指针数组，数组指针的区别</title>
    <url>/posts/24095.html</url>
    <content><![CDATA[<h2 id="C、C-数组，指针，指针数组，数组指针的区别">C、C++数组，指针，指针数组，数组指针的区别</h2>
<p>C语言中的数组、指针、指针数组和数组指针是不同的概念，它们在用途和定义上有明显的区别。</p>
<h3 id="数组-Array">数组 (Array):</h3>
<ul>
<li>数组是一种数据结构，用于存储相同数据类型的元素。它们在内存中是连续分布的。</li>
<li>数组的大小是在声明时确定的，且不能改变。</li>
<li>数组的元素可以通过索引来访问，索引从0开始。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> myArray[<span class="hljs-number">5</span>]; <span class="hljs-comment">// 声明一个包含5个整数的数组</span><br>myArray[<span class="hljs-number">0</span>] = <span class="hljs-number">10</span>; <span class="hljs-comment">// 设置第一个元素的值为10</span><br><span class="hljs-type">int</span> x = myArray[<span class="hljs-number">2</span>]; <span class="hljs-comment">// 读取第三个元素的值</span><br></code></pre></td></tr></table></figure>
<h4 id="一维数组">一维数组</h4>
<p>一维数组可以通过下标的方式访问（<strong>id</strong> = <strong>房间号-1</strong>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num[<span class="hljs-number">10</span>]; <br><span class="hljs-comment">//房间号 1 2 3 4 5 6 7 8 9 10</span><br><span class="hljs-comment">//id	0 1 2 3 4 5 6 7 8 9</span><br></code></pre></td></tr></table></figure>
<p>对于这个一维数组，我们可以这样理解它的存储方式（框中的数字为对应id）</p>
<p><img src="/img/page/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/image-20230312144553888.png" alt="image-20230312144553888"></p>
<h4 id="二维数组">二维数组</h4>
<p>对于二维数组，我们可以理解为：数组在此的基础上<strong>多了一层</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num[<span class="hljs-number">2</span>][<span class="hljs-number">10</span>];<br><span class="hljs-comment">//这是一个有两层，每层10个房间的数组</span><br><span class="hljs-comment">//如果我们想找到第2层第4个房间里面是谁，采用num[1][3]便可取出</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/image-20230312144931073.png" alt="image-20230312144931073"></p>
<h4 id="n维数组">n维数组</h4>
<p>同样的，你甚至可以弄出三维数组，四维数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> num[<span class="hljs-number">2</span>][<span class="hljs-number">10</span>][<span class="hljs-number">2</span>];<br><span class="hljs-comment">//这是一个有三层，每层10分区，每个分区2个房间的数组</span><br><span class="hljs-comment">//如果我们想找到第1层第6个分区里第2个房间里面是谁，采用num[0][5][1]便可取出</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/C%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%9B%B8%E5%85%B3/image-20230312145533716.png" alt="image-20230312145533716"></p>
<h3 id="指针-Pointer">指针 (Pointer):</h3>
<ul>
<li>指针是一个变量，用于存储其他变量的内存地址。</li>
<li>指针的类型必须与它指向的变量类型相匹配。</li>
<li>通过指针，可以直接访问和修改变量的值。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> x = <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> *ptr = &amp;x; <span class="hljs-comment">// 声明一个整数指针，并将其指向x的地址</span><br><span class="hljs-type">int</span> y = *ptr; <span class="hljs-comment">// 通过指针访问x的值</span><br>*ptr = <span class="hljs-number">20</span>; <span class="hljs-comment">// 通过指针修改x的值</span><br></code></pre></td></tr></table></figure>
<h3 id="指针数组-Array-of-Pointers">指针数组 (Array of Pointers):</h3>
<ul>
<li>指针数组是一个数组，其元素都是指针。</li>
<li>每个指针可以指向不同的数据类型。</li>
<li>通常用于存储指向不同数据类型的数据或字符串的数组。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>, b = <span class="hljs-number">20</span>, c = <span class="hljs-number">30</span>;<br><span class="hljs-type">int</span> *ptrArray[<span class="hljs-number">3</span>]; <span class="hljs-comment">// 声明一个包含3个整数指针的指针数组</span><br>ptrArray[<span class="hljs-number">0</span>] = &amp;a;<br>ptrArray[<span class="hljs-number">1</span>] = &amp;b;<br>ptrArray[<span class="hljs-number">2</span>] = &amp;c;<br><span class="hljs-type">int</span> value = *(ptrArray[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 通过指针数组访问b的值</span><br></code></pre></td></tr></table></figure>
<h3 id="数组指针-Pointer-to-Array">数组指针 (Pointer to Array):</h3>
<ul>
<li>数组指针是一个指针，它指向数组的首地址。</li>
<li>通常用于处理二维数组或多维数组。</li>
<li>数组指针的类型必须与它指向的数组类型相匹配。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> myArray[<span class="hljs-number">3</span>] = &#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>&#125;;<br><span class="hljs-type">int</span> (*ptr)[<span class="hljs-number">3</span>] = &amp;myArray; <span class="hljs-comment">// 声明一个指向包含3个整数的数组的指针</span><br><span class="hljs-type">int</span> element = (*ptr)[<span class="hljs-number">1</span>]; <span class="hljs-comment">// 通过数组指针访问myArray的第二个元素</span><br></code></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>数组是一组相同类型的数据元素。</li>
<li>指针是用于存储内存地址的变量。</li>
<li>指针数组是指向不同数据类型的指针的数组。</li>
<li>数组指针是指向数组的指针，通常用于处理多维数组。</li>
</ul>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++的大括号是必须的部分吗？</title>
    <url>/posts/57353.html</url>
    <content><![CDATA[<p>在作为一名初学者，你可能看到一些课程中，对于判断或者循环部分，会使用类似这样的两种方式：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// 方式1</span><br><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">1</span>)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a &gt; 1&quot;</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; i++) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br>&#125;<br><span class="hljs-comment">// 方式2</span><br><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">1</span>) <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a &gt; 1&quot;</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i&lt; <span class="hljs-number">10</span>; i++)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i);<br></code></pre></td></tr></table></figure>
<p>并且你会发现，对于这两种方式，他们的效果一样。</p>
<p>那么大括号{}括起来和不括起来有什么区别呢？</p>
<hr>
<p>在C语言中，<code>if</code>语句后面的圆括号<code>()</code>内的表达式决定了条件是否为真。</p>
<p>当条件为真时，<code>if</code>语句后面的代码块将被执行。</p>
<p>这个代码块可以是<strong>单个语句</strong>，也可以是用大括号<code>&#123;&#125;</code><strong>括起来的多个语句</strong>。</p>
<p>下面我来解释两种写法的差异：</p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">  <span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">1</span>) &#123; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;条件为真时执行的代码&quot;</span>); <br>  &#125;<br></code></pre></td></tr></table></figure>
<blockquote>
<p>这种写法使用了大括号<code>&#123;&#125;</code>，将一组语句组成了一个代码块。如果条件<code>a &gt; 1</code>为真，那么大括号内的所有语句都将被执行。</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(a &gt; <span class="hljs-number">1</span>) <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;条件为真时执行的代码&quot;</span>);<br></code></pre></td></tr></table></figure>
<blockquote>
<p>这种写法没有使用大括号<code>&#123;&#125;</code>，只包含了一个单独的语句。如果条件<code>a &gt; 1</code>为真，那么仅仅执行紧随其后的这个语句。</p>
</blockquote>
<p>所以，对于<strong>这种情况</strong>，两种写法的效果是一样的，只不过一种是用大括号明确地定义了一个代码块，另一种是单独的语句。</p>
<p>这种用大括号括起来的部分通常被称为代码块或语句块，它可以包含一个或多个语句，用于组织多条语句以在特定条件下执行。使用大括号可以增加代码的可读性，并避免潜在的歧义，特别是在多条语句的情况下。</p>
<p>不过在<strong>某些简单情况下</strong>，可以选择不使用大括号，但这通常<strong>不被推荐</strong>，因为它可能导致代码在以后的修改中出现问题。</p>
<p>如果在 <code>if</code> 语句中不使用大括号括起来代码块，你可能会遇到以下问题：</p>
<ol>
<li>
<p><strong>逻辑错误</strong>：最常见的问题是逻辑错误。如果你不小心缩进了代码，以使其看起来好像属于 <code>if</code> 语句，但实际上不是，这可能会导致代码不按预期运行。</p>
</li>
<li>
<p><strong>可读性差</strong>：缺少大括号会使代码的结构不够清晰，降低了可读性。其他开发人员阅读代码时可能会难以理解哪些代码是条件成立时执行的。</p>
</li>
<li>
<p><strong>维护问题</strong>：如果以后需要在条件成立时执行多个语句，你可能会忘记添加大括号，从而导致错误。这种错误很难发现，并且可能导致严重的问题。</p>
</li>
</ol>
<p>例如，考虑以下代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x 大于 10&quot;</span>);<br>    y = x * <span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure>
<p>在这个示例中，<code>printf</code> 看起来好像是条件成立时执行的，但实际上，只有 <code>printf</code> 会受到 <code>if</code> 语句的条件影响。<code>y = x * 2</code> 不受条件控制，这可能不是你的意图。</p>
<p>为了避免这种潜在的问题，建议始终使用大括号来明确地定义代码块，即使在 <code>if</code> 语句中只有一个语句也是如此，这样可以提高代码的可读性和健壮性，降低出错的可能性。例如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (x &gt; <span class="hljs-number">10</span>) &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x 大于 10&quot;</span>);<br>    y = x * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>这种方式更清晰，更容易维护，且不容易出现潜在错误。</p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C、C++预处理详解</title>
    <url>/posts/1746.html</url>
    <content><![CDATA[<h1>什么是预处理？</h1>
<p><strong>C 预处理器</strong>不是编译器的组成部分，但是它是编译过程中一个单独的步骤。</p>
<p>简言之，<strong>C 预处理器</strong>只不过是一个文本替换工具而已，它们会指示编译器在实际编译之前完成所需的预处理。</p>
<table>
<thead>
<tr>
<th style="text-align:left">指令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">#include</td>
<td style="text-align:left">包含一个源代码文件</td>
</tr>
<tr>
<td style="text-align:left">#define</td>
<td style="text-align:left">定义宏</td>
</tr>
<tr>
<td style="text-align:left">#undef</td>
<td style="text-align:left">取消已定义的宏</td>
</tr>
<tr>
<td style="text-align:left">#ifdef</td>
<td style="text-align:left">如果宏已经定义，则返回真</td>
</tr>
<tr>
<td style="text-align:left">#ifndef</td>
<td style="text-align:left">如果宏没有定义，则返回真</td>
</tr>
<tr>
<td style="text-align:left">#if</td>
<td style="text-align:left">如果给定条件为真，则编译下面代码</td>
</tr>
<tr>
<td style="text-align:left">#else</td>
<td style="text-align:left">#if 的替代方案</td>
</tr>
<tr>
<td style="text-align:left">#elif</td>
<td style="text-align:left">如果前面的 #if 给定条件不为真，当前条件为真，则编译下面代码</td>
</tr>
<tr>
<td style="text-align:left">#endif</td>
<td style="text-align:left">结束一个 #if……#else 条件编译块</td>
</tr>
<tr>
<td style="text-align:left">#error</td>
<td style="text-align:left">当遇到标准错误时，输出错误消息</td>
</tr>
<tr>
<td style="text-align:left">#pragma</td>
<td style="text-align:left">使用标准化方法，向编译器发布特殊的命令到编译器中</td>
</tr>
</tbody>
</table>
<h2 id="include">#include</h2>
<p><code>#include</code> 是C语言中的一个预处理指令，它的主要作用是将外部的头文件（header files）内容包含到当前的源代码文件中。</p>
<blockquote>
<p>头文件通常包含了函数声明、宏定义、结构体和其他变量的声明等，以便在当前源代码文件中使用这些声明和定义。</p>
</blockquote>
<p>具体作用如下：</p>
<ol>
<li>
<p><strong>代码重用</strong>：通过包含头文件，可以重用其他文件中定义的函数和变量，而<strong>不必重新编写</strong>它们。这有助于减少代码的冗余，提高代码的可维护性。</p>
</li>
<li>
<p><strong>接口分离</strong>：头文件通常包含了模块或库的公共接口。通过包含适当的头文件，您可以访问这些接口，而不必了解其内部实现细节。</p>
</li>
<li>
<p><strong>模块化编程</strong>：C语言支持将代码分为多个文件，每个文件对应一个模块。头文件有助于定义模块的接口，使代码更易于组织和管理。</p>
</li>
<li>
<p><strong>解决符号冲突</strong>：在大型程序中，多个源文件可能会包含相同的函数或变量名。使用头文件可以避免命名冲突，因为头文件通常包含了对这些符号的声明。</p>
</li>
</ol>
<p>下面是一个示例，演示了如何使用<code>#include</code> 指令来包含头文件以及其作用：</p>
<p><strong>示例头文件 <code>myheader.h</code>：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// myheader.h</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MYHEADER_H</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MYHEADER_H</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span>; <span class="hljs-comment">// 函数声明，其实现通常在同名头文件.c   这里是myheader.c</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VALUE 100    <span class="hljs-comment">// 宏定义</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure>
<p><strong>头文件代码实现<code>myheader.c</code></strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myheader.h&quot;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>示例源文件 <code>main.c</code>：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>      <span class="hljs-comment">// 标准C库头文件</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;myheader.h&quot;</span>   <span class="hljs-comment">// 自定义头文件</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> x = <span class="hljs-number">5</span>;<br>    <span class="hljs-type">int</span> y = <span class="hljs-number">7</span>;<br>    <br>    <span class="hljs-type">int</span> sum = add(x, y);  <span class="hljs-comment">// 调用myheader.h中声明的add函数，其实现在myheader.c中</span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d + %d = %d\n&quot;</span>, x, y, sum);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MAX_VALUE 的值是 %d\n&quot;</span>, MAX_VALUE);  <span class="hljs-comment">// 使用自定义的宏</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上面的示例中，<code>#include</code> 指令用于包含标准C库头文件<code>&lt;stdio.h&gt;</code>和自定义头文件<code>&quot;myheader.h&quot;</code>。这样，<code>main.c</code> 中的代码可以使用 <code>add</code> 函数和 <code>MAX_VALUE</code> 宏，尽管它们的实现和定义分别在 <code>myheader.h</code> 文件中。这有助于代码的模块化和可维护性，以及避免冲突和错误。</p>
<h2 id="define">#define</h2>
<p><code>#define</code> 允许你为标识符定义一个文本替代品。</p>
<p><strong>请务必牢记！宏替代是文本替换，宏替代是文本替换，宏替代是文本替换。</strong></p>
<p>当编译器遇到这个标识符时，它会被替换为宏的定义。</p>
<p>这个替换发生在代码的<strong>预处理阶段</strong>，因此在编译时<strong>宏的名字将被它的值所取代</strong>。</p>
<p><strong>宏定义的语法</strong></p>
<p><code>#define</code> 指令通常以以下形式出现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> 宏名 替代文本</span><br></code></pre></td></tr></table></figure>
<ul>
<li>
<p><code>宏名</code> 是标识符，它可以是字母、数字和下划线的组合，但不能以数字开头。</p>
</li>
<li>
<p><code>替代文本</code> 是要替代的文本字符串。</p>
</li>
</ul>
<p><strong>宏的用途</strong>：</p>
<ul>
<li>
<p><strong>符号常量</strong>：宏可以用来定义符号常量，以增加代码的可读性和维护性，如定义一些常量值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VALUE 100</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> x = MAX_VALUE;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>这里，<code>MAX_VALUE</code> 被定义为符号常量，可以在代码中使用，而不需要多次写入值100。</p>
</li>
<li>
<p><strong>宏函数</strong>：你可以使用宏来创建简单的函数替代品，例如，它们可以接受参数并生成相应的代码。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> SQUARE(x) ((x) * (x))</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> result = SQUARE(<span class="hljs-number">5</span>);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>在此示例中，<code>SQUARE</code> 是一个宏函数，它接受一个参数 <code>x</code> 并返回 <code>x</code> 的平方。在代码中使用宏函数<code>SQUARE(x)</code>时，它会被替换为 <code>((x) * (x))</code>。</p>
</li>
<li>
<p><strong>条件编译</strong>：宏可以用于条件编译，根据不同的条件定义或排除代码块。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug模式开启\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug模式关闭\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这里，<code>DEBUG</code> 宏用于条件编译。根据宏是否定义，不同的代码块会被包括或排除。</p>
</li>
<li>
<p><strong>代码重用</strong>：宏可以用于代码重用，减少代码的重复性。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> PRINT_TWICE(x) printf(<span class="hljs-string">&quot;%d\n%d\n&quot;</span>, x, x)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> number = <span class="hljs-number">42</span>;<br>    PRINT_TWICE(number);<br>    <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure>
<p>这个示例定义了一个宏 <code>PRINT_TWICE</code>，用于打印给定的值两次。在 <code>main</code> 函数中，<code>PRINT_TWICE(number)</code> 会被替换为 <code>printf(&quot;%d\n%d\n&quot;, number, number)</code>。</p>
</li>
</ul>
<p><strong>宏替代的注意事项</strong>：</p>
<ul>
<li>宏替代是<strong>文本替换</strong>，没有类型检查。</li>
<li>替代文本不需要分号或其他终结符。</li>
<li>替代文本中可以包含其他宏。</li>
<li>宏名和替代文本之间不需要空格。</li>
</ul>
<p><strong>添加宏定义后，大概的编译过程</strong>：</p>
<ul>
<li>预处理器处理源代码中的 <code>#define</code> 指令，将代码中所用到改宏名的地方<strong>全部</strong>替换为相应的替代文本。</li>
<li>文本替代后，编译器将处理替代后的源代码生成目标代码。</li>
</ul>
<p>需要注意的是，<code>#define</code> 指令并<strong>不会为宏分配内存</strong>，而是在编译时进行替代。</p>
<p>这意味着<strong>宏定义不会占用程序的内存空间</strong>，而只是在编译时用于代码生成。</p>
<h2 id="undef">#undef</h2>
<p><code>#undef</code> 用于取消或删除之前使用 <code>#define</code> 定义的宏（宏定义）。它的作用是从预处理阶段中删除一个宏定义，从而在编译时不再使用该宏。</p>
<p>以下是 <code>#undef</code> 的一般语法：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">undef</span> macro_name</span><br></code></pre></td></tr></table></figure>
<p>其中 <code>macro_name</code> 是要取消定义的宏的名称。</p>
<p><code>#define</code> 用于创建宏定义，通常用于定义符号常量或用于代码的文本替换。</p>
<p>使用 <code>#undef</code> 可以用于以下情况：</p>
<p><strong>取消宏定义：</strong> 如果在程序中不再需要某个宏定义，可以使用 <code>#undef</code> 来删除它，以避免在后续的代码中使用它。这对于确保程序的一致性和可维护性很重要。</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_CONSTANT 42</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MY_CONSTANT的值为: %d\n&quot;</span>, MY_CONSTANT);<br>    <br>    <span class="hljs-meta">#<span class="hljs-keyword">undef</span> MY_CONSTANT  <span class="hljs-comment">// 取消宏定义</span></span><br>    <span class="hljs-comment">// printf(&quot;MY_CONSTANT的值为: %d\n&quot;, MY_CONSTANT);  // 这将导致编译错误，因为 MY_CONSTANT 已被取消定义</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上面的示例中，<code>#undef MY_CONSTANT</code> 取消了 <code>MY_CONSTANT</code> 的宏定义，因此在取消定义后，再次尝试使用它会导致编译错误。</p>
<p><strong>修改宏定义：</strong> 您可以使用 <code>#undef</code> 取消一个宏定义，然后重新定义它以更改宏的值或定义。这可以用于在程序的不同部分重新定义宏，以适应不同的需求。</p>
<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_CONSTANT 42</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;MY_CONSTANT的值为: %d\n&quot;</span>, MY_CONSTANT);<br>    <br>    <span class="hljs-meta">#<span class="hljs-keyword">undef</span> MY_CONSTANT</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">define</span> MY_CONSTANT 24  <span class="hljs-comment">// 重新定义 MY_CONSTANT</span></span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;更新后，MY_CONSTANT的值为: %d\n&quot;</span>, MY_CONSTANT);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这个示例中，<code>#undef</code> 用于取消 <code>MY_CONSTANT</code> 的定义，然后使用 <code>#define</code> 重新定义了该宏，以修改宏的值（该影响对其之后代码适用）。</p>
<h2 id="ifdef-和-ifndef">#ifdef 和 ifndef</h2>
<p><code>#ifdef</code> 用于检查某个宏是否<strong>被定义</strong>，并且根据这个宏的<strong>定义</strong>情况来决定是否编译相关代码块。</p>
<p><code>#ifdef</code> 用于检查某个宏是否<strong>未被定义</strong>，并且根据这个宏的<strong>未定义</strong>情况来决定是否编译相关代码块。</p>
<h3 id="详尽解释：">详尽解释：</h3>
<p><strong>检查宏是否已定义：</strong> <code>#ifdef</code> 后面跟着一个宏的名字，编译器将检查这个宏是否已经在之前的代码中使用 <code>#define</code> 定义过。如果宏已经被定义，则相关的代码块将被编译，否则将被忽略。</p>
<p><strong>条件编译：</strong> 如果宏已经<strong>被定义</strong>，与 <code>#ifdef</code> 相关的代码块将被包含在编译中。如果宏<strong>未被定义</strong>，与 <code>#ifndef</code> 相关的代码块将被包含在编译中。</p>
<p><strong><code>#ifdef</code>和<code>#ifndef</code>不一定非要同时存在。</strong></p>
<h3 id="示例代码：">示例代码：</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG  <span class="hljs-comment">// 定义名为 DEBUG 的宏</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> DEBUG</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug模式开启\n&quot;</span>);<br>    <span class="hljs-comment">// 在这个代码块中，因为 DEBUG 宏已经被定义，所以这行代码将被编译</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这行代码在任何情况下都会被编译\n&quot;</span>);<br>    <span class="hljs-comment">// 这行代码将在任何情况下都被编译</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> RELEASE</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这段代码将会在RELEASE没有被定义的时候编译\n&quot;</span>);<br>    <span class="hljs-comment">// 在这个代码块中，因为 RELEASE 宏没有被定义，所以这行代码将被编译</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>	<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上面的示例中，我们定义了一个名为 <code>DEBUG</code> 的宏，并使用 <code>#ifdef</code> 来检查它是否已经定义。</p>
<p>由于 <code>DEBUG</code> 宏已经定义，与 <code>#ifdef DEBUG</code> 相关的代码块将被包含在编译中。</p>
<p>另外，我们使用 <code>#ifndef RELEASE</code> 来检查 <code>RELEASE</code> 宏是否未定义，如果未定义，相关的代码块也将被包含在编译中。</p>
<p>通过条件编译，你可以根据不同的需求和环境选择性地包含或排除代码，这在<strong>开发跨平台应用程序、调试代码或进行性能优化时</strong>非常有用。</p>
<h2 id="if，-else，-elif，-endif">#if，#else，#elif，#endif</h2>
<h3 id="if">#if</h3>
<ul>
<li><code>#if</code> 指令用于开始一个条件编译块，根据表达式的真假来决定是否编译其中的代码。</li>
<li>如果条件为<strong>真</strong>，包含在 <code>#if</code> 到 <code>#endif</code> <strong>之间</strong>的代码将被编译，否则将被忽略。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG 1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">if</span> DEBUG</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug模式开启\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;这段内容总会被打印\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这个示例中，因为 <code>DEBUG</code> 宏被定义为1，<code>#if DEBUG</code> 为真，所以 “Debug mode is active.” 这行代码会被编译。</p>
<h3 id="else">#else</h3>
<ul>
<li><code>#else</code> 用于在条件不成立时执行的代码块。</li>
<li>如果前面的 <code>#if</code> 或 <code>#elif</code> 的条件为假，<code>#else</code> 后面的代码块将会被编译。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> DEBUG 0</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">if</span> DEBUG</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug模式开启\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Debug模式关闭\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>因为 <code>DEBUG</code> 宏被定义为<strong>0</strong>，所以 <code>printf(&quot;Debug模式开启\n&quot;);</code> 这行代码会被编译。</p>
<h3 id="elif">#elif</h3>
<ul>
<li><code>#elif</code> 是 <code>#if</code> 的可选补充，用于在前面的条件不成立时测试另一个条件。</li>
<li>可以有多个 <code>#elif</code>，它们会逐一测试条件，直到找到一个条件为真，或者所有条件都为假。</li>
</ul>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OS_LINUX 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OS_WINDOWS 0</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-meta">#<span class="hljs-keyword">if</span> OS_LINUX</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Linux系统\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">elif</span> OS_WINDOWS</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Windows系统\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未知系统\n&quot;</span>);<br>    <span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>因为 <code>OS_LINUX</code> 宏被定义为1（非0数，为true），<code>OS_WINDOWS</code> 宏被定义为0，，所以 “printf(“Linux系统\n”);” 这行代码会被编译。</p>
<p>如果改成这样：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OS_LINUX 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OS_WINDOWS 1</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> OS_LINUX</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Linux系统\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> OS_WINDOWS</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Windows系统\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未知系统\n&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><code>OS_LINUX</code> 宏和<code>OS_WINDOWS</code> 宏均被定义为1，这样被编译的代码是哪个？</p>
<details>
    <summary><font color=FFAC68>展开查看代码</font></summary>
<pre>依旧是 printf("Linux系统\n"); 这行代码被编译</br>
因为#if OS_LINUX判断为真，进入该分段，不再往#elif情况下判断（类似于if(),else if()）</pre>
</details>
<h3 id="endif">#endif</h3>
<ul>
<li><code>#endif</code> 用于结束条件编译块，它将前面的 <code>#if</code>、<code>#elif</code> 和 <code>#else</code> 块的范围标志结束。</li>
</ul>
<h2 id="error">#error</h2>
<p><code>#error</code> 的主要作用是在预处理阶段产生一个编译错误，并且在编译器的错误信息中显示指定的错误消息，如下图：</p>
<p><img src="%5Cimg%5Cpage%5CC%E3%80%81C++%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%A6%E8%A7%A3%5Cerror.webp" alt=""></p>
<p><code>#error</code>通常用于条件编译或者编译时断言，以确保在编译过程中检查特定条件是否满足。</p>
<p>当条件不满足时，<code>#error</code> 将会导致编译中止，并且显示指定的错误消息，帮助程序员识别问题。</p>
<p>以下是示例代码和解释：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">// 定义一个宏，如果未定义该宏，则触发 #error 指令</span><br><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> MY_MACRO</span><br><span class="hljs-meta">#<span class="hljs-keyword">error</span> <span class="hljs-string">&quot;MY_MACRO 未定义，这是一个必需的宏&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在上面的示例中，我们首先使用 <code>#ifndef</code> 来检查是否定义了 <code>MY_MACRO</code> 这个宏。</p>
<p>如果没有定义，就会触发 <code>#error</code> 指令，其中包含了一条自定义错误消息：“MY_MACRO 未定义，这是一个必需的宏”（上方给出的图片）。</p>
<p>当编译这个程序时，如果 <code>MY_MACRO</code> 没有被定义，编译器将会报告以下错误消息：</p>
<p><img src="%5Cimg%5Cpage%5CC%E3%80%81C++%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%A6%E8%A7%A3%5Cerror.webp" alt=""></p>
<p><code>#error</code> 在调试和开发过程中非常有用，因为它可以提前发现潜在的错误，而不必在运行时才发现问题。</p>
<p><strong>当然，在实验室所编写的代码中，你可能没有地方用到<code>#error</code>，作为小项目，代码结构不会很复杂。</strong></p>
<h2 id="pragma">#pragma</h2>
<p><code>#pragma</code> 用于向编译器提供特定的编译指令或控制编译器的行为。</p>
<p>它通常是用来告诉编译器执行一些特定的操作或配置编译环境。</p>
<p><code>#pragma</code> 不是C语言标准的一部分，而是<strong>特定编译器的扩展</strong>，因此它的具体行为和支持的指令可以因编译器而异。</p>
<p>以下是一些常见的 <code>#pragma</code> 用途：</p>
<p><strong>优化控制</strong>：<code>#pragma</code> 可以用来告诉编译器如何优化代码，例如，可以控制循环展开、内联函数、优化级别等。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC optimize(<span class="hljs-string">&quot;O2&quot;</span>)</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 优化级别设置为 O2，具体什么叫02优化，03优化，请自行搜索，这里不做讲解</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>警告控制</strong>：<code>#pragma</code> 可以用来控制编译器的警告消息，例如，可以禁用特定的警告或设置警告级别。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC diagnostic ignored <span class="hljs-string">&quot;-Wformat&quot;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">someFunction</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 禁用针对格式错误的警告</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello, World&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>包含文件路径</strong>：<code>#pragma</code> 可以用于指定头文件的搜索路径。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> GCC system_header</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;my_header.h&gt;</span></span><br></code></pre></td></tr></table></figure>
<p><strong>对齐和结构体填充</strong>：<code>#pragma</code> 可以用于指示编译器如何对齐数据结构以及是否进行结构体填充（<strong>字节对齐</strong>，详情百度）。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> pack(1)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">MyStruct</span> &#123;</span><br>    <span class="hljs-type">int</span> a;<br>    <span class="hljs-type">char</span> b;<br>&#125;;<br></code></pre></td></tr></table></figure>
<p><strong>标识符重命名</strong>：<code>#pragma</code> 有时可以用来为变量或函数指定特定的编译器名称，这对于处理平台特定的函数名约定很有用。</p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> alias(<span class="hljs-string">&quot;my_function&quot;</span>, <span class="hljs-string">&quot;platform_specific_function&quot;</span>)</span><br></code></pre></td></tr></table></figure>
<ol>
<li><strong>其他用途</strong>：不同的编译器可能支持其他特定的 <code>#pragma</code> 指令，用于各种目的。</li>
</ol>
<hr>
<blockquote>
<p>请注意，<code>#pragma</code> 指令的具体行为和支持的指令取决于使用的编译器。</p>
<p>在编写跨平台的代码时，应小心使用 <code>#pragma</code>，因为它可能导致不可移植的问题。</p>
<p>最好的做法是避免使用 <code>#pragma</code>，除非绝对需要特定的编译器行为。</p>
<p>如果需要进行特定的编译器配置，<strong>最好在编译器选项中进行配置，而不是依赖 <code>#pragma</code></strong></p>
</blockquote>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言学习相关</title>
    <url>/posts/27662.html</url>
    <content><![CDATA[<h2 id="函数递归">函数递归</h2>
<blockquote>
<p>函数递归，简单的理解就是，自己调用自己，直到遇到边界条件，停止递归</p>
</blockquote>
<p>比如我们想实现一个阶乘函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n = <span class="hljs-number">5</span>;<span class="hljs-comment">//求n!  这里是5!</span><br><br><br><span class="hljs-comment">//不使用递归，一种可行的做法是这样</span><br><span class="hljs-type">int</span> ans = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>    ans *= i;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d! = %d&quot;</span>, n, ans);<br><br><br><span class="hljs-comment">//使用递归</span><br><span class="hljs-type">int</span> _n(<span class="hljs-type">int</span> x) &#123;<br>	<span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">return</span> x * _n(x - <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d! = %d&quot;</span>, n, _n(n));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">对于 _n(5)，我们拆分一下它自己调用自己的过程↓</span><br><span class="hljs-comment">_n(5)</span><br><span class="hljs-comment"> 5 * _n(4)</span><br><span class="hljs-comment">	 4 * _n(3)</span><br><span class="hljs-comment">		 3 * _n(2)</span><br><span class="hljs-comment">			 2 * _n(1)</span><br><span class="hljs-comment">				 1 * _n(0)</span><br><span class="hljs-comment">					 1</span><br><span class="hljs-comment">达到边界，返回值为：5*4*3*2*1*1的   结果   (是，结果，不是这个计算式)</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
<h2 id="define和const的区别">define和const的区别</h2>
<h3 id="define：">define：</h3>
<ul>
<li><code>define</code> 是一个预处理指令，通常在 C 和 C++ 这类编程语言中使用。</li>
<li>它用于定义编译时常量，这意味着在编译程序之前就将其值固定下来。</li>
<li><code>define</code> 通常用于创建符号常量（宏常量），例如：<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VALUE 100</span><br></code></pre></td></tr></table></figure>
</li>
<li>这样的定义会在编译时进行文本替换，将所有出现 <code>MAX_VALUE</code> 的地方替换为 <code>100</code>，<strong>没有变量类型或内存分配</strong>。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_VALUE 100</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> x = MAX_VALUE;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x的值是: %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这个示例中，<code>MAX_VALUE</code> 被定义为 <code>100</code>，并且在 <code>main</code> 函数中将其赋值给变量 <code>x</code>。当编译此代码时，预处理器会将 <code>MAX_VALUE</code> 替换为 <code>100</code>，因此在编译后的代码中，<code>int x = MAX_VALUE;</code> 实际上变成了 <code>int x = 100;</code>。这样，编译后的程序中不再存在 <code>MAX_VALUE</code> 符号，而是直接包含了 <code>100</code> 的值。</p>
<h3 id="const：">const：</h3>
<ul>
<li><code>const</code> 是一种变量修饰符，通常在多种编程语言中使用，包括 C++, C#, JavaScript 等。</li>
<li>它用于创建不可变的量，也就是常量。</li>
<li><code>const</code> 变量在运行时<strong>具有类型和内存分配</strong>，通常存储在内存中，但其值无法被修改。</li>
<li>例如，在 C++ 中：<figure class="highlight cpp"><table><tr><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_VALUE = <span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure>
</li>
<li>这样的定义创建了一个整数常量，不能在后续代码中修改 <code>MAX_VALUE</code> 的值。</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAX_VALUE = <span class="hljs-number">100</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> x = MAX_VALUE;<br>    <span class="hljs-comment">// 试图修改 MAX_VALUE，将导致编译错误</span><br>    <span class="hljs-comment">// MAX_VALUE = 200;</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x的值是: %d\n&quot;</span>, x);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>在这个示例中，<code>MAX_VALUE</code> 被定义为整数常量 <code>100</code>，并且在 <code>main</code> 函数中将其赋值给变量 <code>x</code>。</p>
<p>如果你尝试在后续代码中修改 <code>MAX_VALUE</code> 的值（例如，<code>MAX_VALUE = 200;</code>），编译器将报错，因为<code>MAX_VALUE</code> 被声明为<code>const</code>，这意味着它是不可修改的常量。</p>
<p>所以，使用<code>const</code>关键字可以确保变量的值在后续代码中不会被修改。</p>
<hr>
<p><strong><code>define</code> 和<code>const</code> 的主要区别在于：</strong></p>
<ul>
<li><strong><code>define</code> 用于创建编译时常量，没有变量类型和内存分配，只是文本替换。</strong></li>
<li><strong><code>const</code> 用于创建运行时常量，具有变量类型和内存分配，但其值无法被修改。</strong></li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>C语言神经网络房价预测系统</title>
    <url>/posts/29111.html</url>
    <content><![CDATA[<blockquote>
<p>爱来自ZZULI❤<a href="https://luoy-oss.github.io">drluo</a></p>
</blockquote>
<p><img src="/img/page/ZZULI.webp" alt=""></p>
<blockquote>
<p>用户给出的往期房价数据，默认为housing.data，数据文件每行含有14项，其中前13项为房价影响因素，最后一项为同类型房价中位数，如下表：</p>
<table>
<thead>
<tr>
<th><strong>属性名</strong></th>
<th><strong>解释</strong></th>
<th><strong>类型</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>CRIM</td>
<td>该镇的人均犯罪率</td>
<td>连续值</td>
</tr>
<tr>
<td>ZN</td>
<td>占地面积超过25平方米的住宅用地比例</td>
<td>连续值</td>
</tr>
<tr>
<td>INDUS</td>
<td>非零售商业用地比例</td>
<td>连续值</td>
</tr>
<tr>
<td>CHAS</td>
<td>是否临近ChariesRiver</td>
<td>离散值，1=邻近，0=不邻近</td>
</tr>
<tr>
<td>NOX</td>
<td>一氧化氮浓度</td>
<td>连续值</td>
</tr>
<tr>
<td>RM</td>
<td>每栋房屋的平均客房数</td>
<td>连续值</td>
</tr>
<tr>
<td>AGE</td>
<td>1940年之前建成的自用单位比例</td>
<td>连续值</td>
</tr>
<tr>
<td>DIS</td>
<td>到波士顿5个就业中心的加权距离</td>
<td>连续值</td>
</tr>
<tr>
<td>RAD</td>
<td>到径向公路的可达性指数</td>
<td>连续值</td>
</tr>
<tr>
<td>TAX</td>
<td>全值财产税率</td>
<td>连续值</td>
</tr>
<tr>
<td>PTRATIO</td>
<td>学生与教师的比例</td>
<td>连续值</td>
</tr>
<tr>
<td>B</td>
<td>1000(FM-0.63)^2,其中FM为外国人占比</td>
<td>连续值</td>
</tr>
<tr>
<td>LSTAT</td>
<td>低收入人群占比</td>
<td>连续值</td>
</tr>
<tr>
<td>MEDV</td>
<td>同类型房屋价格中位数</td>
<td>连续值</td>
</tr>
</tbody>
</table>
<p>(房价影响因素及房价表)</p>
<p>整个系统应基于所给往期数据训练出相应模型，使模型可以对今后的房价进行预测，预测准确率保持在99%-50%之间。</p>
<p>程序应有多个.c文件，每个.c实现不同功能，例如：数据分配、模型训练、模型预测质量检验、模型预测。</p>
<p>程序的函数声明位于不同.h文件内，但函数的具体实现位于.c文件中。</p>
</blockquote>
<p>github仓库（暂无）：</p>
<p><a href="">luoy-oss/ (github.com)</a></p>
<p>蓝奏云：</p>
<p><a href="https://drluo.lanzoul.com/iAzwR1cgmdaf">drluo.lanzoui.com</a></p>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
  </entry>
  <entry>
    <title>GMD09601-0.96OLED显示屏</title>
    <url>/posts/24495.html</url>
    <content><![CDATA[<h1>GMD09601-0.96OLED显示屏</h1>
<blockquote>
<p>驱动芯片：SSD1306</p>
<p>支持接口：SPI/IIC</p>
<p>分辨率：128*64</p>
</blockquote>
<h2 id="接口定义">接口定义</h2>
<ul>
<li>GND：电源地</li>
<li>VDD：电源正（3.3V ~ 5V）</li>
<li>SCK：时钟线</li>
<li>SDA：数据线</li>
<li>RES：复位线</li>
<li>DC：数据/命令</li>
<li>CS：片选</li>
</ul>
<h1>对于096 OLED屏幕接线</h1>
<h2 id="F207">F207</h2>
<blockquote>
<p>GND 电源地<br>
VCC 电源正（3.3～5V）<br>
D0(SCL) SCK管脚<br>
D1(SDA) MOSI管脚<br>
RES(RST) 用来复位（低电平复位）<br>
DC(D/C) 数据和命令控制管脚 1表示数据 0表示命令<br>
CS(NSS) 片选管脚</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">GND	-&gt;	GND<br>VCC	-&gt;	3V3<br>D0	-&gt;	PA5<br>D1	-&gt;	PA7<br>RES	-&gt;	PA4<br>DC	-&gt;	PA6<br>CS	-&gt;	NONE<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
  </entry>
  <entry>
    <title>Linux普通用户不能使用TAB键、上下键</title>
    <url>/posts/40823.html</url>
    <content><![CDATA[<h3 id="出发点">出发点</h3>
<blockquote>
<p>通过shell远程连接linux的时候发现tab键命令不能补全<br>
结合ubuntu,因默认ubuntu创建的普通帐号，默认shell为<code>/bin/sh</code>，而这不支持tab等键的，所以将「指定用户」帐号的shell改为<code>/bin/bash</code>就可以</p>
</blockquote>
<h3 id="操作">操作</h3>
<blockquote>
<p>1.查看当前的shell：<br>
<code># echo $SHELL</code><br>
<code>/bin/sh</code><br>
2.修改shell为<code>/bin/bash</code>：<br>
(切换到root用户执行) <code># usermod -s /bin/bash 用户名</code></p>
</blockquote>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>NOIonline</title>
    <url>/posts/34336.html</url>
    <content><![CDATA[<h2 id="愤怒的小-N（angry）-CCF-NOI-Online-能力测试-提高组-2021第一题">愤怒的小 N（angry）-	CCF NOI Online 能力测试 提高组 2021第一题</h2>
<p><strong>【题目描述】</strong><br>
极度愤怒的小 N 通关了一款游戏来泄愤。<br>
这款游戏共有 n 关，分别为第 0 关、第 1 关、第 2 关、···、第 n−1 关。这些关卡中有一些是普通关卡，另一些则是奖励关卡。 这款游戏中普通关卡与奖励关卡的分布比较特殊。如果用字符 a 表示普通关卡，用 字符 b 表示奖励关卡，那么第 0 关、第 1 关、第 2 关、···、第 n−1 关依次排列形成 的字符串是一个无穷字符串 s 的前缀，且 s 可以按照如下方式构造：</p>
<blockquote>
<ol>
<li>初始时 s 为包含单个字符 a 的字符串。</li>
<li>将 s 的每个字符 a 替换成字符 b，每个字符 b 替换成字符 a 得到字符串 t，然后 将 t 拼接到 s 后。</li>
<li>不断执行 2. 得到的字符串就是最终的 s。</li>
</ol>
</blockquote>
<p>可以发现 s = abbabaabbaababba···，所以这款游戏的第 0 关是普通关卡，第 1 关 是奖励关卡，第 2 关是奖励关卡，第 3 关是普通关卡，以此类推。 通过游戏的第 i 关可以得到 f(i) 分，其中 f(x) = a0 + a1x + a2x2 +···+ ak−1xk−1 是一个固定的 k−1 次多项式。 小 N 通关时一气之下通过了所有奖励关卡而忽略了所有普通关卡，然后就把游戏 卸载了。现在回想起来，他想要知道他在卸载游戏前的总得分对 10⁹ + 7 取模后的结果。<br>
<strong>【输入格式】</strong> 从文件 <a href="http://angry.in">angry.in</a> 中读入数据。 第一行一个正整数 n，表示游戏的关卡数目。为方便，n 以二进制表示给出。 第二行一个正整数 k，表示多项式的次数加一。 第三行 k 个非负整数，分别为 a0,a1,a2,…,ak−1，表示多项式的各项系数。<br>
<strong>【输出格式】</strong> 输出到文件 angry.out 中。 一行一个非负整数，表示小 N 卸载游戏前的总得分对 109 + 7 取模后的结果。<br>
<strong>【样例 1 输入】</strong><br>
1 1000 2 3 3 3 2 1<br>
<strong>【样例 1 输出】</strong><br>
1 110<br>
<strong>【样例 1 解释】</strong><br>
这款游戏共有 8 关，通关第 i 关可以得到 (3 + 2i + i2) 分。第 1,2,4,7 关为奖励关， 小 N 通过这几关分别得到了 6,11,27,66 分，共 110 分。<br>
<strong>【样例 2 输入】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">11111100101 <br>4<br>2 0 2 1<br></code></pre></td></tr></table></figure>
<p><strong>【样例 2 输出】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">143901603<br></code></pre></td></tr></table></figure>
<p><strong>【样例 3 输入】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1001011001101001 <br>16<br>1 0 0 1 0 1 1 0 0 1 1 0 1 0 0 1<br></code></pre></td></tr></table></figure>
<p><strong>【样例 3 输出】</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">184740992<br></code></pre></td></tr></table></figure>
<p><strong>【数据范围与提示】</strong> 对于所有测试点：0 ≤log₂n &lt; 5×10⁵，1 ≤ k ≤ 500，0 ≤ ai &lt; 10⁹ + 7，a的第k-1项≠ 0。</p>
<hr>
<h3 id="我的代码">我的代码</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RLL register long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LL long long</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VALUE 1000000007</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> x[<span class="hljs-number">512</span>],k;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getn</span><span class="hljs-params">(LL num)</span></span>&#123;<br>	<span class="hljs-keyword">return</span> (num)?<span class="hljs-number">1</span>+<span class="hljs-built_in">getn</span>(num/<span class="hljs-number">10</span>):<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">BtoD</span><span class="hljs-params">(LL num)</span></span>&#123;<br>	<span class="hljs-type">int</span> dec=<span class="hljs-number">0</span>,i=<span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span>(num)&#123;<br>		dec+=(num%<span class="hljs-number">10</span>)*(<span class="hljs-number">1</span>&lt;&lt;i++);<br>		num/=<span class="hljs-number">10</span>;<br>	&#125;<br>	<span class="hljs-keyword">return</span> dec;<br>&#125;<br><br><span class="hljs-comment">//这一一般的求幂（的模）</span><br><span class="hljs-function">LL <span class="hljs-title">normalExponentiation</span><span class="hljs-params">(<span class="hljs-type">int</span> base,<span class="hljs-type">int</span> power)</span></span>&#123;<br>    LL res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=power;i++)&#123;<br>        res*=base;<br>        res%=VALUE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res%VALUE;<br>&#125;<br><span class="hljs-comment">//老快了</span><br><span class="hljs-function">LL <span class="hljs-title">fastExponentiation</span><span class="hljs-params">(LL base,LL power)</span> </span>&#123;<br>    LL res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (power &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (power &amp; <span class="hljs-number">1</span>) &#123;<span class="hljs-comment">//此处等价于if(power%2==1)</span><br>            res = res * base % VALUE;<br>        &#125;<br>        power &gt;&gt;= <span class="hljs-number">1</span>;<span class="hljs-comment">//此处等价于power=power/2</span><br>        base = (base * base) % VALUE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function">LL <span class="hljs-title">getScore</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>&#123;<br>	<span class="hljs-comment">//第i个关卡</span><br>	LL res=<span class="hljs-number">0</span>,power;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=<span class="hljs-number">0</span>;l&lt;k;l++)&#123;<br>		power=x[l];<br>		<span class="hljs-keyword">if</span>(x[l])<br>			res+=<span class="hljs-built_in">fastExponentiation</span>(i,l);<span class="hljs-comment">//比normalExponentiation快了好多好多好多好多 </span><br>	&#125;<br>	<span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function">string <span class="hljs-title">mades</span><span class="hljs-params">(string s)</span></span>&#123;<br>	string news=s;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;s.<span class="hljs-built_in">size</span>();j++)<br>			news+=(s[j]==<span class="hljs-string">&#x27;a&#x27;</span>)?<span class="hljs-string">&quot;b&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>;<br>		s=news;<br>	&#125;<br>	<span class="hljs-keyword">return</span> news;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	LL num;<br>	cin&gt;&gt;num&gt;&gt;k;<br>	n=<span class="hljs-built_in">getn</span>(num);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)cin&gt;&gt;x[i];<br>	string s=<span class="hljs-built_in">mades</span>(<span class="hljs-string">&quot;a&quot;</span>);<br>	RLL ScoreSum=<span class="hljs-number">0</span>;<br>	<span class="hljs-type">int</span> max=<span class="hljs-built_in">BtoD</span>(num);<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;max;i++)<br>		<span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;b&#x27;</span>)&#123;<br>			ScoreSum+=<span class="hljs-built_in">getScore</span>(i);<br>		&#125;<br>	cout&lt;&lt;<span class="hljs-string">&quot;SUM:&quot;</span>&lt;&lt;ScoreSum%VALUE;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p><strong>这里的<em>fastExponentiation</em>其实有更好的方法，但是没从本子那边拿到（我自己也想不出来😥）</strong></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
  </entry>
  <entry>
    <title>Paddle环境搭建</title>
    <url>/posts/50624.html</url>
    <content><![CDATA[<blockquote>
<p><strong>此文章以python的搭建为例</strong></p>
</blockquote>
<hr>
<h1>一、安装Anaconda</h1>
<p><a href="https://www.anaconda.com/">https://www.anaconda.com</a></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/anaconda1.png" alt=""></p>
<p><strong>注意勾选All User</strong></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/anaconda1.png" alt=""></p>
<p>这里<strong>最好是勾选第一个选项</strong>，其目的是将anaconda添加到系统变量中，这样我们可以直接通过cmd调用conda，更加方便</p>
<p>然后你就可以使用anaconda来设置不同的环境</p>
<p>比如这里我们建一个专门用于Paddle的环境(控制台输入)</p>
<p><code>conda create -n PaddleDetection python==3.7</code>创建PaddleDetection环境，并要求其为python3.7版本</p>
<p><code>conda activate PaddleDetection</code>进入所创建的PaddleDetection环境中</p>
<p>![](/img/page/百度Paddle/conda activate.png)</p>
<p>当目录左侧有（xxxxx）显示时，就表明你已进入该环境，可以基于该环境进行操作，pip install  / pip uninstall的操作也只会影响该环境</p>
<p>注意：当左侧显示(base)时，这是默认环境</p>
<hr>
<h1>二、安装CUDA</h1>
<h2 id="你的显卡必须是NVDIA显卡！！！">你的显卡必须是NVDIA显卡！！！</h2>
<blockquote>
<p>你可以在<a href="https://developer.nvidia.com/%E6%89%BE%E5%88%B0CUDA%E7%9A%84%E4%B8%8B%E8%BD%BD">https://developer.nvidia.com/找到CUDA的下载</a></p>
<p>但是请注意<strong>30系列的显卡必须使用CUDA11.0以上的版本</strong>，百度Paddle支持的版本为：CUDA 11.7 11.6 11.2 10.2</p>
</blockquote>
<p>CUDA安装时，请注意该界面：</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/cuda.png" alt=""></p>
<p>对于其中的展开项，如果<strong>当前版本比新版本要高</strong>，<strong>不需要勾选</strong></p>
<p>当你完成的CUDA的安装，你还需要下载相应CUDA版本的cudnn，这样CUDA才能正常工作</p>
<p><a href="https://developer.nvidia.cn/rdp/cudnn-archive">cuDNN Archive | NVIDIA 开发者</a></p>
<p>将所下载的cudnn解压后的四个文件，复制到cuda的安装路径即可</p>
<p><strong>请注意cudnn和CUDA版本的对应关系</strong></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/cudnn.png" alt=""></p>
<p>当你完成了上述安装步骤后，可以在cmd中输入<code>nvcc -V</code>来检验CUDA是否安装成功</p>
<hr>
<h1>三、安装Paddle</h1>
<p><a href="https://www.paddlepaddle.org.cn/">飞桨PaddlePaddle-源于产业实践的开源深度学习平台</a></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/paddle.png" alt=""></p>
<p>复制所给命令运行即可**（最好是在我们第一步创建的PaddleDetection的独立环境中运行，这样可以保证环境之间的互不干扰）**</p>
<p>执行命令，等待安装</p>
<p>安装完成后，执行以下的Python代码，检查是否成功调用GPU资源</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paddle<br>paddle.utils.run_check()<br></code></pre></td></tr></table></figure>
<p>出现：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">PaddlePaddle works well on 1 GPU.<br>PaddlePaddle works well on 1 GPUs.<br>PaddlePaddle is installed successfully! Let&#x27;s start deep learning with PaddlePaddle now.<br></code></pre></td></tr></table></figure>
<p><strong>意味着你已经完成了以上所有环境的配置！</strong></p>
]]></content>
      <categories>
        <category>Paddle</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32GPIO八种输入输出模式</title>
    <url>/posts/36643.html</url>
    <content><![CDATA[<h2 id="STM32-GPIO"><strong>STM32</strong> GPIO</h2>
<p><img src="/img/page/stm32GPIO/gpio.png" alt="img"></p>
<h2 id="1-GPIO-MODE-AIN-模拟输入">1. GPIO_MODE_AIN 模拟输入</h2>
<p>输入信号不经施密特触发器直接接入，<strong>输入信号为模拟量</strong>而非数字量，其余输入方式输入数字量。</p>
<h2 id="2-GPIO-MODE-IN-FLOATING-浮空输入">2. GPIO_MODE_IN_FLOATING 浮空输入</h2>
<p>输入信号经过施密特触发器接入输入数据存储器。<strong>当无信号输入时，电压不确定</strong>。因为浮空输入既<strong>高阻输入</strong>，可以认为输入端口阻抗无穷大，这样可以检测到微弱的信号。（相当于电压表测电压，如果电压表内阻不够大而外部阻抗比较大，则电压表分压会比较小）。此时输入高电平即高电平，输入低电平即低电平。但是外界没有输入时输入电平却容易受到外界电磁以及各种玄学干扰的影响。如按键采用浮空输入，则在按键按下时输入电平为低，但是当松开按键时输入端口悬空，外界有微弱的干扰都会被端口检测到。此时端口可能高，也可能低。</p>
<h2 id="3-GPIO-MODE-IPD-下拉输入">3. GPIO_MODE_IPD 下拉输入</h2>
<p>浮空输入在外界没有输入时状态不确定，可能对电路造成干扰。为了使得电路更加稳定，不出现没有输入时端口的输入数据被干扰 （比如手碰一下电压就发生变化）。这时就需要下拉电阻（或上拉电阻）,此电阻与端口输入阻抗相比仍然较小。有输入信号时端口读取输入信号，<strong>无输入信号时端口电平被拉到低电平（高电平）</strong>。</p>
<h2 id="4-GPIO-MODE-IPU-上拉输入">4. GPIO_MODE_IPU 上拉输入</h2>
<p>上拉输入与下拉输入类似，只是<strong>无输入信号时端口电平被拉到高电平</strong>。例如按键信号，当按下时输入低电平，松开时电平被拉到高电平。这样就不会出现按键松开时端口电平不确定的情况。即不知道时按下还是松开。</p>
<h2 id="5-GPIO-MODE-OUT-OD-开漏输出">5. GPIO-MODE_OUT_OD 开漏输出</h2>
<p><img src="/img/page/stm32GPIO/od.png" alt="img"></p>
<p>开漏输出即<strong>漏极开路输出</strong>。这种输出方式指场效应管漏极开路输出。<strong>需要接上拉电阻才能输出1</strong>。漏极经上拉电阻接到电源，栅极输出0时，场效应管截止（阻抗无线大），电压被分到场效应管上，此时输出为1。当栅极输出1时，场效应管导通，输出端口相当于接地，此时输出0。开漏输出高电平时是由外接电源输出的，因此可以实现高于输出端口电压的输出。可以实现电平的转换。<strong>开漏输出可以实现线与功能</strong>，方法是多个输出共接一个上拉电阻。但是漏极开路输出<strong>上升沿慢</strong>，因为上升沿是外接电源对上拉电阻以及外接负载充电。当上拉电阻较大或者负载容性较大时时间常数较大，充电较慢。<strong>需要较快反映时可以采用下降沿触发</strong>，此时没有电阻接入，电路的时间常数较小，充电较快。</p>
<h2 id="6-GPIO-MODE-OUT-PP-推挽输出">6. GPIO_MODE_OUT_PP 推挽输出</h2>
<p><img src="/img/page/stm32GPIO/pp.png" alt="img"></p>
<p><strong>推挽输出既可以输出1，又可以输出0</strong>。但是无法调节输出电压，因为输出高低电平均为三极管输入端电压，此电压在由芯片内部供电，无法改变。推挽输出任意时刻只有一路工作。上图为输出高电平时电路工作状态。只有三极管导通电阻，无外接电阻。因此推挽输出<strong>损耗小、速度快</strong>。</p>
<h2 id="7-GPIO-MODE-AF-OD-复用开漏输出">7. GPIO_MODE_AF_OD 复用开漏输出</h2>
<p>STM32单片机内部有其他的外设，比如定时器、DAC等。复用开漏输出与普通开漏输出区别在于，开漏输出输出的是输出数据寄存器中的数据，<strong>复用开漏输出输出的是来自外设的数据</strong>。</p>
<h2 id="8-GOIO-MODE-AF-PP-复用推挽输出">8. GOIO_MODE_AF_PP 复用推挽输出</h2>
<p><strong>复用推挽输出原理与复用开漏输出原理相同</strong></p>
<p>文章转载自知乎<a href="https://zhuanlan.zhihu.com/p/113367004">STM32 GPIO八种输入输出模式 - 知乎 (zhihu.com)</a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
  </entry>
  <entry>
    <title>Predict.py的编写</title>
    <url>/posts/2410.html</url>
    <content><![CDATA[<blockquote>
<p>你需要注意的是：</p>
<p>​	<strong>此文章仅为ChatGpt的回答，是本人用于理解paddle相应模块而CV过来的，并不一定具有实际效益</strong></p>
</blockquote>
<h1><a href="http://xn--Predict-4t3k545bpj8fjthnm9b.py">一种可行的Predict.py</a></h1>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">from</span> paddle.vision.transforms <span class="hljs-keyword">import</span> Compose, Normalize<br><span class="hljs-keyword">from</span> paddledet.utils.logger <span class="hljs-keyword">import</span> setup_logger<br><span class="hljs-keyword">from</span> paddledet.models.detectors <span class="hljs-keyword">import</span> YOLOv3<br><span class="hljs-keyword">from</span> paddledet.datasets.builder <span class="hljs-keyword">import</span> build_dataset<br><span class="hljs-keyword">from</span> paddledet.config <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> paddledet.core.workspace <span class="hljs-keyword">import</span> load_config, create<br><span class="hljs-keyword">from</span> paddledet.utils.visualizer <span class="hljs-keyword">import</span> draw_boxes<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_args</span>():<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;PaddleDetection model inference&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--model_dir&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;./output/yolov3_darknet53_270e_coco&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Model directory path&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--image_path&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;./test.jpg&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Path of the input image&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--score_thresh&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>, default=<span class="hljs-number">0.5</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Threshold of the score&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--output_dir&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;./output&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Output directory path&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--use_gpu&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bool</span>, default=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Use GPU or not&#x27;</span>)<br>    args = parser.parse_args()<br>    <span class="hljs-keyword">return</span> args<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    args = parse_args()<br><br>    <span class="hljs-comment"># 加载配置文件</span><br>    cfg_file = os.path.join(args.model_dir, <span class="hljs-string">&#x27;pp-yolo.yaml&#x27;</span>)<br>    cfg = load_config(cfg_file)<br><br>    <span class="hljs-comment"># 创建数据集</span><br>    dataset = build_dataset(cfg.data.test)<br><br>    <span class="hljs-comment"># 创建模型</span><br>    model = YOLOv3(<br>        num_classes=<span class="hljs-built_in">len</span>(dataset.class_names),<br>        backbone=cfg.model.backbone,<br>        neck=cfg.model.neck,<br>        head=cfg.model.head,<br>        train_cfg=cfg.train_cfg,<br>        test_cfg=cfg.test_cfg)<br><br>    <span class="hljs-comment"># 加载模型权重</span><br>    model_state_dict = paddle.load(os.path.join(args.model_dir, <span class="hljs-string">&#x27;model.pdparams&#x27;</span>))<br>    model.set_state_dict(model_state_dict)<br><br>    <span class="hljs-keyword">if</span> args.use_gpu:<br>        paddle.set_device(<span class="hljs-string">&#x27;gpu&#x27;</span>)<br>        model.cuda()<br>    <span class="hljs-keyword">else</span>:<br>        paddle.set_device(<span class="hljs-string">&#x27;cpu&#x27;</span>)<br><br>    <span class="hljs-comment"># 预处理图像</span><br>    transforms = Compose([<br>        Normalize(<br>            mean=cfg.img_mean, std=cfg.img_std, to_rgb=<span class="hljs-literal">True</span>),<br>    ])<br>    img = cv2.imread(args.image_path)<br>    inputs = transforms(img)<br>    inputs = np.expand_dims(inputs, axis=<span class="hljs-number">0</span>)<br><br>    <span class="hljs-comment"># 进行预测</span><br>    model.<span class="hljs-built_in">eval</span>()<br>    <span class="hljs-keyword">with</span> paddle.no_grad():<br>        outputs = model.forward(inputs)<br><br>    <span class="hljs-comment"># 处理预测结果</span><br>    bboxes = paddle.fluid.layers.multiclass_nms(<br>        outputs[<span class="hljs-number">0</span>],<br>        outputs[<span class="hljs-number">1</span>],<br>        score_threshold=args.score_thresh,<br>        nms_top_k=<span class="hljs-number">400</span>,<br>        keep_top_k=<span class="hljs-number">100</span>,<br>        nms_threshold=<span class="hljs-number">0.45</span>,<br>        background_label=-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 可视化预测结果</span><br>    out_img = draw_boxes(img, bboxes, dataset.class_names)<br>    cv2.imwrite(os.path.join(args.output_dir, <span class="hljs-string">&#x27;out.jpg&#x27;</span>), out_img)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure>
<p>下方为解析</p>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> argparse<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">from</span> paddle.vision.transforms <span class="hljs-keyword">import</span> Compose, Normalize<br><span class="hljs-keyword">from</span> paddledet.utils.logger <span class="hljs-keyword">import</span> setup_logger<br><span class="hljs-keyword">from</span> paddledet.models.detectors <span class="hljs-keyword">import</span> YOLOv3<br><span class="hljs-keyword">from</span> paddledet.datasets.builder <span class="hljs-keyword">import</span> build_dataset<br><span class="hljs-keyword">from</span> paddledet.config <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> paddledet.core.workspace <span class="hljs-keyword">import</span> load_config, create<br><span class="hljs-keyword">from</span> paddledet.utils.visualizer <span class="hljs-keyword">import</span> draw_boxes<br><br><span class="hljs-comment"># !!!!</span><br><span class="hljs-comment"># 从 PaddleDetection 2.2 开始，paddledet.utils.logger 模块已经被移除</span><br></code></pre></td></tr></table></figure>
<ul>
<li><code>argparse</code>：Python标准库，用于解析命令行参数</li>
<li><code>os</code>：Python标准库，提供了访问操作系统功能的接口</li>
<li><code>cv2</code>：OpenCV库，提供了图像处理和计算机视觉的函数</li>
<li><code>numpy</code>：Python第三方库，提供了支持多维数组和矩阵运算的函数</li>
<li><code>paddle</code>：PaddlePaddle深度学习框架</li>
<li><code>Compose</code>、<code>Normalize</code>：PaddlePaddle的图像预处理函数</li>
<li><code>setup_logger</code>：PaddleDetection的日志函数</li>
<li><code>YOLOv3</code>：PaddleDetection中的YOLOv3目标检测器</li>
<li><code>build_dataset</code>：PaddleDetection中的数据集构建函数</li>
<li><code>Config</code>：PaddleDetection的配置类</li>
<li><code>load_config</code>：PaddleDetection的配置加载函数</li>
<li><code>create</code>：PaddleDetection的模型创建函数</li>
<li><code>draw_boxes</code>：PaddleDetection的可视化函数</li>
</ul>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_args</span>():<br>    parser = argparse.ArgumentParser(description=<span class="hljs-string">&#x27;PaddleDetection model inference&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--model_dir&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;./output/yolov3_darknet53_270e_coco&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Model directory path&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--image_path&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;./test.jpg&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Path of the input image&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--score_thresh&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">float</span>, default=<span class="hljs-number">0.5</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Threshold of the score&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--output_dir&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">str</span>, default=<span class="hljs-string">&#x27;./output&#x27;</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Output directory path&#x27;</span>)<br>    parser.add_argument(<span class="hljs-string">&#x27;--use_gpu&#x27;</span>, <span class="hljs-built_in">type</span>=<span class="hljs-built_in">bool</span>, default=<span class="hljs-literal">True</span>, <span class="hljs-built_in">help</span>=<span class="hljs-string">&#x27;Use GPU or not&#x27;</span>)<br>    args = parser.parse_args()<br>    <span class="hljs-keyword">return</span> args<br></code></pre></td></tr></table></figure>
<ul>
<li><code>parse_args()</code>：解析命令行参数的函数</li>
<li><code>parser</code>：命令行参数解析器</li>
<li><code>parser.add_argument()</code>：添加命令行参数</li>
<li><code>--model_dir</code>：模型目录路径参数</li>
<li><code>--image_path</code>：输入图像路径参数</li>
<li><code>--score_thresh</code>：分数阈值参数</li>
<li><code>--output_dir</code>：输出目录路径参数</li>
<li><code>--use_gpu</code>：是否使用GPU参数</li>
<li><code>args = parser.parse_args()</code>：解析命令行参数并返回参数对象</li>
</ul>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    args = parse_args()<br><br>    <span class="hljs-comment"># 加载配置文件</span><br>    cfg_file = os.path.join(args.model_dir, <span class="hljs-string">&#x27;pp-yolo.yaml&#x27;</span>)<br>    cfg = load_config(cfg_file)<br><br>    <span class="hljs-comment"># 创建数据集</span><br>    dataset = build_dataset(cfg.data.test)<br><br>    <span class="hljs-comment"># 创建模型</span><br>    model = YOLOv3(<br>        num_classes=<span class="hljs-built_in">len</span>(dataset.class_names),<br>        backbone=cfg.model.backbone,<br>        neck=cfg.model.neck,<br>        head=cfg.model.head,<br>        train_cfg=cfg.train_cfg,<br>        test_cfg<br></code></pre></td></tr></table></figure>
<ul>
<li><code>num_classes=len(dataset.class_names)</code>：目标检测任务的类别数，等于数据集类别数</li>
<li><code>backbone=cfg.model.backbone</code>：模型骨干网络</li>
<li><code>neck=cfg.model.neck</code>：模型neck部分</li>
<li><code>head=cfg.model.head</code>：模型头部</li>
<li><code>train_cfg=cfg.train_cfg</code>：训练配置</li>
<li><code>test_cfg=cfg.test_cfg</code>：测试配置</li>
<li><code>model.prepare()</code>：准备模型</li>
</ul>
<hr>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 加载模型参数</span><br>model_path = os.path.join(args.model_dir, <span class="hljs-string">&#x27;yolov3_darknet53_270e_coco.pdparams&#x27;</span>)<br><span class="hljs-keyword">assert</span> os.path.exists(model_path), <span class="hljs-string">&quot;model file &#123;&#125; does not exist&quot;</span>.<span class="hljs-built_in">format</span>(model_path)<br>model.load(model_path)<br><br><span class="hljs-comment"># 设置计算设备</span><br>device = <span class="hljs-string">&#x27;gpu&#x27;</span> <span class="hljs-keyword">if</span> args.use_gpu <span class="hljs-keyword">else</span> <span class="hljs-string">&#x27;cpu&#x27;</span><br>paddle.set_device(device)<br><br><span class="hljs-comment"># 图像预处理</span><br>transform = Compose([Normalize(mean=cfg.img_norm_cfg.mean, std=cfg.img_norm_cfg.std, to_rgb=<span class="hljs-literal">True</span>)])<br><br><span class="hljs-comment"># 读取图像</span><br>image_path = args.image_path<br><span class="hljs-keyword">assert</span> os.path.exists(image_path), <span class="hljs-string">&quot;Image file &#123;&#125; does not exist&quot;</span>.<span class="hljs-built_in">format</span>(image_path)<br>image = cv2.imread(image_path)<br><br><span class="hljs-comment"># 图像预处理</span><br>data = transform(image)<br>data = np.expand_dims(data, axis=<span class="hljs-number">0</span>)<br><br><span class="hljs-comment"># 将数据转为Tensor</span><br>inputs = paddle.to_tensor(data)<br><br><span class="hljs-comment"># 进行模型预测</span><br>outputs = model(inputs)<br><br><span class="hljs-comment"># 解析预测结果</span><br>bboxes = paddle.split(outputs[<span class="hljs-string">&#x27;bbox&#x27;</span>], <span class="hljs-number">2</span>, axis=-<span class="hljs-number">1</span>)<br>scores = outputs[<span class="hljs-string">&#x27;score&#x27;</span>]<br>labels = outputs[<span class="hljs-string">&#x27;cid&#x27;</span>]<br><br><span class="hljs-comment"># 可视化预测结果</span><br>im = draw_boxes(image, bboxes, scores, labels, dataset.class_names, score_thresh=args.score_thresh)<br>cv2.imwrite(os.path.join(args.output_dir, <span class="hljs-string">&#x27;output.jpg&#x27;</span>), im)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Predict success!&quot;</span>)<br></code></pre></td></tr></table></figure>
<ul>
<li>
<p><code>model_path = os.path.join(args.model_dir, 'yolov3_darknet53_270e_coco.pdparams')</code>：模型参数文件路径</p>
</li>
<li>
<p><code>assert os.path.exists(model_path), &quot;model file &#123;&#125; does not exist&quot;.format(model_path)</code>：判断模型文件是否存在</p>
</li>
<li>
<p><code>model.load(model_path)</code>：加载模型参数</p>
</li>
<li>
<p><code>device = 'gpu' if args.use_gpu else 'cpu'</code>：设置计算设备</p>
</li>
<li>
<p><code>paddle.set_device(device)</code>：设置PaddlePaddle计算设备</p>
</li>
<li>
<p><code>transform = Compose([Normalize(mean=cfg.img_norm_cfg.mean, std=cfg.img_norm_cfg.std, to_rgb=True)])</code>：<strong>图像预处理</strong>，包括归一化</p>
</li>
<li>
<p><code>image = cv2.imread(image_path)</code>：读取输入图像</p>
</li>
<li>
<p><code>data = transform(image)</code>：对图像进行预处理</p>
</li>
<li>
<p><code>data = np.expand_dims(data, axis=0)</code>：<strong>将数据维度扩展为四维，与模型输入要求一致</strong></p>
</li>
<li>
<p><code>inputs = paddle.to_tensor(data)</code>：将数据转为Tensor</p>
</li>
<li>
<p><code>outputs = model(inputs)</code>：<strong>进行模型预测，得到输出结果</strong></p>
</li>
<li>
<p><code>bboxes = paddle.split(outputs['bbox'], 2, axis=-1)</code>：解析预测结果中的边界框</p>
</li>
<li>
<p><code>scores = outputs['score']</code>：<strong>解析预测结果中的目标得分</strong></p>
</li>
<li>
<p><code>labels = outputs['cid']</code>：解析预测结果中的类别标签</p>
</li>
<li>
<p><code>im = draw_boxes(image, bboxes, scores, labels, dataset.class_names, score_thresh=args.score_thresh)</code>：根据解析得到的预测结果，绘制目标框并可视化预测结果</p>
</li>
<li>
<p><code>cv2.imwrite(os.path.join(args.output_dir, 'output.jpg'), im)</code>：将可视化结果保存到输出目录</p>
</li>
<li>
<p><code>print(&quot;Predict success!&quot;)</code>：输出预测成功的提示信息</p>
</li>
</ul>
<hr>
<h1><a href="http://xn--Predict-4t3kl25bvcx289bkiio82c.py">另一种可行的Predict.py</a></h1>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&#x27;PaddleDetection&#x27;</span>)<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">import</span> multiprocessing<br><br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-comment"># import paddleseg.transforms as T</span><br><span class="hljs-keyword">from</span> paddle.inference <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> paddle.inference <span class="hljs-keyword">import</span> create_predictor<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><span class="hljs-keyword">from</span> deploy.python.preprocess <span class="hljs-keyword">import</span> preprocess,Resize, NormalizeImage, Permute, PadStride<br><span class="hljs-keyword">from</span> deploy.python.utils <span class="hljs-keyword">import</span> argsparser, Timer, get_current_memory_mb<br><br><span class="hljs-comment">#id_class_map</span><br>LABEL_MAP = &#123;<br>    <span class="hljs-string">&quot;0&quot;</span>: <span class="hljs-string">&quot;bump&quot;</span>,<br>    <span class="hljs-string">&quot;1&quot;</span>: <span class="hljs-string">&quot;granary&quot;</span>,<br>    <span class="hljs-string">&quot;2&quot;</span>: <span class="hljs-string">&quot;CrossWalk&quot;</span>,<br>    <span class="hljs-string">&quot;3&quot;</span>: <span class="hljs-string">&quot;cone&quot;</span>,<br>    <span class="hljs-string">&quot;4&quot;</span>: <span class="hljs-string">&quot;bridge&quot;</span>,<br>    <span class="hljs-string">&quot;5&quot;</span>: <span class="hljs-string">&quot;pig&quot;</span>,<br>    <span class="hljs-string">&quot;6&quot;</span>: <span class="hljs-string">&quot;tractor&quot;</span>,<br>    <span class="hljs-string">&quot;7&quot;</span>: <span class="hljs-string">&quot;corn&quot;</span>,<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">PredictConfig</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model_dir</span>):<br>        <span class="hljs-comment"># parsing Yaml config for Preprocess</span><br>        deploy_file = os.path.join(model_dir, <span class="hljs-string">&#x27;infer_cfg.yml&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(deploy_file) <span class="hljs-keyword">as</span> f:<br>            yml_conf = yaml.safe_load(f)<br>        self.arch = yml_conf[<span class="hljs-string">&#x27;arch&#x27;</span>]<br>        self.preprocess_infos = yml_conf[<span class="hljs-string">&#x27;Preprocess&#x27;</span>]<br>        self.min_subgraph_size = yml_conf[<span class="hljs-string">&#x27;min_subgraph_size&#x27;</span>]<br>        self.labels = yml_conf[<span class="hljs-string">&#x27;label_list&#x27;</span>]<br>    <span class="hljs-comment">#     self.print_config()</span><br><br>    <span class="hljs-comment"># def print_config(self):</span><br>    <span class="hljs-comment">#     print(&#x27;%s: %s&#x27; % (&#x27;Model Arch&#x27;, self.arch))</span><br>    <span class="hljs-comment">#     for op_info in self.preprocess_infos:</span><br>    <span class="hljs-comment">#         print(&#x27;--%s: %s&#x27; % (&#x27;transform op&#x27;, op_info[&#x27;type&#x27;]))</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_test_images</span>(<span class="hljs-params">infer_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(infer_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        dirs = f.readlines()<br>    images = []<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>        images.append(<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">repr</span>(<span class="hljs-built_in">dir</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>))<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(images) &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;no image found in &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(infer_file)<br>    <span class="hljs-keyword">return</span> images<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_predictor</span>(<span class="hljs-params">model_dir</span>):<br>    config = Config(<br>        os.path.join(model_dir, <span class="hljs-string">&#x27;model.pdmodel&#x27;</span>),<br>        os.path.join(model_dir, <span class="hljs-string">&#x27;model.pdiparams&#x27;</span>))<br>    <span class="hljs-comment"># initial GPU memory(M), device ID</span><br>    config.enable_use_gpu(<span class="hljs-number">3000</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># optimize graph and fuse op</span><br>    config.switch_ir_optim(<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># disable print log when predict</span><br>    config.disable_glog_info()<br>    <span class="hljs-comment"># enable shared memory</span><br>    config.enable_memory_optim()<br>    <span class="hljs-comment"># disable feed, fetch OP, needed by zero_copy_run</span><br>    config.switch_use_feed_fetch_ops(<span class="hljs-literal">False</span>)<br>    predictor = create_predictor(config)<br>    <span class="hljs-keyword">return</span> predictor, config<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">create_inputs</span>(<span class="hljs-params">imgs, im_info</span>):<br>    inputs = &#123;&#125;<br><br>    im_shape = []<br>    scale_factor = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(imgs) == <span class="hljs-number">1</span>:<br>        inputs[<span class="hljs-string">&#x27;image&#x27;</span>] = np.array((imgs[<span class="hljs-number">0</span>], )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        inputs[<span class="hljs-string">&#x27;im_shape&#x27;</span>] = np.array(<br>            (im_info[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;im_shape&#x27;</span>], )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        inputs[<span class="hljs-string">&#x27;scale_factor&#x27;</span>] = np.array(<br>            (im_info[<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;scale_factor&#x27;</span>], )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>)<br>        <span class="hljs-keyword">return</span> inputs<br><br>    <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> im_info:<br>        im_shape.append(np.array((e[<span class="hljs-string">&#x27;im_shape&#x27;</span>], )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>))<br>        scale_factor.append(np.array((e[<span class="hljs-string">&#x27;scale_factor&#x27;</span>], )).astype(<span class="hljs-string">&#x27;float32&#x27;</span>))<br><br>    inputs[<span class="hljs-string">&#x27;im_shape&#x27;</span>] = np.concatenate(im_shape, axis=<span class="hljs-number">0</span>)<br>    inputs[<span class="hljs-string">&#x27;scale_factor&#x27;</span>] = np.concatenate(scale_factor, axis=<span class="hljs-number">0</span>)<br><br>    imgs_shape = [[e.shape[<span class="hljs-number">1</span>], e.shape[<span class="hljs-number">2</span>]] <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> imgs]<br>    max_shape_h = <span class="hljs-built_in">max</span>([e[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> imgs_shape])<br>    max_shape_w = <span class="hljs-built_in">max</span>([e[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> imgs_shape])<br>    padding_imgs = []<br>    <span class="hljs-keyword">for</span> img <span class="hljs-keyword">in</span> imgs:<br>        im_c, im_h, im_w = img.shape[:]<br>        padding_im = np.zeros(<br>            (im_c, max_shape_h, max_shape_w), dtype=np.float32)<br>        padding_im[:, :im_h, :im_w] = img<br>        padding_imgs.append(padding_im)<br>    inputs[<span class="hljs-string">&#x27;image&#x27;</span>] = np.stack(padding_imgs, axis=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> inputs<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Detector</span>(<span class="hljs-title class_ inherited__">object</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,</span><br><span class="hljs-params">                 pred_config,</span><br><span class="hljs-params">                 model_dir</span>):<br>        self.pred_config = pred_config<br>        self.predictor, self.config = load_predictor(model_dir)<br>        self.preprocess_ops = self.get_ops()<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ops</span>(<span class="hljs-params">self</span>):<br>        preprocess_ops = []<br>        <span class="hljs-keyword">for</span> op_info <span class="hljs-keyword">in</span> self.pred_config.preprocess_infos:<br>            new_op_info = op_info.copy()<br>            op_type = new_op_info.pop(<span class="hljs-string">&#x27;type&#x27;</span>)<br>            preprocess_ops.append(<span class="hljs-built_in">eval</span>(op_type)(**new_op_info))<br>        <span class="hljs-keyword">return</span> preprocess_ops<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, inputs</span>):<br>        <span class="hljs-comment"># preprocess</span><br>        input_names = self.predictor.get_input_names()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(input_names)):<br>            input_tensor = self.predictor.get_input_handle(input_names[i])<br>            input_tensor.copy_from_cpu(inputs[input_names[i]])<br><br>        <span class="hljs-comment"># model prediction</span><br>        self.predictor.run()<br>        output_names = self.predictor.get_output_names()<br>        boxes_tensor = self.predictor.get_output_handle(output_names[<span class="hljs-number">0</span>])<br>        np_boxes = boxes_tensor.copy_to_cpu()<br>        boxes_num = self.predictor.get_output_handle(output_names[<span class="hljs-number">1</span>])<br>        np_boxes_num = boxes_num.copy_to_cpu()<br><br>        <span class="hljs-comment"># postprocess</span><br>        results = []<br>        <span class="hljs-keyword">if</span> reduce(<span class="hljs-keyword">lambda</span> x, y: x * y, np_boxes.shape) &lt; <span class="hljs-number">6</span>:<br>            results = &#123;<span class="hljs-string">&#x27;boxes&#x27;</span>: np.zeros([]), <span class="hljs-string">&#x27;boxes_num&#x27;</span>: [<span class="hljs-number">0</span>]&#125;<br>        <span class="hljs-keyword">else</span>:<br>            results = &#123;<span class="hljs-string">&#x27;boxes&#x27;</span>: np_boxes, <span class="hljs-string">&#x27;boxes_num&#x27;</span>: np_boxes_num&#125;<br>        <span class="hljs-keyword">return</span> results<br><br><span class="hljs-comment"># 将原preprocess的两个参数转为一个参数para</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">my_preprocess</span>(<span class="hljs-params">para</span>):<br>    im_path, preprocess_ops = para<br>    im, im_info = preprocess(im_path, preprocess_ops)<br>    <span class="hljs-keyword">return</span> im, im_info<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict_image</span>(<span class="hljs-params">detector, image_list, result_path</span>):<br>    c_results = &#123;<span class="hljs-string">&quot;result&quot;</span>: []&#125;<br>    <span class="hljs-comment"># 不同目标设定不同输出阈值</span><br>    multiclass_thres = [<span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>, <span class="hljs-number">0.49</span>]<br>    num_worker = <span class="hljs-number">4</span><br>    <span class="hljs-comment"># processes这个参数可以不设置，如果不设置函数会跟根据计算机的实际情况来决定要运行多少个进程</span><br>    pool = ThreadPool(processes=num_worker)<span class="hljs-comment"># 多线程处理输入图像，预处理速度快一些</span><br>    img_length = <span class="hljs-built_in">len</span>(image_list)<br>    <span class="hljs-comment"># 根据评估数据自行调整每次多线程处理的样本数量, len(image_list) &gt;= img_iter_filter</span><br>    img_iter_filter = <span class="hljs-number">10</span><br>    img_iter_range = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(img_length//img_iter_filter))<br>    <span class="hljs-keyword">for</span> start_index <span class="hljs-keyword">in</span> img_iter_range:<br>        <span class="hljs-keyword">if</span> start_index == img_iter_range[-<span class="hljs-number">1</span>]:<br>            im_paths = image_list[start_index*img_iter_filter:]<br>        <span class="hljs-keyword">else</span>:<br>            im_paths = image_list[start_index*img_iter_filter:(start_index+<span class="hljs-number">1</span>)*img_iter_filter]<br>        image_ids = [<span class="hljs-built_in">int</span>(os.path.basename(im_p).split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> im_p <span class="hljs-keyword">in</span> im_paths]<br>        para = [[i,detector.preprocess_ops] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> im_paths]<br>        imandinfos = pool.<span class="hljs-built_in">map</span>(my_preprocess, para)<br>        <span class="hljs-comment"># print(&#x27;imandinfos&#x27;,imandinfos)</span><br>        <span class="hljs-keyword">for</span> idx, imandinfo <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(imandinfos):<br>            <span class="hljs-comment"># 检测模型图像预处理</span><br>            image_id = image_ids[idx]<br>            inputs = create_inputs([imandinfo[<span class="hljs-number">0</span>]], [imandinfo[<span class="hljs-number">1</span>]])<br><br>            <span class="hljs-comment"># 检测模型预测结果</span><br>            det_results = detector.predict(inputs)<br>            <span class="hljs-comment"># 检测模型写结果</span><br>            im_bboxes_num = det_results[<span class="hljs-string">&#x27;boxes_num&#x27;</span>][<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">if</span> im_bboxes_num &gt; <span class="hljs-number">0</span>:<br>                bbox_results = det_results[<span class="hljs-string">&#x27;boxes&#x27;</span>][<span class="hljs-number">0</span>:im_bboxes_num, <span class="hljs-number">2</span>:]<br>                id_results = det_results[<span class="hljs-string">&#x27;boxes&#x27;</span>][<span class="hljs-number">0</span>:im_bboxes_num, <span class="hljs-number">0</span>]<br>                score_results = det_results[<span class="hljs-string">&#x27;boxes&#x27;</span>][<span class="hljs-number">0</span>:im_bboxes_num, <span class="hljs-number">1</span>]<br>                <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(im_bboxes_num):<br>                    <span class="hljs-keyword">if</span> <span class="hljs-built_in">float</span>(score_results[idx]) &gt;= multiclass_thres[<span class="hljs-built_in">int</span>(id_results[idx])]:<br>                        c_results[<span class="hljs-string">&quot;result&quot;</span>].append(&#123;<span class="hljs-string">&quot;image_id&quot;</span>: image_id,<br>                                                    <span class="hljs-string">&quot;type&quot;</span>: LABEL_MAP[<span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(id_results[idx]))],<br>                                                    <span class="hljs-string">&quot;x&quot;</span>: <span class="hljs-built_in">float</span>(bbox_results[idx][<span class="hljs-number">0</span>]),<br>                                                    <span class="hljs-string">&quot;y&quot;</span>: <span class="hljs-built_in">float</span>(bbox_results[idx][<span class="hljs-number">1</span>]),<br>                                                    <span class="hljs-string">&quot;width&quot;</span>: <span class="hljs-built_in">float</span>(bbox_results[idx][<span class="hljs-number">2</span>]) - <span class="hljs-built_in">float</span>(bbox_results[idx][<span class="hljs-number">0</span>]),<br>                                                    <span class="hljs-string">&quot;height&quot;</span>: <span class="hljs-built_in">float</span>(bbox_results[idx][<span class="hljs-number">3</span>]) - <span class="hljs-built_in">float</span>(bbox_results[idx][<span class="hljs-number">1</span>]),<br>                                                    <span class="hljs-string">&quot;segmentation&quot;</span>: []&#125;)<br><br>    <span class="hljs-comment"># 写文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(result_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> ft:<br>        json.dump(c_results, ft)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">infer_txt, result_path, det_model_path</span>):<br>    pred_config = PredictConfig(det_model_path)<br>    detector = Detector(pred_config, det_model_path)<br><br>    <span class="hljs-comment"># predict from image</span><br>    img_list = get_test_images(infer_txt)<br>    predict_image(detector, img_list, result_path)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;start…&#x27;</span>)<br>    start_time = time.time()<br>    det_model_path = <span class="hljs-string">&quot;model/&quot;</span><br><br>    paddle.enable_static()<br>    infer_txt = sys.argv[<span class="hljs-number">1</span>]<br>    result_path = sys.argv[<span class="hljs-number">2</span>]<br>    main(infer_txt, result_path, det_model_path)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;total time:&#x27;</span>, time.time() - start_time)<br></code></pre></td></tr></table></figure>
<p>加载所需的Python库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> codecs<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br>sys.path.append(<span class="hljs-string">&#x27;PaddleDetection&#x27;</span>)<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> yaml<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> reduce<br><span class="hljs-keyword">import</span> multiprocessing<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> paddle<br><span class="hljs-keyword">from</span> paddle.inference <span class="hljs-keyword">import</span> Config<br><span class="hljs-keyword">from</span> paddle.inference <span class="hljs-keyword">import</span> create_predictor<br><span class="hljs-keyword">from</span> multiprocessing.dummy <span class="hljs-keyword">import</span> Pool <span class="hljs-keyword">as</span> ThreadPool<br><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> partial<br><span class="hljs-keyword">from</span> deploy.python.preprocess <span class="hljs-keyword">import</span> preprocess,Resize, NormalizeImage, Permute, PadStride<br><span class="hljs-keyword">from</span> deploy.python.utils <span class="hljs-keyword">import</span> argsparser, Timer, get_current_memory_mb<br></code></pre></td></tr></table></figure>
<p>定义一个包含模型预测的配置类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">PredictConfig</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, model_dir</span>):<br>        <span class="hljs-comment"># parsing Yaml config for Preprocess</span><br>        deploy_file = os.path.join(model_dir, <span class="hljs-string">&#x27;infer_cfg.yml&#x27;</span>)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(deploy_file) <span class="hljs-keyword">as</span> f:<br>            yml_conf = yaml.safe_load(f)<br>        self.arch = yml_conf[<span class="hljs-string">&#x27;arch&#x27;</span>]<br>        self.preprocess_infos = yml_conf[<span class="hljs-string">&#x27;Preprocess&#x27;</span>]<br>        self.min_subgraph_size = yml_conf[<span class="hljs-string">&#x27;min_subgraph_size&#x27;</span>]<br>        self.labels = yml_conf[<span class="hljs-string">&#x27;label_list&#x27;</span>]<br></code></pre></td></tr></table></figure>
<p>这个类的主要功能是解析用于预处理的配置信息，包括模型架构、预处理信息、最小子图大小和标签列表。其中，<code>infer_cfg.yml</code>文件包含了所有的预处理信息，例如图像大小、均值和方差等信息。<code>yaml.safe_load()</code>用于解析<code>infer_cfg.yml</code>文件。<code>self.arch</code>保存了模型的架构，<code>self.preprocess_infos</code>包含了图像预处理信息，<code>self.min_subgraph_size</code>表示模型的最小子图大小，<code>self.labels</code>包含了标签列表。</p>
<p>定义了一个函数<code>get_test_images()</code>，用于获取测试集中的所有图片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_test_images</span>(<span class="hljs-params">infer_file</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(infer_file, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        dirs = f.readlines()<br>    images = []<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">dir</span> <span class="hljs-keyword">in</span> dirs:<br>        images.append(<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">repr</span>(<span class="hljs-built_in">dir</span>.replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>))).replace(<span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>))<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(images) &gt; <span class="hljs-number">0</span>, <span class="hljs-string">&quot;no image found in &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(infer_file)<br>    <span class="hljs-keyword">return</span> images<br></code></pre></td></tr></table></figure>
<p>该函数从一个文件中读取所有的测试集图片路径，保存在一个列表中并返回。</p>
<p>定义了一个函数<code>load_predictor()</code>，用于加载预测模型和配置信息：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">load_predictor</span>(<span class="hljs-params">model_dir</span>):<br>    config = Config(<br>        os.path.join(model_dir, <span class="hljs-string">&#x27;model.pdmodel&#x27;</span>),<br>        os.path.join(model_dir, <span class="hljs-string">&#x27;model.pdiparams&#x27;</span>))<br>    <span class="hljs-comment"># initial GPU memory(M), device ID</span><br>    config.enable_use_gpu(<span class="hljs-number">3000</span>, <span class="hljs-number">0</span>)<br>    <span class="hljs-comment"># optimize graph and fuse op</span><br>    config.switch_ir_optim(<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># disable print log when predict</span><br>    config.disable_glog_info()<br>    <span class="hljs-comment"># enable shared memory</span><br>    config.enable_memory_optim()<br>    <span class="hljs-comment"># disable feed, fetch OP, needed by zero_copy_run</span><br>    config.switch_use_feed_fetch_ops(<span class="hljs-literal">False</span>)<br>    predictor = create_predictor(config)<br>    <span class="hljs-keyword">return</span> predictor, config<br></code></pre></td></tr></table></figure>
<p><strong>》》》未完待续</strong></p>
]]></content>
      <categories>
        <category>Paddle</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PaddleDetection</title>
    <url>/posts/5959.html</url>
    <content><![CDATA[<blockquote>
<p>爱来自ZZULI❤<a href="https://luoy-oss.github.io">drluo</a></p>
</blockquote>
<p><img src="/img/page/ZZULI.webp" alt=""></p>
<h1>1. Config 类定义<a href="https://www.paddlepaddle.org.cn/inference/api_reference/python_api_doc/Config/ConfigClass.html#config">¶</a></h1>
<p><code>Config</code> 类为用于配置构建 <code>Predictor</code> 对象的配置信息，如模型路径、是否开启 gpu 等等。</p>
<p>构造函数定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># Config 类定义，输入为 None<br>class paddle.inference.Config()<br><br># Config 类定义，输入为其他 Config 对象<br>class paddle.inference.Config(config: Config)<br><br># Config 类定义，输入分别为模型文件路径和参数文件路径<br>class paddle.inference.Config(prog_file: str, params_file: str)<br></code></pre></td></tr></table></figure>
<p>代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 引用 paddle inference 预测库<br>import paddle.inference as paddle_infer<br><br># 创建 config<br>config = paddle_infer.Config(&quot;./mobilenet.pdmodel&quot;, &quot;./mobilenet.pdiparams&quot;)<br><br># 根据 config 创建 predictor<br>predictor = paddle_infer.create_predictor(config)<br></code></pre></td></tr></table></figure>
<h1>2. 设置预测模型<a href="https://www.paddlepaddle.org.cn/inference/api_reference/python_api_doc/Config/ModelConfig.html#shezhiyucemoxing">¶</a></h1>
<h2 id="2-1-从文件中加载预测模型¶">2.1. 从文件中加载预测模型<a href="https://www.paddlepaddle.org.cn/inference/api_reference/python_api_doc/Config/ModelConfig.html#congwenjianzhongjiazaiyucemoxing">¶</a></h2>
<p>API定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 设置模型文件路径，当需要从磁盘加载模型时使用<br># 参数：prog_file_path - 模型文件路径<br>#      params_file_path - 参数文件路径<br># 返回：None<br>paddle.inference.Config.set_model(prog_file_path: str, params_file_path: str)<br><br># 设置模型文件路径<br># 参数：x - 模型文件路径<br># 返回：None<br>paddle.inference.Config.set_prog_file(x: str)<br><br># 设置参数文件路径<br># 参数：x - 参数文件路径<br># 返回：None<br>paddle.inference.Config.set_params_file(x: str)<br><br># 获取模型文件路径<br># 参数：None<br># 返回：str - 模型文件路径<br>paddle.inference.Config.prog_file()<br><br># 获取参数文件路径<br># 参数：None<br># 返回：str - 参数文件路径<br>paddle.inference.Config.params_file()<br></code></pre></td></tr></table></figure>
<p>代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 引用 paddle inference 预测库<br>import paddle.inference as paddle_infer<br><br># 创建 config<br>config = paddle_infer.Config()<br><br># 通过 API 设置模型文件夹路径<br>config.set_prog_file(&quot;./mobilenet_v2.pdmodel&quot;)<br>config.set_params_file(&quot;./mobilenet_v2.pdiparams&quot;)<br><br># 通过 API 获取 config 中的模型文件和参数文件路径<br>print(config.prog_file())<br>print(config.params_file())<br><br># 根据 config 创建 predictor<br>predictor = paddle_infer.create_predictor(config)<br></code></pre></td></tr></table></figure>
<h2 id="2-2-从内存中加载预测模型¶">2.2. 从内存中加载预测模型<a href="https://www.paddlepaddle.org.cn/inference/api_reference/python_api_doc/Config/ModelConfig.html#congneicunzhongjiazaiyucemoxing">¶</a></h2>
<p>API定义如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 从内存加载模型<br># 参数：prog_buffer - 内存中模型结构数据<br>#      prog_buffer_size - 内存中模型结构数据的大小<br>#      params_buffer - 内存中模型参数数据<br>#      params_buffer_size - 内存中模型参数数据的大小<br># 返回：None<br>paddle.inference.Config.set_model_buffer(prog_buffer: str, prog_buffer_size: int, <br>                                         params_buffer: str, params_buffer_size: int)<br><br># 判断是否从内存中加载模型<br># 参数：None<br># 返回：bool - 是否从内存中加载模型<br>paddle.inference.Config.model_from_memory()<br></code></pre></td></tr></table></figure>
<p>代码示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext"># 引用 paddle inference 预测库<br>import paddle.inference as paddle_infer<br><br># 创建 config<br>config = paddle_infer.Config()<br><br># 加载模型文件到内存<br>with open(&#x27;./mobilenet_v2.pdmodel&#x27;, &#x27;rb&#x27;) as prog_file:<br>    prog_data=prog_file.read()<br>    <br>with open(&#x27;./mobilenet_v2.pdiparams&#x27;, &#x27;rb&#x27;) as params_file:<br>    params_data=params_file.read()<br><br># 从内存中加载模型<br>config.set_model_buffer(prog_data, len(prog_data), params_data, len(params_data))<br><br># 通过 API 获取 config 中 model_from_memory 的值 - True<br>print(config.model_from_memory())<br><br># 根据 config 创建 predictor<br>predictor = paddle_infer.create_predictor(config)<br></code></pre></td></tr></table></figure>
<h1>重要内容</h1>
<h2 id="paddlepaddle中">paddlepaddle中</h2>
<ul>
<li>DynamicDimension ：表示动态维度，一般是1</li>
<li>im_shape：图像经过resize后的大小，表示为H,W, DynamicDimension 表示batch维度</li>
<li>image：输入网络的图像，DynamicDimension 表示batch维度，如果输入图像大小为变长，则H,W为None</li>
<li>scale_factor：输入图像大小比真实图像大小，表示为scale_y, scale_x</li>
<li>multiclass_nms3_0.tmp_0：bbox, NMS的输出，形状为[N, 6], 其中N为预测框的个数，6为[class_id, score, x1, y1, x2, y2]</li>
<li>multiclass_nms3_0.tmp_2：bbox_num, 每张图片对应预测框的个数，例如batch_size为2，输出为[N1, N2], 表示第一张图包含N1个预测框，第二张图包含N2个预测框，并且预测框的总个数和NMS输出的第一维N相同</li>
</ul>
]]></content>
      <categories>
        <category>Paddle</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>easy库的使用</title>
    <url>/posts/3766.html</url>
    <content><![CDATA[<h1><a href="https://easyx.cn/">C++easy库</a></h1>
<h2 id="加载动画">加载动画</h2>
<p>easyx库本身并没有给出gif的加载函数，所以我们需要通过另一种方式实现gif的“<strong>播放</strong>”</p>
<blockquote>
<p>通过将gif图提取出相应关键帧，然后对关键帧进行逐帧播放</p>
</blockquote>
<p>以下是代码示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;graphics.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br>IMAGE images[<span class="hljs-number">92</span>];<span class="hljs-comment">//92张关键帧</span><br><span class="hljs-type">bool</span> isLoaded = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loadImg</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">wchar_t</span> filename[<span class="hljs-number">20</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">92</span>; i++) &#123;<br>        <span class="hljs-comment">//这里我是将原有的gif图拆分为了92张关键帧</span><br>        <span class="hljs-built_in">wsprintf</span>(filename, _T(<span class="hljs-string">&quot;../gif/%d.png&quot;</span>), i + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">loadimage</span>(&amp;images[i], filename, <span class="hljs-number">1080</span>, <span class="hljs-number">810</span>);<span class="hljs-comment">//读相关图片，并设置读入大小为1080*810</span><br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">loading</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;窗口初始化中...&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-comment">// 加载关键帧图片</span><br>    <span class="hljs-keyword">if</span> (!isLoaded) &#123;<br>        isLoaded = <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">loadImg</span>();<br>    &#125;<br>    HWND hwnd = <span class="hljs-built_in">initgraph</span>(<span class="hljs-number">1080</span>, <span class="hljs-number">810</span>); <span class="hljs-comment">// 初始化绘图窗口大小</span><br>    <span class="hljs-built_in">MoveWindow</span>(hwnd, <span class="hljs-number">380</span>, <span class="hljs-number">200</span>, <span class="hljs-number">1096</span>, <span class="hljs-number">849</span>, <span class="hljs-literal">false</span>);<br>	<br>    <span class="hljs-comment">//采用批量绘制，防闪烁</span><br>    <span class="hljs-built_in">BeginBatchDraw</span>();<span class="hljs-comment">//批量绘制开始</span><br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">92</span>; i++) &#123;<br>        <span class="hljs-built_in">cleardevice</span>(); 				<span class="hljs-comment">// 清空屏幕</span><br>        <span class="hljs-built_in">putimage</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, &amp;images[i]);	<span class="hljs-comment">// 绘制当前帧图片</span><br>        <span class="hljs-built_in">FlushBatchDraw</span>();			<span class="hljs-comment">// 批量绘制刷新</span><br>        <span class="hljs-built_in">Sleep</span>(<span class="hljs-number">25</span>); 					<span class="hljs-comment">// 控制每帧显示时间，单位为毫秒</span><br>    &#125;<br>    <span class="hljs-built_in">EndBatchDraw</span>();<span class="hljs-comment">//批量绘制结束</span><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;窗口初始化完毕&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<hr>
<h2 id="辅助函数">辅助函数</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;codecvt&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;comutil.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">pragma</span> comment(lib, <span class="hljs-string">&quot;comsuppw.lib&quot;</span>)</span><br>	<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> _MIN(x,y) (((x)&lt;(y))?(x):(y))</span><br><br><span class="hljs-comment">//wstring转string</span><br><span class="hljs-function">std::string <span class="hljs-title">wstringTostring</span><span class="hljs-params">(<span class="hljs-type">const</span> std::wstring&amp; ws)</span> </span>&#123;<br>    <span class="hljs-type">_bstr_t</span> t = ws.<span class="hljs-built_in">c_str</span>();<br>    <span class="hljs-type">char</span>* pchar = (<span class="hljs-type">char</span>*)t;<br>    std::string result = pchar;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">//string转wstring</span><br><span class="hljs-function">std::wstring <span class="hljs-title">stringTowstring</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; s)</span> </span>&#123;<br>    <span class="hljs-type">_bstr_t</span> t = s.<span class="hljs-built_in">c_str</span>();<br>    <span class="hljs-type">wchar_t</span>* pwchar = (<span class="hljs-type">wchar_t</span>*)t;<br>    std::wstring result = pwchar;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>easyx</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32开发相关</title>
    <url>/posts/9904.html</url>
    <content><![CDATA[<h1>开发准备</h1>
<p><strong>固件库</strong></p>
<p><img src="/img/page/stm32/STM32F10x_StdPeriph_Lib_V3.5.0.png" alt=""></p>
<blockquote>
<p>_htmresc 无用</p>
<p>Libraries 库函数文件</p>
<p>Project 官方提供的工程示例和模板</p>
<p>Utilities STM32官方<strong>评估板</strong>(官方的一个小电路板，用于测评STM32)的相关例程</p>
<p>Release_Notes 库函数的发布文档</p>
<p>stm32f10x_stdperiph_lib_um 使用手册</p>
</blockquote>
<p><strong>新建工程</strong></p>
<p><img src="/img/page/stm32/NewProject.png" alt=""></p>
<p>下面弹出的这个窗口是Keil的工程助手，可以帮助新建工程，但是这里先用不到，关上即可</p>
<p><img src="/img/page/stm32/%E5%B0%8F%E5%8A%A9%E6%89%8B.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B0.png" alt=""></p>
<p>随后，打开STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm</p>
<p>其中的文件为STM32的启动文件，STM32的程序就是从这些启动文件执行的</p>
<p>将其中的启动文件放到我们创建的项目中，记得分文件夹</p>
<p>STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x</p>
<p><img src="/img/page/stm32/stm32f10x.png" alt=""></p>
<p>目录下的stm32f10x.h是STM32的外设寄存器描述文件，用于描述STM32有哪些寄存器和它对应的地址，其余两个system文件主要是用于配置时钟</p>
<p>STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport</p>
<p><img src="/img/page/stm32/CoreSupport.png" alt=""></p>
<p>这两个cm3文件就是内核的寄存器描述，其中还有一些内核的配置函数（.c文件）</p>
<blockquote>
<p>以上就是工程的必要文件</p>
</blockquote>
<p>然后回到Keil，改组名，添加已有文件</p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B2.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B3.png" alt=""></p>
<p>add时，加入的为startup_stm32f10x_md.s（这是启动文件中的一个，关于启动文件的选择，看<a href="#startupfileselection">这里</a>），以及所有的.c .h文件</p>
<p>此步，完成效果如下：</p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B1.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B4.png" alt=""></p>
<p>！！记得<a href="#addheaderfilepath">添加头文件路径</a></p>
<p>然后添加相应的main文件</p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B-main.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B-main2.png" alt=""></p>
<p>随后进行后续开发操作…</p>
<p><strong><a href="#ac6">注意</a></strong></p>
<hr>
<h2 id="一、-基于寄存器">一、.基于寄存器</h2>
<p>基于寄存器的开发方式更底层，更直接，程序效率会更高些，但是开发效率不高</p>
<h3 id="点灯-依据STM32F10xxx参考手册">点灯(依据STM32F10xxx参考手册)</h3>
<p>STM32在外设使用前，需要先<a href="https://www.cnblogs.com/huang-y-x/p/11305580.html">使能时钟</a></p>
<p><img src="/img/page/stm32/STM32F10xxx%E4%BD%BF%E8%83%BD%E6%97%B6%E9%92%9F.png" alt=""></p>
<p>↑↑↑这里的IOPCEN，就是用于使能GPIOC的时钟</p>
<p>往下找可以看到解释，这一位写1，就是打开GPIOC的时钟</p>
<p><img src="/img/page/stm32/STM32F10xxx%E4%BD%BF%E8%83%BD%E6%97%B6%E9%92%9F_%E4%BD%8D4.png" alt=""></p>
<p>将其置为1根据16进制，即为：0 0 0 0 0 0 1 0</p>
<p><img src="/img/page/stm32/STM32F10xxx%E4%BD%BF%E8%83%BD%E6%97%B6%E9%92%9F_%E4%BD%8D4_00000010.png" alt=""></p>
<p>STM32每个端口有16个IO口。所以要分2个寄存器来操作。这2个寄存器用来选择对应的IO口，IO0—7使用低，8-15使用高</p>
<p><a href="https://blog.csdn.net/johnwillwin/article/details/107695131">STM32的GPIO端口寄存器配置</a></p>
<p>= =救命，寄存器不会，这里丢个B站的视频吧<a href="https://www.bilibili.com/video/BV1th411z7sn">BV1th411z7sn</a>  14分32秒开始19分结束</p>
<iframe src="//player.bilibili.com/player.html?aid=206940155&bvid=BV1th411z7sn&cid=388533478&page=4&t=872" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height=382 width=680> </iframe>
<h2 id="二、基于库函数">二、基于库函数</h2>
<p>通过调用ST官方设定好的函数，来间接的配置寄存器</p>
<p>开发效率高</p>
<p>找到STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\src目录</p>
<p>misc.c为内核的库函数，其余为外设库函数</p>
<p>全选复制后放入项目文件夹Libraries就可以了</p>
<p>找到STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver\inc目录</p>
<p>这些为库函数的头文件，全选复制到项目文件夹Libraries（与上相同</p>
<p>在Keil中添加组</p>
<p>最后效果如下：</p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B_Libraries.png" alt=""></p>
<p>继续添加：STM32F10x_StdPeriph_Lib_V3.5.0\Project\STM32F10x_StdPeriph_Template目录下的</p>
<blockquote>
<p>stm32f10x_conf.h</p>
<p>stm32f10x_it.c</p>
<p>stm32f10x_it.h</p>
</blockquote>
<p>到工程的User目录下（main函数同级目录）</p>
<p>并添加USE_STDPERIPH_DRIVER宏以确保conf.h文件正常引入（stm32f10x.h第8296行标明）</p>
<p><img src="/img/page/stm32/define.png" alt=""></p>
<p>并<a href="#addheaderfilepath">添加</a>User  Library头文件路径</p>
<p><strong><h2><center>这样基于库函数的工程就建好了</center></h2></strong></p>
<blockquote>
<h2>
    新建工程步骤总结
</h2>
<p>建立工程文件夹，Keil中新建工程，选择型号</p>
<p>工程文件夹里建立Start、Library、User等文件夹，复制固件库里面的文件到工程文件夹</p>
<p>工程里对应建立Start、Library、User等同名称的分组，然后将文件夹内的文件添加到工程分组里</p>
<p>工程选项，C/C++，Include Paths内声明所有包含头文件的文件夹</p>
<p>工程选项，C/C++，Define内定义USE_STDPERIPH_DRIVER</p>
<p>工程选项，Debug，下拉列表选择对应调试器，Settings，Flash Download里勾选Reset and Run</p>
</blockquote>
<h2 id="三、基于HAL库">三、基于HAL库</h2>
<p>该方式隐藏了底层逻辑，对于STM32不熟悉的人使用该方式，可能会停留在较浅水平</p>
<p>建议学过标准库后再来了解。</p>
<h1>杂项解析</h1>
<p><a id='startupfileselection'></a></p>
<h3 id="启动文件选择">启动文件选择</h3>
<p><img src="/img/page/stm32/%E5%90%AF%E5%8A%A8%E6%96%87%E4%BB%B6%E9%80%89%E6%8B%A9.png" alt=""></p>
<p><a id='addheaderfilepath'></a></p>
<h3 id="添加头文件路径">添加头文件路径</h3>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B5.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B6.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B7.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B8.png" alt=""></p>
<p><img src="/img/page/stm32/%E5%B7%A5%E7%A8%8B9.png" alt=""></p>
<p><a id='ac6'></a></p>
<h3 id="AC6编译器对中文支持不好">AC6编译器对中文支持不好</h3>
<p>项目文件目录若有中文路径，头文件等都无法读取，项目内中文也会被报错</p>
<p>可参考：<a href="https://blog.csdn.net/weixin_42378319/article/details/108796095">keil 使用AC6 中文警告解决办法</a></p>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
  </entry>
  <entry>
    <title>STM32阵列按键</title>
    <url>/posts/47966.html</url>
    <content><![CDATA[<h1>阵列按键</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">uint8_t</span> <span class="hljs-title">Key_GetNum</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-type">uint8_t</span> keyNum = <span class="hljs-number">0</span>;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">       在Key_init()中</span><br><span class="hljs-comment">       设置所有行为高电平，列为输入下拉模式（IPD）</span><br><span class="hljs-comment">       GPIO_SetBits(GPIOB, Key_ROW1 | Key_ROW2 | Key_ROW3 | Key_ROW4);</span><br><span class="hljs-comment">       GPIO_ResetBits(GPIOA, Key_Pin_A_All);</span><br><span class="hljs-comment">       GPIO_ResetBits(GPIOC, Key_Pin_C_All);</span><br><span class="hljs-comment">	*/</span><br>	<span class="hljs-built_in">GPIO_SetBits</span>(GPIOB, Key_ROW4);<br>	<span class="hljs-built_in">GPIO_ResetBits</span>(GPIOB, Key_ROW1);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET);<br>		keyNum = <span class="hljs-number">1</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET);<br>		keyNum = <span class="hljs-number">5</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET);<br>		keyNum = <span class="hljs-number">9</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET);<br>		keyNum = <span class="hljs-number">13</span>;<br>	&#125;<br>	<span class="hljs-comment">// 等待一段时间，避免检测到多个按键同时按下</span><br>	<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>    <br>	<span class="hljs-built_in">GPIO_SetBits</span>(GPIOB, Key_ROW1);<br>	<span class="hljs-built_in">GPIO_ResetBits</span>(GPIOB, Key_ROW2);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET);<br>		keyNum = <span class="hljs-number">2</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET);<br>		keyNum = <span class="hljs-number">6</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET);<br>		keyNum = <span class="hljs-number">10</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET);<br>		keyNum = <span class="hljs-number">14</span>;<br>	&#125;<br>	<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>    <br>	<span class="hljs-built_in">GPIO_SetBits</span>(GPIOB, Key_ROW2);<br>	<span class="hljs-built_in">GPIO_ResetBits</span>(GPIOB, Key_ROW3);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET);<br>		keyNum = <span class="hljs-number">3</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET);<br>		keyNum = <span class="hljs-number">7</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET);<br>		keyNum = <span class="hljs-number">11</span>;	<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET);<br>		keyNum = <span class="hljs-number">15</span>;<br>	&#125;<br>	<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>    <br>	<span class="hljs-built_in">GPIO_SetBits</span>(GPIOB, Key_ROW3);<br>	<span class="hljs-built_in">GPIO_ResetBits</span>(GPIOB, Key_ROW4);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL1) == Bit_RESET);<br>		keyNum = <span class="hljs-number">4</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOA, Key_COL2) == Bit_RESET);<br>		keyNum = <span class="hljs-number">8</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL3) == Bit_RESET);<br>		keyNum = <span class="hljs-number">12</span>;<br>	&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET &amp;&amp; keyNum == <span class="hljs-number">0</span>) &#123;<span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>		<span class="hljs-keyword">while</span>(<span class="hljs-built_in">GPIO_ReadInputDataBit</span>(GPIOC, Key_COL4) == Bit_RESET);<br>		keyNum = <span class="hljs-number">16</span>;<br>	&#125;<br>    <span class="hljs-built_in">Delay_ms</span>(<span class="hljs-number">10</span>);<br>    <br>	<span class="hljs-keyword">return</span> keyNum;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
  </entry>
  <entry>
    <title>edgeboardFZ3A相关问题</title>
    <url>/posts/31267.html</url>
    <content><![CDATA[<h1>FZ3A</h1>
<p>Q：在程序make阶段，出现了串口库库文件缺失导致的函数定义未被实现的报错：<br>
<img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/SerialPortMISS.jpg" alt=""></p>
<p>A：安装相关串口库，以下是相关文件</p>
<blockquote>
<p>libserial-dev_1.0.0-4_arm64.deb</p>
<p>libserial1_1.0.0-4_arm64.deb</p>
<p>gcc-10-base_10-20200411-0ubuntu1_arm64.deb</p>
<p>libgcc-s1_10-20200411-0ubuntu1_arm64.deb</p>
<p>libc6_2.27-3ubuntu1_arm64.deb</p>
<p>libgccjit-7-dev_7.5.0-6ubuntu2_arm64.deb</p>
<p>gcc-7-base_7.5.0-6ubuntu2_arm64.deb</p>
<p>libgcc-7-dev_7.5.0-6ubuntu2_arm64.deb</p>
<p>libasan4_7.5.0-6ubuntu2_arm64.deb</p>
<p>libubsan0_7.5.0-6ubuntu2_arm64.deb</p>
</blockquote>
<p>以上文件存在依赖关系，顺序已经忘了，请自行尝试。</p>
<p>并修改CMakeList.txt文件，加入：</p>
<blockquote>
<p>set(SERIAL_LIBRARY “/usr/lib/${CMAKE_LIBRARY_ARCHITECTURE}/libserial.so”)<br>
set(SERIAL_INCLUDE_DIR “/usr/include/serial”)</p>
<p>include_directories(${SERIAL_INCLUDE_DIR})</p>
</blockquote>
<hr>
<p>Q：CH340插上后无法识别出/dev/ttyUSB0</p>
<p>A：请使用/dev/ttyPS1，通过串口直接发送数据</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/port.webp" alt=""></p>
<p>例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">driver = std::<span class="hljs-built_in">make_shared</span>&lt;Driver&gt;(<span class="hljs-string">&quot;/dev/ttyPS1&quot;</span>, BaudRate::BAUD_115200);<br><span class="hljs-keyword">if</span> (driver == <span class="hljs-literal">nullptr</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Create Uart-Driver Error!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">// 串口初始化，打开串口设备及配置串口数据格式</span><br><span class="hljs-type">int</span> ret = driver-&gt;<span class="hljs-built_in">open</span>();<br><span class="hljs-keyword">if</span> (ret != <span class="hljs-number">0</span>) &#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Uart Open failed!&quot;</span> &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>string str = <span class="hljs-string">&quot;1234&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; c:str)&#123;<br>    driver-&gt;<span class="hljs-built_in">senddata</span>(c);<br>&#125;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> ch;<br>driver-&gt;<span class="hljs-built_in">recvdata</span>(ch,(<span class="hljs-type">size_t</span>)<span class="hljs-number">10000</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br>    driver-&gt;<span class="hljs-built_in">senddata</span>(ch);<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h1>现存问题</h1>
<p>在使用yolov3_mobilenet_v1训练的模型进行预测时，predictor-&gt;Run();阶段，出现以下问题（分别为cpu 和 fpga 两种模式的报错）</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/error1.png" alt="cpu"></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/error2.png" alt="fpga"></p>
]]></content>
      <categories>
        <category>Baidu</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>edgeboard-FZ3A</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>yolo和paddle模型常见输出参数</title>
    <url>/posts/40355.html</url>
    <content><![CDATA[<blockquote>
<p>爱来自ZZULI❤<a href="https://luoy-oss.github.io">drluo</a></p>
</blockquote>
<p><img src="/img/page/ZZULI.webp" alt=""></p>
<hr>
<p>原文链接：<a href="https://blog.csdn.net/changzengli/article/details/131012843">yolo和paddle模型常见输出参数解惑</a></p>
<p>此文为本人方便查找手动转存记录，请支持原作者。</p>
<hr>
<h1>yolo和paddle模型常见输出参数</h1>
<h3 id="第一种">第一种</h3>
<ul>
<li><strong>Concatoutput_dim_0</strong> ：变量，表示预测目标的数量，</li>
<li><strong>7</strong>：表示每个目标的七个参数：<code>batch_id，x0，y0，x1，y1，cls_id，score</code></li>
</ul>
<p><img src="/img/page/model_output/output_type1.webp" alt=""></p>
<h3 id="第二种">第二种</h3>
<ul>
<li><strong>85</strong>：每一行<code>85</code>个数值，<code>5</code>个center_x,center_y, width, height，score ，<code>80</code>个标签类别得分</li>
<li><strong>25200</strong>：三个尺度上的预测框总和 ( 80∗80∗3 + 40∗40∗3 + 20∗20∗3 )，每个网格三个预测框，后续需要非极大值抑制NMS处理</li>
<li><strong>1</strong>：没有批量预测推理，即每次输入推理一张图片</li>
</ul>
<p><img src="/img/page/model_output/output_type2.webp" alt=""></p>
<h3 id="第三种">第三种</h3>
<ul>
<li><strong>num_dets</strong>：表示其批次中每个图像中的目标数</li>
<li><strong>det_boxes</strong>：表示 topk(100) 目标的坐标信息 [x0,y0,x1,y1]</li>
<li><strong>det_scores</strong>：表示每个 topk(100) 个对象的置信度分数</li>
<li><strong>det_classes</strong>：表示每个 topk(100) 个对象的类别</li>
</ul>
<p><img src="/img/page/model_output/output_type3.webp" alt=""></p>
<h3 id="第四种">第四种</h3>
<p><img src="/img/page/model_output/output_type4.webp" alt=""></p>
<h3 id="第五种">第五种</h3>
<p><img src="/img/page/model_output/output_type5.webp" alt=""></p>
<h3 id="第六种-paddlepaddle">第六种(paddlepaddle)</h3>
<ul>
<li><strong>DynamicDimension</strong> ：表示动态维度，一般是1</li>
<li><strong>im_shape</strong>：图像经过resize后的大小，表示为H,W, DynamicDimension 表示batch维度</li>
<li><strong>image</strong>：输入网络的图像，DynamicDimension 表示batch维度，如果输入图像大小为变长，则H,W为None</li>
<li><strong>scale_factor</strong>：输入图像大小比真实图像大小，表示为<code>scale_y</code>, <code>scale_x</code></li>
<li><strong>multiclass_nms3_0.tmp_0</strong>：bbox, NMS的输出，形状为<code>[N, 6]</code>, 其中N为预测框的个数，6为<code>[class_id, score, x1, y1, x2, y2]</code></li>
<li><strong>multiclass_nms3_0.tmp_2</strong>：bbox_num, 每张图片对应预测框的个数，例如batch_size为2，输出为[N1, N2], 表示第一张图包含N1个预测框，第二张图包含N2个预测框，并且预测框的总个数和NMS输出的第一维N相同</li>
</ul>
<p><img src="/img/page/model_output/output_type6.webp" alt=""></p>
]]></content>
      <tags>
        <tag>Paddle</tag>
        <tag>yolo</tag>
      </tags>
  </entry>
  <entry>
    <title>一个特别的日子</title>
    <url>/posts/21795.html</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>我</category>
      </categories>
  </entry>
  <entry>
    <title>【LeetCode 1617】统计子树中城市之间最大距离</title>
    <url>/posts/5491.html</url>
    <content><![CDATA[<h2 id="题目描述">题目描述</h2>
<p>给你 n 个城市，编号为从 1 到 n 。同时给你一个大小为 n-1 的数组 edges ，其中 edges[i] = [ui, vi] 表示城市 ui 和 vi 之间有一条双向边。题目保证任意城市之间只有唯一的一条路径。换句话说，所有城市形成了一棵 树 。</p>
<p>一棵 子树 是城市的一个子集，且子集中任意城市之间可以通过子集中的其他城市和边到达。两个子树被认为不一样的条件是至少有一个城市在其中一棵子树中存在，但在另一棵子树中不存在。</p>
<p>对于 d 从 1 到 n-1 ，请你找到城市间 最大距离 恰好为 d 的所有子树数目。</p>
<p>请你返回一个大小为 n-1 的数组，其中第 d 个元素（下标从 1 开始）是城市间 最大距离 恰好等于 d 的子树数目。</p>
<p>请注意，两个城市间距离定义为它们之间需要经过的边的数目。</p>
<h3 id="示例-1：">示例 1：</h3>
<blockquote>
<p>输入：n = 4, edges = [[1,2],[2,3],[2,4]]<br>
输出：[3,4,0]<br>
解释：<br>
子树 {1,2}, {2,3} 和 {2,4} 最大距离都是 1 。<br>
子树 {1,2,3}, {1,2,4}, {2,3,4} 和 {1,2,3,4} 最大距离都为 2 。<br>
不存在城市间最大距离为 3 的子树。</p>
</blockquote>
<h3 id="示例-2：">示例 2：</h3>
<blockquote>
<p>输入：n = 2, edges = [[1,2]]<br>
输出：[1]</p>
</blockquote>
<h3 id="示例-3：">示例 3：</h3>
<blockquote>
<p>输入：n = 3, edges = [[1,2],[2,3]]<br>
输出：[2,1]</p>
</blockquote>
<h3 id="提示：">提示：</h3>
<p>$2 &lt;= n &lt;= 15$<br>
$edges.length == n-1$<br>
$edges[i].length == 2$<br>
$1 &lt;= ui, vi &lt;= n$<br>
$题目保证 (ui, vi) 所表示的边互不相同。$</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">countSubgraphsForEachDiameter</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;<br>		<span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(n - <span class="hljs-number">1</span>)</span></span>;<br>		vector&lt;vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">G</span>(n + <span class="hljs-number">1</span>);<br>		<span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">vis</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;	<span class="hljs-comment">//访问树</span><br>		<span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ins</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;	<span class="hljs-comment">//子树</span><br>		<span class="hljs-type">int</span> dim = <span class="hljs-number">0</span>;<span class="hljs-comment">//直径</span><br><br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; e : edges) &#123;<br>			G[e[<span class="hljs-number">0</span>]].<span class="hljs-built_in">push_back</span>(e[<span class="hljs-number">1</span>]);<br>			G[e[<span class="hljs-number">1</span>]].<span class="hljs-built_in">push_back</span>(e[<span class="hljs-number">0</span>]);<br>		&#125;<br>		<br>        <span class="hljs-comment">//深搜，用于统计直径</span><br>        <span class="hljs-comment">//depu是当前节点u的深度，depv是遍历子节点v后返回的子树的深度</span><br>		function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>)&gt; DFS = [&amp;](<span class="hljs-type">int</span> u) &#123;<br>			<span class="hljs-type">int</span> depu = <span class="hljs-number">0</span>;<br>			vis[u] = <span class="hljs-literal">true</span>;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; v : G[u]) &#123;<br>				<span class="hljs-keyword">if</span> (!vis[v] &amp;&amp; ins[v]) &#123;<br>					<span class="hljs-type">int</span> depv = <span class="hljs-built_in">DFS</span>(v) + <span class="hljs-number">1</span>;<span class="hljs-comment">//depv为子树的长度</span><br>					dim = <span class="hljs-built_in">max</span>(dim, depu + depv);	<span class="hljs-comment">//如果子树深度+节点u深度&gt;当前直径，更新当前直径，确保最终含有节点u的子树的直径为最大直径</span><br>					depu = <span class="hljs-built_in">max</span>(depu, depv);		<span class="hljs-comment">//子树深度若增加，更新节点u深度</span><br><br>				&#125;<br>			&#125;<br>			<span class="hljs-keyword">return</span> depu;<br>		&#125;;<br>		<br>        <span class="hljs-comment">//回溯函数，用于枚举子树选择</span><br>		function&lt;<span class="hljs-type">void</span>(<span class="hljs-type">int</span>)&gt; _stat = [&amp;](<span class="hljs-type">int</span> i) &#123;<br>			<span class="hljs-keyword">if</span> (i &gt; n) &#123;<span class="hljs-comment">//完成所有节点的0(不在子树中) 1((在子树中)枚举</span><br>				<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> v = <span class="hljs-number">1</span>; v &lt;= n; v++)<br>					<span class="hljs-keyword">if</span> (ins[v]) &#123;<br>						<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; vs : vis)vs = <span class="hljs-literal">false</span>;<br>						dim = <span class="hljs-number">0</span>;<span class="hljs-comment">//直径</span><br>						<span class="hljs-built_in">DFS</span>(v);<span class="hljs-comment">//获取子树直径</span><br>						<span class="hljs-keyword">break</span>;<br>					&#125;<br>				<span class="hljs-keyword">if</span> (dim &amp;&amp; vis == ins)<span class="hljs-comment">//获取到直径，且所 选择的树 与 访问树 相同</span><br>					ans[dim - <span class="hljs-number">1</span>]++;<br>				<span class="hljs-keyword">return</span>;<br>			&#125;<br><br>			_stat(i + <span class="hljs-number">1</span>);<span class="hljs-comment">//子树，不选择节点i</span><br>			ins[i] = <span class="hljs-literal">true</span>;<br>			_stat(i + <span class="hljs-number">1</span>);<span class="hljs-comment">//子树，选择节点i</span><br>			ins[i] = <span class="hljs-literal">false</span>;<span class="hljs-comment">//回溯</span><br>		&#125;;<br><br>		_stat(<span class="hljs-number">1</span>);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; i : ans) &#123;<br>			cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>		&#125;<br>		<span class="hljs-keyword">return</span> ans;<br>	&#125;<br>&#125;;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>回溯</tag>
        <tag>枚举</tag>
      </tags>
  </entry>
  <entry>
    <title>《树》</title>
    <url>/posts/11924.html</url>
    <content><![CDATA[<h1>树(Tree)</h1>
<blockquote>
<p>n(n≥0)个结点构成的有限集合</p>
<p>n=0时，称为<strong>空树</strong></p>
<p>对于任意一颗<strong>非空树</strong>，它具有以下性质：</p>
<ul>
<li>树中有一个称为&quot;<strong>根(root)</strong>&quot;的特殊节点，用root表示</li>
<li>其余结点可分为m(m&gt;0)个<strong>互不相交</strong>的有限集$T_1$ $T_2$…$T_m$，其中每个集合本身又是一棵树。称为原来树的&quot;<br>
<strong>子树(SubTree)</strong>&quot;</li>
</ul>
</blockquote>
<p><img src="/img/page/tree/tree1.webp" alt=""></p>
<p><img src="/img/page/tree/notTree.webp" alt=""></p>
<blockquote>
<p>子树不相交</p>
<p>除根节点外，每个结点有且仅有一个父结点</p>
<p>一棵N个结点的树有N-1条边</p>
</blockquote>
<p>（树是保证所有结点连通的一种最小连通方式之一）</p>
<h2 id="相关术语">相关术语</h2>
<p><strong>结点的度</strong> ：结点的子树个数</p>
<p><strong>树的度</strong>：树的所有结点中最大的度数</p>
<p><strong>叶结点</strong>：度为0的点</p>
<p><strong>父结点</strong>：有子树的结点是其子树的根结点的父结点</p>
<p><strong>子结点</strong>：若A结点是B结点的父结点，则称B结点是A结点的子结点</p>
<p><strong>兄弟结点</strong>：具有同一父结点的各结点彼此是兄弟结点</p>
<p><strong>路径和路径长度</strong>：从结点$n_1$到$n_k$的<strong>路径</strong>为一个结点序列$n_1$，$n_2$，…，$n_k$，$n_i$是$n_i+1$的父结点。路径所包含边的个数为<strong>路径的长度</strong></p>
<p><strong>祖先结点(Ancestor)</strong>：沿<strong>树根到某一结点路径</strong>上的所有结点都是这个结点的祖先结点</p>
<p><strong>子孙结点(Descendant)</strong>：某一结点的<strong>子树中的所有结点</strong>是这个结点的子孙。</p>
<p><strong>结点的层次(Level)</strong>：规定<strong>根结点在1层</strong>， 其它任一结点的层数是其父结点的层数加1</p>
<p><strong>树的深度(Depth)</strong>：树中所有结点中的<strong>最大层次</strong>是这棵树的深度。</p>
<h2 id=""></h2>
<h1>二叉树（Binary tree）</h1>
<p><img src="/img/page/tree/Skewed.webp" alt=""></p>
<p><img src="/img/page/tree/Perfect.webp" alt=""></p>
<p><img src="/img/page/tree/Complete.webp" alt=""></p>
<p><strong>针对完全二叉树</strong></p>
<p><img src="/img/page/tree/tComplete.webp" alt="">是完全二叉树</p>
<p><img src="/img/page/tree/fComplete.webp" alt="">由于D结点的断层，其不是完全二叉树</p>
<ul>
<li>
<p>二叉树的第i层的最大结点数为:2^i-1，i≥1</p>
</li>
<li>
<p>深度为k的二叉树有最大结点总数为：(2^k)-1，k≥1</p>
</li>
<li>
<p>对任何非空二叉树T,若$n_0$表示叶结点的个数，$n_2$是度为2的非叶结点个数，那么两者满足关系$n_0$ = $n_2$ + 1</p>
<p><img src="/img/page/tree/tree2.webp" alt=""></p>
<p>第三个结论可以这样得来：</p>
<p>$n_0$ + $n_1$ + $n_2$ - 1 = 0 * $n_0$ + 1 * $n_1$ + 2 * $n_2$</p>
<p>即：$n_0$ = $n_2$ + 1</p>
</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>tree</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的同构</title>
    <url>/posts/50176.html</url>
    <content><![CDATA[<h1>关于二叉树的同构</h1>
<p><img src="/img/page/tree/Isomorphism.webp" alt=""></p>
<hr>
<blockquote>
<p><strong>一种可行的方法(基于数组的二叉树)</strong></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArrTree</span> &#123;<br>	<span class="hljs-type">char</span> data;<br>	<span class="hljs-type">int</span> left;<br>	<span class="hljs-type">int</span> right;<br>&#125;A1T[<span class="hljs-number">100</span>], A2T[<span class="hljs-number">100</span>];<span class="hljs-comment">//</span><br><span class="hljs-type">bool</span> check[<span class="hljs-number">100</span>];<br><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////构建函数，基于数组的二叉树/////////////////////////</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">构建输入的例子：</span><br><span class="hljs-comment">可以从根结点开始</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">A 1 2</span><br><span class="hljs-comment">B 3 4</span><br><span class="hljs-comment">C 5 -</span><br><span class="hljs-comment">D - -</span><br><span class="hljs-comment">E 6 -</span><br><span class="hljs-comment">G 7 -</span><br><span class="hljs-comment">F - -</span><br><span class="hljs-comment">H - -</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">可以不从根结点开始</span><br><span class="hljs-comment">8</span><br><span class="hljs-comment">G - 4</span><br><span class="hljs-comment">B 7 6</span><br><span class="hljs-comment">F - -</span><br><span class="hljs-comment">A 5 1</span><br><span class="hljs-comment">H - -</span><br><span class="hljs-comment">C 0 -</span><br><span class="hljs-comment">D - -</span><br><span class="hljs-comment">E 2 -</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">AtBuild</span><span class="hljs-params">(ArrTree AT[])</span> </span>&#123;<br>	<span class="hljs-type">int</span> root = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-type">int</span> n;<br>	cin &gt;&gt; n;<br><br>	<span class="hljs-type">char</span> left, right;<br>	<span class="hljs-keyword">if</span> (n) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)check[i] = <span class="hljs-literal">false</span>;<br><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>			cin &gt;&gt; AT[i].data &gt;&gt; left &gt;&gt; right;<br>			<span class="hljs-keyword">if</span> (left != <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>				AT[i].left = left - <span class="hljs-string">&#x27;0&#x27;</span>;<br>				check[AT[i].left] = <span class="hljs-number">1</span>;<br>			&#125;<br>			<span class="hljs-keyword">else</span> &#123;<br>				AT[i].left = <span class="hljs-number">-1</span>;<br>			&#125;<br><br>			<span class="hljs-keyword">if</span> (right != <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>				AT[i].right = right - <span class="hljs-string">&#x27;0&#x27;</span>;<br>				check[AT[i].right] = <span class="hljs-number">1</span>;<br>			&#125;<br>			<span class="hljs-keyword">else</span> &#123;<br>				AT[i].right = <span class="hljs-number">-1</span>;<br>			&#125;<br>		&#125;<br>	<br>        <br>        <span class="hljs-comment">// 没有被任何结点指向的结点即为根节点</span><br>        <span class="hljs-comment">// 例子见下方图片</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>			<span class="hljs-keyword">if</span> (!check[i]) &#123;<br>				root = i;<br>				<span class="hljs-keyword">break</span>;<br>			&#125;<br>		&#125;<br>        <br>	&#125;<br>	<br>	<span class="hljs-keyword">return</span> root;<br>&#125;<br><br><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">//////////////////////////同构检查函数/////////////////////////////</span><br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">Isomorphic</span><span class="hljs-params">(ArrTree* AT1, ArrTree* AT2, <span class="hljs-type">int</span> ATR1, <span class="hljs-type">int</span> ATR2)</span></span>&#123;<br>    <span class="hljs-comment">// 同构返回1，不同构返回2</span><br>    <br>    <br>	<span class="hljs-keyword">if</span> (ATR1 == <span class="hljs-number">-1</span> &amp;&amp; ATR2 == <span class="hljs-number">-1</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>	<span class="hljs-keyword">if</span> ((ATR1 == <span class="hljs-number">-1</span> &amp;&amp; ATR2 == <span class="hljs-number">-1</span>) || ATR1 != <span class="hljs-number">-1</span> &amp;&amp; ATR2 == <span class="hljs-number">-1</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>	<span class="hljs-keyword">if</span> (AT1[ATR1].left == <span class="hljs-number">-1</span> &amp;&amp; AT2[ATR2].left == <span class="hljs-number">-1</span>)<br>		<span class="hljs-keyword">return</span> <span class="hljs-built_in">Isomorphic</span>(AT1, AT2, AT1[ATR1].right, AT2[ATR2].right);<br>	<span class="hljs-keyword">if</span> ((AT1[ATR1].left != <span class="hljs-number">-1</span> &amp;&amp; AT2[ATR2].left != <span class="hljs-number">-1</span>) &amp;&amp; (AT1[AT1[ATR1].left].data == AT2[AT2[ATR2].left].data))<br>		<span class="hljs-keyword">return</span> (<span class="hljs-built_in">Isomorphic</span>(AT1, AT2, AT1[ATR1].left, AT2[ATR2].left)<br>			&amp;&amp; <span class="hljs-built_in">Isomorphic</span>(AT1, AT2, AT1[ATR1].right, AT2[ATR2].right));<br>	<span class="hljs-keyword">else</span><br>		<span class="hljs-built_in">return</span> (<span class="hljs-built_in">Isomorphic</span>(AT1, AT2, AT1[ATR1].left, AT2[ATR2].right)<br>			&amp;&amp; <span class="hljs-built_in">Isomorphic</span>(AT1, AT2, AT1[ATR1].right, AT2[ATR2].left));<br>&#125;<br><br></code></pre></td></tr></table></figure>
<hr>
<blockquote>
<p><strong>没有被任何结点指向的结点即为根节点</strong> 示例</p>
</blockquote>
<p>存在的结点为0 1 3 4</p>
<p>其中 0 3 4 有在数组中出现，而1没有出现，说明下标1的数组中存的即是根结点</p>
<p><img src="/img/page/tree/eg1.webp" alt="没有被任何结点指向的结点即为根节点"></p>
<hr>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历</title>
    <url>/posts/63105.html</url>
    <content><![CDATA[<h1>先序遍历</h1>
<blockquote>
<p>根-&gt;左子树-&gt;右子树</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BiTree::PreOrder</span><span class="hljs-params">(BiNode* B)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (B) &#123;<br>		cout &lt;&lt; B-&gt;data &lt;&lt; endl;<br>		<span class="hljs-built_in">PreOrder</span>(B-&gt;left);<br>		<span class="hljs-built_in">PreOrder</span>(B-&gt;right);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>中序遍历</h1>
<blockquote>
<p>左子树-&gt;根-&gt;右子树</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BiTree::InOrder</span><span class="hljs-params">(BiNode* B)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (B) &#123;<br>		<span class="hljs-built_in">PreOrder</span>(B-&gt;left);<br>		cout &lt;&lt; B-&gt;data &lt;&lt; endl;<br>		<span class="hljs-built_in">PreOrder</span>(B-&gt;right);<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>后序遍历</h1>
<blockquote>
<p>左子树-&gt;右子树-&gt;根</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BiTree::PostOrder</span><span class="hljs-params">(BiNode* B)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (B) &#123;<br>		<span class="hljs-built_in">PreOrder</span>(B-&gt;left);<br>		<span class="hljs-built_in">PreOrder</span>(B-&gt;right);<br>		cout &lt;&lt; B-&gt;data &lt;&lt; endl;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>层序遍历</h1>
<blockquote>
<p>第一层-&gt;第二层-&gt;…-&gt;最后一层</p>
</blockquote>
<p>通常的遍历，结点在访问后便被丢弃</p>
<p>要想做到层序的效果，我们需要在访问一个结点时，要注意存下其左右结点（注意判空）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BiTree::LevelOrder</span><span class="hljs-params">(BiNode* B)</span> </span>&#123;<br>	BiNode* BQ[<span class="hljs-number">100</span>]; 	<span class="hljs-comment">//队列，用于存放结点</span><br>	BiNode* p;			<span class="hljs-comment">//取出的当前队列最前方结点</span><br>	<span class="hljs-type">int</span> l = <span class="hljs-number">0</span>, r = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">if</span>(B) BQ[r++] = B;	<span class="hljs-comment">//判空</span><br><br>	<span class="hljs-keyword">while</span> (l != r) &#123;	<span class="hljs-comment">//跳出循环的条件是队列为空（左右相遇即为空）</span><br>		p = BQ[l++];<br>		cout &lt;&lt; p-&gt;data &lt;&lt; endl;<br>		<span class="hljs-keyword">if</span> (p-&gt;left)BQ[r++] = p-&gt;left;		<span class="hljs-comment">//存入左结点</span><br>		<span class="hljs-keyword">if</span> (p-&gt;right)BQ[r++] = p-&gt;right;	<span class="hljs-comment">//存入右结点</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>一道集众多技巧于一身的题目——《密文游戏》</title>
    <url>/posts/26220.html</url>
    <content><![CDATA[<h3 id="题目描述">题目描述</h3>
<p>小明是你的好朋友，想和你一起玩密文游戏。你俩约定了一个简单的加密解密方案：字符 0 映射字母 A，字符 1 映射字母 B，依次类推，字符 9 映射字母 J。例如：原文1314的密文为BDBE。</p>
<p>昨天，你给小明发了一条信息。由于未知原因，密文到小明那里发生了缺失。今天上课，你俩见面对照了原文和密文，发现密文丢失了若干字符。设原文S的长度为n，密文T的长度为m，小明突发奇想：对照原文，有多少种方案能把密文补全，字母数量和位置不同，都视为不同的方案。作为好友的你,帮他计算一下吧。</p>
<h3 id="输入格式">输入格式</h3>
<blockquote>
<p>第一行，原文S，长度为n(2≤n≤2000)。<br>
第二行，密文T，长度为m(1≤m ≤ n-1 )。</p>
</blockquote>
<h3 id="输出格式">输出格式</h3>
<blockquote>
<p>一行，所求的方案数。</p>
</blockquote>
<h3 id="样例-1">样例 #1</h3>
<h4 id="样例输入-1">样例输入 #1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1414<br>BE<br></code></pre></td></tr></table></figure>
<h4 id="样例输出-1">样例输出 #1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">3<br></code></pre></td></tr></table></figure>
<h3 id="样例说明">样例说明</h3>
<p>样例中3种补全方案如下。（）中代表所补的密文。<br>
BE(BE)</p>
<p>B(EB)E</p>
<p>(BE)BE</p>
<table>
<thead>
<tr>
<th>代码长度限制</th>
<th>时间限制</th>
<th>内存限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>16KB</td>
<td>1000ms</td>
<td>2MB</td>
</tr>
</tbody>
</table>
<h3 id="分析">分析</h3>
<p>可以看出，本题就是一道方案统计的问题。</p>
<p>一般来说，方案统计的问题也需要借助状态之间的转移，所以我们也总是将这种<strong>方案统计的问题</strong>与<strong>动态规划问题</strong>统称为<strong>DP</strong>，尽管这类问题不涉及最优解。</p>
<p>所以，这个问题我们依旧可以使用之前用来解决动态规划问题的思想，在状态转移的过程中完成对结果方案的统计，即：<strong>定状态，找转移，初始化</strong></p>
<h3 id="定状态">定状态</h3>
<p>对于这个问题，我们可以定义状态：<br>
$$<br>
\begin{vmatrix}<br>
dp[i][j](j\leq i,0\leq i\leq n,0\leq j\leq m) \<br>
n=len(A) \<br>
m=len(B)<br>
\end{vmatrix}<br>
$$<br>
表示$a_1…a_i$与$b_1… b_j$补全匹配的方案数</p>
<h3 id="找转移">找转移</h3>
<p>定义好了状态，来处理状态间的转移。</p>
<p>可以分成两种情况：<br>
$$<br>
dp[i][j] = \begin{cases}<br>
dp[i - 1][j] &amp; a_i \neq b_j\<br>
dp[i - 1][j - 1]+dp[i - 1][j] &amp; a_i = b_j<br>
\end{cases}<br>
$$</p>
<p>转换成代码即为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//遍历从1开始，0的部分交给初始化</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j++)&#123;<br>		<span class="hljs-keyword">if</span>(a[i] != b[j])&#123;<br>			dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>好了，找到转移方程式之后，下面中要的事情就是要规定初始化，不然从头到尾跑完结果就是0。</p>
<p>一种可行的初始化方案是：$dp[i][0]=1(0≤i≤n)$即对于所有A的前缀序列，不使用B中字符，全部自动补全的方案数是1.</p>
<p>加上初始化后：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>	dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>;j &lt;= m;j++)&#123;<br>		<span class="hljs-keyword">if</span>(a[i] != b[j])&#123;<br>			dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="边界判断">边界判断</h3>
<p>在dp的过程中，一些状态是不可能出现的，比如超过原序列长度的译码序列.</p>
<p>还有一种情况，由于译码序列需要全部出现在源码序列中，所以译码序列的剩余长度不能超过原序列的剩余长度。</p>
<p>其实上面的条件分别对应着对b枚举的上下边界：</p>
<p>对于j上界，有：$j\leq min(i,m)$</p>
<p>对于j下界，有：$n-i \leq m-j$即$j\geq m-n+i$</p>
<p>加上边界判断：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>	dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,m - n + i);j &lt;= <span class="hljs-built_in">min</span>(i,m);j++)&#123;<br>		<span class="hljs-keyword">if</span>(a[i] != b[j])&#123;<br>			dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="答案输出">答案输出</h3>
<p>经过一顿状态转移，易知最终的答案为A序列前n项和B序列前m项的匹配方案:<br>
$$<br>
dp[n][m]<br>
$$</p>
<h3 id="完整代码">完整代码</h3>
<p>初始的代码非常简洁：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> n,m;<br><span class="hljs-comment">//产生的情况可能有很大，记得开longlong</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> dp[<span class="hljs-number">2005</span>][<span class="hljs-number">2005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	string a, b;<br>	cin &gt;&gt; a &gt;&gt; b;<br>	n = a.<span class="hljs-built_in">size</span>();<br>	m = b.<span class="hljs-built_in">size</span>();<br>	<br>	<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; i:a)&#123;<br>		i = i - <span class="hljs-string">&#x27;0&#x27;</span> + <span class="hljs-string">&#x27;A&#x27;</span>;<br>	&#125;<br>	<br>	dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>		dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,m - n + i);j &lt;= <span class="hljs-built_in">min</span>(i,m);j++)&#123;<span class="hljs-comment">//注意边界控制 </span><br>			<span class="hljs-keyword">if</span>(a[i - <span class="hljs-number">1</span>] == b[j - <span class="hljs-number">1</span>])&#123;<br>				dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">1</span>][j];<br>			&#125;<span class="hljs-keyword">else</span>&#123;<br>				dp[i][j] = dp[i - <span class="hljs-number">1</span>][j];<br>			&#125;<br>		&#125;<br>	&#125;<br>	<br>	cout &lt;&lt; dp[n][m];<br>&#125;<br><br></code></pre></td></tr></table></figure>
<p>优化<br>
上面虽然解决了题目的核心问题，但是这版代码却是不能够通过的。</p>
<p>最直观的问题就是空间复杂度太高了。还有一些问题就是其可表示的答案范围太小（是的，long long也不够，2000规模的组合结果是非常巨大的数字）</p>
<p>下面就来通过优化算法依次解决这些问题。</p>
<p>为了防止抄袭酿成悲剧，优化部分可能只会展示伪代码。完整的代码会在实验课程时间过后放出。</p>
<h3 id="空间复杂度优化">空间复杂度优化</h3>
<p>从题目时空限制来看：</p>
<table>
<thead>
<tr>
<th>时间限制</th>
<th>内存限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>1000ms</td>
<td>2MB</td>
</tr>
</tbody>
</table>
<p>这道题只给了我们2M的空间。不妨做个粗略的计算，假设这2M的空间全部用来开long long数组，那么我们可以开$2\frac{2^{21}}{8}=2^{18}$  个数组长度。</p>
<p>而我们仅dp数组就开了$2000*2000=4 \times 10^6 \approx2^{22}$个。</p>
<p>因此这空间是妥妥的超限的，所以我们需要优化算法，将空间复杂度优化到规定一下。</p>
<h3 id="滚动数组优化">滚动数组优化</h3>
<p>让我们将目光聚焦到占据最大空间的dp数组上，再次观察一下转移方程式：<br>
$$<br>
dp[i][j] = \begin{cases}<br>
dp[i - 1][j] &amp; a_i \neq b_j\<br>
dp[i - 1][j - 1]+dp[i - 1][j] &amp; a_i = b_j<br>
\end{cases}<br>
$$<br>
经过观察，可以发现，在转移的过程中，本行的数据仅由前一行的数据转移而来！。</p>
<p>也就是说，如果我们想要的答案在最后一行，那么：仅需要保留正在计算的一行和前一行的数据！</p>
<p>因此这个结论，对于空间优化就存在巨大利好，可以知道：dp数组仅需要开2行</p>
<p>这样以来，我们就将空间复杂度从$O(n^2)$降到了$O(n)$了，肯定可以满足题目的空间需求。</p>
<p>接下来的问题就是：如何使用这两行数组呢？</p>
<p>一个可行方法是每次在第1行计算完值后，将这行值复制到第0行，循环往复。</p>
<p>但是还有一种思路是交替使用两行，每次使用完不需要复制，下次切换到另一行进行求解。</p>
<p>实现也非常简单，可以根据奇偶判断当前使用哪一行</p>
<ul>
<li>
<p>当前行：k = i &amp; 1</p>
</li>
<li>
<p>上一行：k ^ 1</p>
</li>
</ul>
<p>改造一下之前的dp过程：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>,k;i &lt;= n;i++)&#123;<br>	k = i &amp; <span class="hljs-number">1</span>;<br>	dp[k][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,m - n + i);j &lt;= <span class="hljs-built_in">min</span>(i,m);j++)&#123;<span class="hljs-comment">//注意边界控制 </span><br>		<span class="hljs-keyword">if</span>(a[i] == b[j])&#123;<br>			dp[k][j] = dp[k ^ <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + dp[k ^ <span class="hljs-number">1</span>][j];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			dp[k][j] = dp[k ^ <span class="hljs-number">1</span>][j];<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>最终答案的获取：<br>
$$<br>
dp[n&amp;1][m]<br>
$$</p>
<h3 id="倒序遍历优化">倒序遍历优化</h3>
<p>你以为优化到两行就达到最优了？当然不是，我们还可以进行更加**的优化，将转移矩阵优化到一维！</p>
<p>如果在进一步观察我们的转移方程式，可以发现<strong>其实对于上一行使用到的项都在j的一边(&lt;=j)</strong>。</p>
<p>因此我们不妨直接在原序列上进行迭代，转移方程为：<br>
$$<br>
dp[i][j] = \begin{cases}<br>
dp[j] &amp; a_i \neq b_j\<br>
dp[j - 1]+dp[j] &amp; a_i = b_j<br>
\end{cases}<br>
$$</p>
<p>当然，这里的$dp[j  - 1]$应该是上一次计算的值，在计算$dp[j]$之前不应该被改变。</p>
<p>所以不妨<strong>倒着枚举j</strong>，这样求解过程就可以准确无误的进行了。</p>
<p>其实将转移压缩到一维，连初始化都变得简单了，代码实现：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;i++)&#123;<br>	<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-built_in">min</span>(i,m);j &gt;= <span class="hljs-built_in">max</span>(<span class="hljs-number">1</span>,m - n + i);j--)&#123;<span class="hljs-comment">//注意边界控制 </span><br>		<span class="hljs-keyword">if</span>(a[i] == b[j])&#123;<br>			dp[j] = dp[j - <span class="hljs-number">1</span>] + dp[j];<br>		&#125;<span class="hljs-keyword">else</span>&#123;<br>			dp[j] = dp[j];<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="大数运算优化">大数运算优化</h3>
<p>好了，解决了空间问题，还要解决精度的问题。由于题目的结果非常巨大，连long long的范围也会超出（其实有数百位）。因此我们需要突破long long的限制，手动实现大整数的加法。</p>
<h3 id="封装高精度运算">封装高精度运算</h3>
<p>为了不改变原有的代码，有一个非常不错的想法就是实现一个大整数的类，在其中重载+和整数赋值。然后将dp的数据类型换成这个类。最后，还要能够打印这个数字。</p>
<p>所以，让我们梳理一下这个类型需要的功能：</p>
<ul>
<li>
<p>同类型对象相加运算符重载</p>
</li>
<li>
<p>整数类型赋值</p>
</li>
<li>
<p>打印输出</p>
</li>
</ul>
<p>好的，让我们来动手实现一下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BigInteger</span>&#123;<br>	<span class="hljs-type">int</span> num[<span class="hljs-number">300</span>];<span class="hljs-comment">//10进制下各位的值（倒序存放，便于进位）</span><br>	<span class="hljs-type">int</span> len;	<span class="hljs-comment">//数字长度</span><br><br>	<span class="hljs-built_in">BigInteger</span>()&#123;<span class="hljs-comment">//长度置零，内容置零 </span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i:num) i = <span class="hljs-number">0</span>;<br>		len = <span class="hljs-number">0</span>;<br>	&#125;<br>	<br>	<span class="hljs-type">int</span> &amp; <span class="hljs-keyword">operator</span>[] (<span class="hljs-type">int</span> idx)&#123;<span class="hljs-comment">//重载[]，便于区取数 </span><br>		<span class="hljs-keyword">return</span> num[idx];<br>	&#125;<br><br>	BigInteger <span class="hljs-keyword">operator</span>+(BigInteger &amp; o)&#123;<br>		BigInteger ans;<br>		<br>		<span class="hljs-comment">//两个序列叠加 </span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++)&#123;<br>			ans[i] = num[i];<br>		&#125;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; o.len;i++)&#123;<br>			ans[i] += o[i];<br>		&#125;<br>		<br>		<span class="hljs-comment">//整理答案进位 </span><br>		ans.len = <span class="hljs-built_in">max</span>(o.len,len);<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; ans.len;i++)&#123;<br>			ans[i + <span class="hljs-number">1</span>] += ans[i] / <span class="hljs-number">10</span>;<br>			ans[i] %= <span class="hljs-number">10</span>;<br>		&#125;<br>		<br>		<span class="hljs-comment">//整理最高位进位 </span><br>		<span class="hljs-keyword">if</span>(ans[ans.len])&#123;<br>			ans.len++;<br>		&#125;<br><br>		<span class="hljs-keyword">return</span> ans;<br>	&#125; <br>	<br>	BigInteger &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">int</span> k)&#123;<br>		<span class="hljs-comment">//倒序拆开赋值 </span><br>		len = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">while</span>(k)&#123;<br>			num[len++] = k % <span class="hljs-number">10</span>;<br>			k /= <span class="hljs-number">10</span>;<br>		&#125;<br>		<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//倒序打印 </span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--)&#123;<br>			cout &lt;&lt; num[i];<br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="高精度压位">高精度压位</h3>
<p>虽然我们使用高精度模拟大数加减解决了精度问题。但是到了上一步还是不能保证题目能够完美通过。</p>
<p>从时间上说，每次大数运算最长可能达到了数百位的运算，这个常数非常大，在$O(n^2)$的算法复杂度下很有可能超时。</p>
<p>从空间上说，每个dp数组元素都有长达500的高精度数位，其实相当于开了一个2000*500的数组，非常有可能爆空间。</p>
<p>所以我们还要进一步优化（相信我铁汁，这是最后一次！！）</p>
<p>考虑到int能表示的数据范围非常大，而只用它来表示0-9确实有很大浪费。所以我们可以采取<strong>高精度压位</strong>的操作。</p>
<p>简单来说，就是让高精度数列中的一位表示更多的位数。一位可以表示<code>0-9</code>，也可以表示<code>0-99</code>，也可以表示<code>0-999</code>。区别仅仅是进位时<code>%10</code>，<code>%100</code>，<code>%1000</code>。于是可以将10换成一个基底变量<code>BASE</code>，这个变量是10的幂，几次幂就是表示了几位。</p>
<p>那么这个<code>BASE</code>选多少合适呢？在int下，最大可以选<code>1000000000</code>（10^9）。因为int最大上限为<code>2.1 * 10 ^ 9</code>。所以选择<code>10 ^ 9 </code>刚好可以保证两个数位相加不会溢出！</p>
<p>对于实现，简单修改下之前的代码即可：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BigInteger</span>&#123;<br>	<span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> BASE = <span class="hljs-number">1000000000</span>;<span class="hljs-comment">//基底</span><br><br>	<span class="hljs-type">int</span> num[<span class="hljs-number">80</span>];<span class="hljs-comment">//1位表示9位了，80位可以表示720位数</span><br>	<span class="hljs-type">int</span> len;	<span class="hljs-comment">//数字长度</span><br><br>	<span class="hljs-built_in">BigInteger</span>() &#123;<span class="hljs-comment">//默认构造函数，长度置零，内容置零 </span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span>&amp; i:num) i = <span class="hljs-number">0</span>;<br>		len = <span class="hljs-number">0</span>;<br>	&#125;<br>	<br>	<span class="hljs-type">int</span> &amp; <span class="hljs-keyword">operator</span>[] (<span class="hljs-type">int</span> idx) &#123;<span class="hljs-comment">//重载[]，便于区取数 </span><br>		<span class="hljs-keyword">return</span> num[idx];<br>	&#125;<br><br>	BigInteger <span class="hljs-keyword">operator</span>+(BigInteger &amp; o) &#123;<br>		BigInteger ans;<br>		<br>		<span class="hljs-comment">//两个序列叠加 </span><br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; len;i++) &#123;<br>			ans[i] = num[i];<br>		&#125;<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; o.len;i++) &#123;<br>			ans[i] += o[i];<br>		&#125;<br>		<br>		<span class="hljs-comment">//整理答案进位 </span><br>		ans.len = <span class="hljs-built_in">max</span>(o.len,len);<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; ans.len;i++) &#123;<br>			ans[i + <span class="hljs-number">1</span>] += ans[i] / BASE ;<br>			ans[i] %= BASE ;<br>		&#125;<br>		<br>		<span class="hljs-comment">//整理最高位进位 </span><br>		<span class="hljs-keyword">if</span>(ans[ans.len]) &#123;<br>			ans.len++;<br>		&#125;<br><br>		<span class="hljs-keyword">return</span> ans;<br>	&#125; <br>	<br>	BigInteger &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">int</span> k) &#123;<br>		<span class="hljs-comment">//倒序拆开赋值 </span><br>		len = <span class="hljs-number">0</span>;<br>		<span class="hljs-keyword">while</span>(k)&#123;<br>			num[len++] = k % BASE ;<br>			k /= BASE ;<br>		&#125;<br>		<span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>	&#125;<br>	<br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span>&#123;<span class="hljs-comment">//倒序打印 </span><br>		<span class="hljs-comment">//第一位直接输出，后续位需要补0够9位</span><br>        cout &lt;&lt; num[len<span class="hljs-number">-1</span>];<br>		<span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = len - <span class="hljs-number">2</span>;i &gt;= <span class="hljs-number">0</span>;i--) &#123;<br>            cout &lt;&lt; <span class="hljs-built_in">setw</span>(<span class="hljs-number">9</span>) &lt;&lt; <span class="hljs-built_in">setfill</span>(<span class="hljs-string">&#x27;0&#x27;</span>) &lt;&lt; num[i]; <span class="hljs-comment">// #include &lt;iomanip&gt;</span><br>		&#125;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>pta</tag>
        <tag>动态规划</tag>
        <tag>高精度</tag>
        <tag>滚动数组</tag>
        <tag>优化</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉搜索树(BST)</title>
    <url>/posts/45841.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h1>性质</h1>
<p>二叉搜索树本质上还是一棵二叉树，其满足以下性质（习惯性定义为）：</p>
<ul>
<li>非空<strong>左子树</strong>的所有<strong>键值小于其根结点</strong>的键值</li>
<li>非空<strong>右子树</strong>的所有<strong>键值大于其根结点</strong>的键值</li>
<li>左右子树都是二叉搜索树</li>
</ul>
<h2 id="基本函数">基本函数</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//从二叉搜索树BST中查找x，返回结点地址</span><br><span class="hljs-function">Poi <span class="hljs-title">Find</span><span class="hljs-params">(ElementType x, BinTree BST)</span></span>;<br><br><span class="hljs-comment">//从二叉搜索树BST中查找最小元素的结点地址</span><br><span class="hljs-function">Poi <span class="hljs-title">FindMin</span><span class="hljs-params">(BinTree BST)</span></span>;<br><br><span class="hljs-comment">//从二叉搜索树BST中查找最大元素结点地址</span><br><span class="hljs-function">Poi <span class="hljs-title">FindMax</span><span class="hljs-params">(BinTree BST)</span></span>;<br><br><span class="hljs-comment">//向二叉搜索树BST插入值为x的结点</span><br><span class="hljs-function">BinTree <span class="hljs-title">Insert</span><span class="hljs-params">(ElementType x, BinTree BST)</span></span>;<br><br><span class="hljs-comment">//向二叉搜索树BST删除值为x的结点</span><br><span class="hljs-function">BinTree <span class="hljs-title">Delete</span><span class="hljs-params">(ElementType x, BinTree BST)</span></span>;<br></code></pre></td></tr></table></figure>
<h2 id="Find">Find</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BiNode* <span class="hljs-title">BiSearchTree::Find</span><span class="hljs-params">(<span class="hljs-type">int</span> x, BiNode* BST)</span></span>&#123;<br>	<span class="hljs-keyword">if</span> (!BST) <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br><br>	<span class="hljs-keyword">if</span> (x &lt; BST-&gt;data) &#123;<br>		<span class="hljs-built_in">Find</span>(x, BST-&gt;left);<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; BST-&gt;data) &#123;<br>		<span class="hljs-built_in">Find</span>(x, BST-&gt;right);<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br>		<span class="hljs-keyword">return</span> BST;<br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="FindMin">FindMin</h2>
<p>最小元素一定在树的最左分支的结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BiNode* <span class="hljs-title">BiSearchTree::FindMin</span><span class="hljs-params">(BiNode* BST)</span></span>&#123;<br>	<span class="hljs-keyword">if</span> (BST) &#123;<br>		<span class="hljs-keyword">if</span> (BST-&gt;left)<span class="hljs-keyword">return</span> <span class="hljs-built_in">FindMin</span>(BST-&gt;left);<br>	&#125;<br>	<span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="FindMax">FindMax</h2>
<p>最大元素一定在树的最右分支的结点</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BiNode* <span class="hljs-title">BiSearchTree::FindMax</span><span class="hljs-params">(BiNode* BST)</span></span>&#123;<br>	<span class="hljs-keyword">if</span> (BST) &#123;<br>		<span class="hljs-keyword">if</span> (BST-&gt;right)<span class="hljs-keyword">return</span> <span class="hljs-built_in">FindMin</span>(BST-&gt;right);<br>	&#125;<br>	<span class="hljs-keyword">return</span> BST;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h2 id="Insert">Insert</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BiNode* <span class="hljs-title">BiSearchTree::Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x, BiNode* BST)</span></span>&#123;<br>	<span class="hljs-keyword">if</span> (BST) &#123;<br>		<span class="hljs-keyword">if</span> (x &lt; BST-&gt;data) &#123;<br>			<span class="hljs-comment">//向左子树</span><br>			BST-&gt;left = <span class="hljs-built_in">Insert</span>(x, BST-&gt;left);<br>		&#125;<br>		<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; BST-&gt;data) &#123;<br>			<span class="hljs-comment">//向右子树</span><br>			BST-&gt;right = <span class="hljs-built_in">Insert</span>(x, BST-&gt;right);<br>		&#125;<br>		<span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-comment">//根即为当前数</span><br>			BST-&gt;cnt++;<br>		&#125;<br>	&#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//构造新节点用于存储</span><br>		BST = <span class="hljs-keyword">new</span> BiNode;<br>		BST-&gt;data = x;<br>		BST-&gt;left = BST-&gt;right = <span class="hljs-literal">nullptr</span>;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="Delete">Delete</h2>
<p>需要考虑<strong>三种情况</strong></p>
<ul>
<li>
<p>要删除的是<strong>叶结点</strong>：直接删除，再修改其父结点指针NULL</p>
</li>
<li>
<p>要删除的结点<strong>只有一个&quot;孩子&quot;</strong>：将其<strong>父结点的指针</strong>指向要删除的&quot;孩子&quot;结点</p>
</li>
<li>
<p>要删除的结点有<strong>左右两棵子树</strong>：用另一结点替代被删除的结点（<strong>右子树的最小元素</strong> 或 <strong>左子树的最大元素</strong>）----- 这样做的好处是：右子树的最小值和左子树的最大值<strong>一定不会有两个</strong>&quot;孩子&quot;的结点</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function">BiNode* <span class="hljs-title">BiSearchTree::Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> x, BiNode* BST)</span></span>&#123;<br>	BiNode* tmp = <span class="hljs-literal">nullptr</span>;<br>	<span class="hljs-keyword">if</span> (!BST) &#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;未找到相应元素&quot;</span> &lt;&lt; endl;<br>	&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &lt; BST-&gt;data) &#123;<br>		BST-&gt;left = <span class="hljs-built_in">Delete</span>(x, BST-&gt;left);<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (x &gt; BST-&gt;data) &#123;<br>		BST-&gt;right = <span class="hljs-built_in">Delete</span>(x, BST-&gt;right);<br>	&#125;<br>	<span class="hljs-keyword">else</span>&#123;<br>		<span class="hljs-keyword">if</span> (BST-&gt;left &amp;&amp; BST-&gt;right) &#123;<br>			tmp = <span class="hljs-built_in">FindMax</span>(BST-&gt;left);<br><br>			BST-&gt;data = tmp-&gt;data;<br>			BST-&gt;left = <span class="hljs-built_in">Delete</span>(BST-&gt;data, BST-&gt;left);<br>            <br>            <span class="hljs-comment">/*这里也可以选择选取右子树最小值</span><br><span class="hljs-comment">            tmp = FindMin(BST-&gt;right);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">			BST-&gt;data = tmp-&gt;data;</span><br><span class="hljs-comment">			BST-&gt;right = Delete(BST-&gt;data, BST-&gt;right);</span><br><span class="hljs-comment">            */</span><br><br>		&#125;<br>		<span class="hljs-keyword">else</span> &#123;<br>			tmp = BST;<br>			<span class="hljs-keyword">if</span> (!BST-&gt;left) &#123;<br>				BST = BST-&gt;left;<br>			&#125;<br>			<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!BST-&gt;right) &#123;<br>				BST = BST-&gt;right;<br>			&#125;<br><br>			<span class="hljs-keyword">delete</span> tmp;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> BST;<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>平衡二叉树(AVLTree)</h1>
<ul>
<li>给定结点数为n的平衡二叉树的最大高度为$log_2n$</li>
</ul>
<p>插入一个新结点后，如果树的平衡结构被破坏</p>
<ul>
<li>被破坏的是右侧结构：称这次插入为<strong>RR插入</strong> 应对这种不平衡的调整称为<strong>RR旋转（右旋）</strong></li>
</ul>
<p>↓插入NOV，Mar右侧结构被破坏，需要进行调整</p>
<p>/!/[/]/(/img/page/tree/AVLRR.wepb)</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>二叉树</tag>
        <tag>二叉搜索树</tag>
        <tag>平衡二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历序列转换</title>
    <url>/posts/57450.html</url>
    <content><![CDATA[<h1>前序中序转后序</h1>
<h2 id="输入-1">输入#1</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">ABEDFCHG<br>CBADEFGH <br></code></pre></td></tr></table></figure>
<h2 id="输出-1">输出#1</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">AEFDBHGC<br></code></pre></td></tr></table></figure>
<p>针对二叉树的</p>
<p>前序遍历，根-&gt;左-&gt;右</p>
<p>中序遍历，左-&gt;根-&gt;右</p>
<p>这两个的特性</p>
<p>我们可以尝试凭借前序遍历的根结点（叶子结点也可以看错左右儿子为空的根）将中序遍历的左右根依次拆分成左右两块，针对左右两块再次递归操作</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">void</span> _find(string InOrderStr, string PreOrderStr)&#123;<br>	<span class="hljs-keyword">if</span> (PreOrderStr.<span class="hljs-built_in">empty</span>())<span class="hljs-keyword">return</span>;<span class="hljs-comment">//针对前序遍历序列（拆分出的序列的）的根结点访问结束</span><br>    <br>    <span class="hljs-type">char</span> root = PreOrderStr[<span class="hljs-number">0</span>];<br>    PreOrderStr.<span class="hljs-built_in">erase</span>(PreOrderStr.<span class="hljs-built_in">begin</span>());<span class="hljs-comment">//根结点取出，作为拆分标识</span><br>    <br>    <span class="hljs-type">int</span> rootidx = InOrderStr.<span class="hljs-built_in">find</span>(root);<br>    <br>    string leftIn = InOrderStr.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,rootidx);		<span class="hljs-comment">//中序左分块</span><br>    string leftPre = PreOrderStr.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>,rootidx);		<span class="hljs-comment">//新前序，内容与中序 左 分块相同</span><br>    <br>    string rightIn = InOrderStr.<span class="hljs-built_in">substr</span>(rootidx + <span class="hljs-number">1</span>);	<span class="hljs-comment">//中序右分块</span><br>    string rightPre = PreOrderStr.<span class="hljs-built_in">substr</span>(rootidx);			<span class="hljs-comment">//新前序，内容与中序 右 分块相同</span><br>    <br>    _find(leftIn,leftPre);	<span class="hljs-comment">//左分块递归</span><br>	_find(rightIn,rightPre);<span class="hljs-comment">//右分块递归</span><br>    <br>    cout &lt;&lt; root;<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<h1>后序中序转前序(和上方概念类似)</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-type">char</span>&gt; st;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	string InOrderStr;<br>	string PreOrderStr;<br>	cin &gt;&gt; InOrderStr &gt;&gt; PreOrderStr;<br>	<br>	_find2(InOrderStr, PreOrderStr);<br>	<span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>()) &#123;<br>		cout &lt;&lt; st.<span class="hljs-built_in">top</span>();<br>		st.<span class="hljs-built_in">pop</span>();<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">void</span> _find2(string InOrderStr, string PostOrderStr)&#123;<br>	<span class="hljs-keyword">if</span> (PostOrderStr.<span class="hljs-built_in">empty</span>())<span class="hljs-keyword">return</span>;<br>	<span class="hljs-type">char</span> root = PostOrderStr[PostOrderStr.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>];<br>	PostOrderStr.<span class="hljs-built_in">pop_back</span>();<br><br>	<span class="hljs-type">int</span> rootidx = InOrderStr.<span class="hljs-built_in">find</span>(root);<br><br>	string leftIn = InOrderStr.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, rootidx);<br>	string leftPost = PostOrderStr.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, rootidx);<br><br>	string rightIn = InOrderStr.<span class="hljs-built_in">substr</span>(rootidx + <span class="hljs-number">1</span>);<br>	string rightPost = PostOrderStr.<span class="hljs-built_in">substr</span>(rootidx);<br><br><br>	_find2(rightIn, rightPost);<br>	_find2(leftIn, leftPost);<br><br>	st.<span class="hljs-built_in">push</span>(root);<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>树</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>图的表示</title>
    <url>/posts/3155.html</url>
    <content><![CDATA[<h1>邻接矩阵实现</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 10001</span><br><span class="hljs-type">int</span> G[MAXN][MAXN], Nv, Ne;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">BuildG</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-type">int</span> u, v, w;<br>	cin &gt;&gt; Nv;<br>	<span class="hljs-comment">/*CreateGraph*/</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Nv; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; Nv; j++) &#123;<br>			G[i][j] = <span class="hljs-number">0</span>;<br>		&#125;<br>	&#125;<br>	cin &gt;&gt; Ne;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; Ne; i++) &#123;<br>		cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>		<span class="hljs-comment">/*InsertEdge*/</span><br>		G[u][v] = w;<br>		G[v][u] = w;<span class="hljs-comment">//针对无向图，双向建边</span><br>	&#125;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>回溯</title>
    <url>/posts/60046.html</url>
    <content><![CDATA[<h1>1</h1>
<h3 id="题目描述">题目描述</h3>
<p>赛场内 <em>n</em> (0&lt;<em>n</em>≤10) 名短跑运动员正在参加百米短跑比赛。赛场外有 <em>m</em> (0&lt;<em>m</em>≤100) 名热心观众，他们每人都对比赛结果作出了 2 个预测。比赛结束后，运动员的名次各不相同，但令人惊奇的是每位观众都猜对了一半。请问这些运动员取得的实际名次是多少？</p>
<p>例如场内有 4 名运动员参加比赛，场外 3 名观众的预测分别为：</p>
<ul>
<li>1 号运动员名次为 1，2 号运动员名次为 3</li>
<li>3 号运动员名次为 1，4 号运动员名次为 4</li>
<li>4 号运动员名次为 2，1 号运动员名次为 3</li>
</ul>
<p>由每人猜对一半推理可知：</p>
<ul>
<li>1 号运动员名次为 4</li>
<li>2 号运动员名次为 3</li>
<li>3 号运动员名次为 1</li>
<li>4 号运动员名次为 2</li>
</ul>
<p>请编写程序，根据观众的预测来推算运动员的实际名次。</p>
<h3 id="输入格式">输入格式</h3>
<blockquote>
<p>两个正整数 <em>n</em> 和 <em>m</em> (运动员人数、观众人数)<br>
随后有 <em>m</em> 行数据，每行包含 4 个整数，为 <em>m</em> 位观众的预测<br>
每行包含的 4 个整数 <em>x</em>1、<em>r</em>1 和 <em>x</em>2、<em>r</em>2 表示该观众的两个预测：<br>
<em>x</em>1 号运动员名次为 <em>r</em>1，<em>x</em>2 号运动员名次为 <em>r</em>2</p>
</blockquote>
<p>说明：</p>
<ul>
<li><em>n</em> 名运行员的编号为从 1 到 <em>n</em> 的正整数，无重号和跳号。</li>
<li><em>n</em> 名运动员的名次为从 1 到 <em>n</em> 的正整数，无并列的情况。</li>
</ul>
<h3 id="输出格式">输出格式</h3>
<blockquote>
<p>若问题无解，则输出 None。<br>
若问题有解，则输出多行数据，每一行表示一个答案，按字典序输出。<br>
每一行包含 <em>n</em> 个整数，分别是 1 ~ <em>n</em> 号运动员取得的实际名次。</p>
</blockquote>
<h3 id="样例-1">样例 #1</h3>
<h4 id="样例输入-1">样例输入 #1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">4 3<br>1 1 2 3<br>3 1 4 4<br>4 2 1 3<br></code></pre></td></tr></table></figure>
<h4 id="样例输出-1">样例输出 #1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">4 3 1 2<br></code></pre></td></tr></table></figure>
<h4 id="样例输入-2">样例输入 #2</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">4 3<br>3 4 2 1<br>4 3 3 2<br>1 4 2 3<br></code></pre></td></tr></table></figure>
<h4 id="样例输出-2">样例输出 #2</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">None<br></code></pre></td></tr></table></figure>
<h4 id="样例输入-3">样例输入 #3</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">4 3<br>2 4 4 1<br>4 2 2 3<br>3 4 1 1<br></code></pre></td></tr></table></figure>
<h4 id="样例输出-3">样例输出 #3</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">1 4 3 2<br>2 3 4 1<br></code></pre></td></tr></table></figure>
<h2 id="AC代码"><strong>AC代码</strong></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> audienceGuess[<span class="hljs-number">101</span>][<span class="hljs-number">5</span>];<span class="hljs-comment">//观众猜测</span><br><span class="hljs-type">bool</span> guessTrue[<span class="hljs-number">11</span>];<span class="hljs-comment">//猜测成立</span><br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> ansSchemes;<span class="hljs-comment">//结果数量 10! = 3628800</span><br><br><span class="hljs-keyword">struct</span> &#123;<br>	<span class="hljs-type">int</span> rank;<br>	<span class="hljs-type">int</span> failNum;<br>	<span class="hljs-type">int</span> guess[<span class="hljs-number">101</span>];<br>&#125;athletes[<span class="hljs-number">11</span>];<br><span class="hljs-comment">//rank[]为每个方案运动员的名次，sum保存每个方案运动员名次的十进制整数 </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Guess</span> &#123;<br>	<span class="hljs-type">int</span> rank[<span class="hljs-number">11</span>];<br>&#125; ans[<span class="hljs-number">368800</span>];<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">checkRank</span><span class="hljs-params">(<span class="hljs-type">int</span> index, <span class="hljs-type">int</span> rank)</span> </span>&#123;<br>	<span class="hljs-type">int</span> i;<br>	<span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; athletes[index].failNum; i++) &#123;<br>		<span class="hljs-keyword">if</span> (athletes[index].guess[i] == rank) &#123;<br>			<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fix</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<span class="hljs-comment">//回溯法把剩余没有名次的运动员根据约束条件补齐 </span><br>	<span class="hljs-keyword">if</span> (index &gt; n) &#123;<br>		<span class="hljs-comment">//保存其中一种结果</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>			ans[ansSchemes].rank[i] = athletes[i].rank;<br>		&#125;<br>		ansSchemes++;<br>	&#125;<br>	<span class="hljs-keyword">else</span> &#123;<br><br>		<span class="hljs-comment">//当前运动员没有名次</span><br>		<span class="hljs-keyword">if</span> (athletes[index].rank == <span class="hljs-number">0</span>) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>				<span class="hljs-keyword">if</span> (!guessTrue[i] &amp;&amp; <span class="hljs-built_in">checkRank</span>(index, i)) &#123;<span class="hljs-comment">//名次i未被标记且第index个运动员的名次i不在假名次中 </span><br>					athletes[index].rank = i;<br>					guessTrue[i] = <span class="hljs-literal">true</span>;<br>					<span class="hljs-built_in">fix</span>(index + <span class="hljs-number">1</span>);<br>					athletes[index].rank = <span class="hljs-number">0</span>;<br>					guessTrue[i] = <span class="hljs-literal">false</span>;<br>				&#125;<br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">else</span> &#123;<br>			<span class="hljs-built_in">fix</span>(index + <span class="hljs-number">1</span>);<br>		&#125;<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">//嗨嗨嗨，回溯</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">assump</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (index &lt; m) &#123;<br>		<span class="hljs-comment">//index号预测情况模拟</span><br>		<span class="hljs-comment">//真 假 i = 0</span><br>		<span class="hljs-comment">//假 真 i = 1</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;<br>			<span class="hljs-comment">//两位观众预测相同</span><br>			<span class="hljs-type">int</span> gsI1 = <span class="hljs-number">1</span> + <span class="hljs-number">2</span> * i, gsI2 = <span class="hljs-number">2</span> + <span class="hljs-number">2</span> * i;<br>			<span class="hljs-type">int</span> gsI3 = <span class="hljs-number">3</span> - <span class="hljs-number">2</span> * i, gsI4 = <span class="hljs-number">4</span> - <span class="hljs-number">2</span> * i;<br>			<span class="hljs-keyword">if</span> (athletes[audienceGuess[index][gsI1]].rank == audienceGuess[index][gsI2]) &#123;<br>				<span class="hljs-keyword">if</span> (<span class="hljs-built_in">checkRank</span>(audienceGuess[index][gsI3], audienceGuess[index][gsI4])) &#123;<br>					athletes[audienceGuess[index][gsI3]].<br>						guess[athletes[audienceGuess[index][gsI3]].failNum] = audienceGuess[index][gsI4];<br>					athletes[audienceGuess[index][gsI3]].failNum++;<br><br>					<span class="hljs-built_in">assump</span>(index + <span class="hljs-number">1</span>);<br><br>					athletes[audienceGuess[index][gsI3]].<br>						guess[athletes[audienceGuess[index][gsI3]].failNum] = <span class="hljs-number">0</span>;<br>					athletes[audienceGuess[index][gsI3]].failNum--;<br>				&#125;<br>				<span class="hljs-keyword">else</span> &#123;<br>					<span class="hljs-built_in">assump</span>(index + <span class="hljs-number">1</span>);<br>				&#125;<br>			&#125;<br>			<span class="hljs-comment">//两位观众预测不相同</span><br>			<span class="hljs-keyword">else</span> &#123;<br>				<span class="hljs-keyword">if</span> ((!guessTrue[audienceGuess[index][gsI2]] &amp;&amp;<br>					athletes[audienceGuess[index][gsI1]].rank == <span class="hljs-number">0</span> &amp;&amp;<br>					<span class="hljs-built_in">checkRank</span>(audienceGuess[index][gsI1], audienceGuess[index][gsI2])<br>					) || index == <span class="hljs-number">0</span>) &#123;<br>					athletes[audienceGuess[index][gsI1]].rank = audienceGuess[index][gsI2];<br>					guessTrue[audienceGuess[index][gsI2]] = <span class="hljs-literal">true</span>;<br>					athletes[audienceGuess[index][gsI3]].<br>						guess[athletes[audienceGuess[index][gsI3]].failNum] = audienceGuess[index][gsI4];<br>					athletes[audienceGuess[index][gsI3]].failNum++;<br><br>					<span class="hljs-built_in">assump</span>(index + <span class="hljs-number">1</span>);<br><br>					athletes[audienceGuess[index][gsI1]].rank = <span class="hljs-number">0</span>;<br>					guessTrue[audienceGuess[index][gsI2]] = <span class="hljs-literal">false</span>;<br>					athletes[audienceGuess[index][gsI3]].<br>						guess[athletes[audienceGuess[index][gsI3]].failNum] = <span class="hljs-number">0</span>;<br>					athletes[audienceGuess[index][gsI3]].failNum--;<br>				&#125;<br>			&#125;<br>		&#125;<br>	&#125;<br>	<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (index == m) &#123;<br>		<span class="hljs-built_in">fix</span>(<span class="hljs-number">1</span>);<br>	&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">const</span> Guess&amp; a, <span class="hljs-type">const</span> Guess&amp; b)</span> </span>&#123;<br>	<span class="hljs-type">int</span> suma = <span class="hljs-number">0</span>, sumb = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		suma = suma * <span class="hljs-number">10</span> + a.rank[i];<br>		sumb = sumb * <span class="hljs-number">10</span> + b.rank[i];<br>	&#125;<br>	<span class="hljs-keyword">return</span> suma &gt; sumb;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>	cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>	cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>	cin &gt;&gt; n &gt;&gt; m;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>		cin &gt;&gt; audienceGuess[i][<span class="hljs-number">1</span>] &gt;&gt; audienceGuess[i][<span class="hljs-number">2</span>] &gt;&gt; audienceGuess[i][<span class="hljs-number">3</span>] &gt;&gt; audienceGuess[i][<span class="hljs-number">4</span>];<br>	&#125;<br><br>	<span class="hljs-built_in">assump</span>(<span class="hljs-number">0</span>);<br><br>	<span class="hljs-keyword">if</span> (ansSchemes == <span class="hljs-number">0</span>) &#123;<br>		cout &lt;&lt; <span class="hljs-string">&quot;None&quot;</span>;<br>		<span class="hljs-keyword">goto</span> end;<br>	&#125;<br><br>	<span class="hljs-built_in">sort</span>(ans, ans + ansSchemes - <span class="hljs-number">1</span>, cmp);<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; ansSchemes; i++) &#123;<br>		<span class="hljs-keyword">if</span> (i)cout &lt;&lt; endl;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>			<span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>)cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>			cout &lt;&lt; ans[i].rank[j];<br>		&#125;<br>	&#125;<br>end:;<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>回溯</tag>
        <tag>pta</tag>
      </tags>
  </entry>
  <entry>
    <title>KEIL各版本镜像和STM的KeilPACK包下载</title>
    <url>/posts/18265.html</url>
    <content><![CDATA[<p>转载自<a href="https://mp.weixin.qq.com/s/hsxQFctG3LXMvCpxcRWE2g">芯片之家</a><br>
本文章单纯用作记录方便文件丢失时自己下载</p>
<p><a href="http://www.abov.co.kr/data/mds/PACK/ABOV.CM0_DFP.1.0.0.pack">http://www.abov.co.kr/data/mds/PACK/ABOV.CM0_DFP.1.0.0.pack</a><br>
<a href="http://www.abov.co.kr/data/mds/PACK/ABOV.CM0_DFP.1.0.0.pack">http://www.abov.co.kr/data/mds/PACK/ABOV.CM0_DFP.1.0.0.pack</a><br>
<a href="http://www.abov.co.kr/data/mds/PACK/ABOV.CM3_DFP.1.2.1.pack">http://www.abov.co.kr/data/mds/PACK/ABOV.CM3_DFP.1.2.1.pack</a><br>
<a href="http://www.abov.co.kr/data/mds/PACK/ABOV.CM3_DFP.1.2.1.pack">http://www.abov.co.kr/data/mds/PACK/ABOV.CM3_DFP.1.2.1.pack</a><br>
<a href="http://s3.asia.ambiqmicro.com/pack/AmbiqMicro.Apollo_DFP.0.9.2.pack">http://s3.asia.ambiqmicro.com/pack/AmbiqMicro.Apollo_DFP.0.9.2.pack</a><br>
<a href="http://s3.asia.ambiqmicro.com/pack/AmbiqMicro.Apollo_DFP.0.9.2.pack">http://s3.asia.ambiqmicro.com/pack/AmbiqMicro.Apollo_DFP.0.9.2.pack</a><br>
<a href="http://download.analog.com/tools/EZBoards/CM302x/Releases/AnalogDevices.ADuCM302x_DFP.1.0.3.pack">http://download.analog.com/tools/EZBoards/CM302x/Releases/AnalogDevices.ADuCM302x_DFP.1.0.3.pack</a><br>
<a href="http://download.analog.com/tools/EZBoards/CM302x/Releases/AnalogDevices.ADuCM302x_DFP.1.0.3.pack">http://download.analog.com/tools/EZBoards/CM302x/Releases/AnalogDevices.ADuCM302x_DFP.1.0.3.pack</a><br>
<a href="http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM320_DFP.1.1.0.pack">http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM320_DFP.1.1.0.pack</a><br>
<a href="http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM320_DFP.1.1.0.pack">http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM320_DFP.1.1.0.pack</a><br>
<a href="http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM36x_DFP.1.0.1.pack">http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM36x_DFP.1.0.1.pack</a><br>
<a href="http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM36x_DFP.1.0.1.pack">http://www.analog.com/media/en/engineering-tools/design-tools/AnalogDevices.ADuCM36x_DFP.1.0.1.pack</a><br>
<a href="http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M0_DFP.1.0.0.pack">http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M0_DFP.1.0.0.pack</a><br>
<a href="http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M0_DFP.1.0.0.pack">http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M0_DFP.1.0.0.pack</a><br>
<a href="http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M4_DFP.1.0.0.pack">http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M4_DFP.1.0.0.pack</a><br>
<a href="http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M4_DFP.1.0.0.pack">http://download.analog.com/tools/EZBoards/CM41x/Releases/AnalogDevices.CM41x_M4_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedClient.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedClient.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedClient.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedClient.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.mbedTLS.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.5.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.5.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.5.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.5.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.4.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.3.20.4.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS.3.20.4.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-Driver_Validation.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-Driver_Validation.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-Driver_Validation.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-Driver_Validation.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-Driver_Validation.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-Driver_Validation.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-RTOS_Validation.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-RTOS_Validation.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-RTOS_Validation.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-RTOS_Validation.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-RTOS_Validation.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.CMSIS-RTOS_Validation.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.minar.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.minar.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.minar.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/ARM.minar.1.0.0.pack</a><br>
<a href="http://clarinox.com/cmsis/Clarinox.Wireless.2.0.1.pack">http://clarinox.com/cmsis/Clarinox.Wireless.2.0.1.pack</a><br>
<a href="http://clarinox.com/cmsis/Clarinox.Wireless.2.0.1.pack">http://clarinox.com/cmsis/Clarinox.Wireless.2.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Hitex.CMSIS_RTOS_Tutorial.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Hitex.CMSIS_RTOS_Tutorial.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Hitex.CMSIS_RTOS_Tutorial.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Hitex.CMSIS_RTOS_Tutorial.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Hitex.CMSIS_RTOS_Tutorial.1.0.3.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Hitex.CMSIS_RTOS_Tutorial.1.0.3.pack</a><br>
<a href="http://mcu.holtek.com.tw/pack/Holtek.HT32_DFP.1.0.5.pack">http://mcu.holtek.com.tw/pack/Holtek.HT32_DFP.1.0.5.pack</a><br>
<a href="http://mcu.holtek.com.tw/pack/Holtek.HT32_DFP.1.0.5.pack">http://mcu.holtek.com.tw/pack/Holtek.HT32_DFP.1.0.5.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC1000_DFP.2.5.1.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC1000_DFP.2.5.1.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC1000_DFP.2.5.1.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC1000_DFP.2.5.1.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC4000_DFP.2.7.1.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC4000_DFP.2.7.1.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC4000_DFP.2.7.1.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.XMC4000_DFP.2.7.1.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE984x_DFP.1.0.0.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE984x_DFP.1.0.0.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE984x_DFP.1.0.0.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE984x_DFP.1.0.0.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE986x_DFP.1.2.4.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE986x_DFP.1.2.4.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE986x_DFP.1.2.4.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE986x_DFP.1.2.4.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE987x_DFP.1.2.4.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE987x_DFP.1.2.4.pack</a><br>
<a href="http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE987x_DFP.1.2.4.pack">http://dave.infineon.com/Libraries/CMSIS_PACK/Infineon.TLE987x_DFP.1.2.4.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.CM4xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.CM4xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.CM4xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.CM4xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.CM4xx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.CM4xx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.V2M-MPS2_CMx_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-C_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-C_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-C_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-C_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD09_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD09_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD09_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD09_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD10_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD10_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD10_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD10_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD10_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD10_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD11_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD11_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD11_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD11_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD20_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD20_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD20_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD20_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD20_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD20_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMD21_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA0_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA0_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA0_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA0_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA1_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA1_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA1_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMDA1_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMHA1_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMHA1_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMHA1_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMHA1_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-L_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMR21_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMR21_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMR21_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMR21_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMR21_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMR21_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.3.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.3.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.3.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.3.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-ESV7_SFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM3_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM4_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-E_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMG_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAMG_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-S_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.SAM-V_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K00_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K00_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K00_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K00_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K20_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K30_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K30_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K30_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K30_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K40_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K40_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K40_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K40_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K50_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K50_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K50_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K50_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K50_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K50_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K60_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K70_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K70_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K70_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K70_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K70_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K70_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K80_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K80_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K80_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K80_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KEAxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KVxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_SDK_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWPR1516_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWPR1516_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWPR1516_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWPR1516_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWPR1516_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWPR1516_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.BulbBoard_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.BulbBoard_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.BulbBoard_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.BulbBoard_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Jansson.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Jansson.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Jansson.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Jansson.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ARM_Compiler.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1200_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1200_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1200_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1200_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCB1500_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCBNUC1xx_BSP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCBNUC1xx_BSP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCBNUC1xx_BSP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MCBNUC1xx_BSP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.7.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.6.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.6.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.6.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.5.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.5.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.4.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.4.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.3.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.3.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.MDK-Middleware.5.1.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ZEUS_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ZEUS_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ZEUS_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.ZEUS_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX6_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.4.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.4.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.4.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.4.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.iMX7D_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_K10_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KExx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.12.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.12.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.12.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.12.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.11.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.11.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.10.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.10.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.8.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.8.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.7.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.7.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KLxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KMxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KSxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KSxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KSxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KSxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.Kinetis_KWxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1100_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1200_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1200_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1200_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1200_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1300_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1300_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1300_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1300_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1300_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1300_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1500_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1700_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC1800_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4000_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.7.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.7.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.7.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.7.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC4300_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC54000_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LPC800_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M3_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M4_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M4_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M4_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.R-IN32M4_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32Gxxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32GGxxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32HGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32HGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32HGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32HGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32HGxxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32HGxxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32JG1B_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32JG1B_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32JG1B_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32JG1B_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32LGxxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32PG1B_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32PG1B_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32PG1B_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32PG1B_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32TGxxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32WGxxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EFM32ZGxxx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32HG_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32HG_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32HG_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32HG_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32LG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32LG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32LG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32LG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32LG_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32LG_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32WG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32WG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32WG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32WG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32WG_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EZR32WG_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM0plus_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM0plus_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM0plus_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM0plus_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM0plus_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM0plus_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3Basic_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3Basic_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3Basic_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3Basic_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3Basic_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3Basic_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3HighPerformance_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3LowPower_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3LowPower_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3LowPower_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3LowPower_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3LowPower_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3LowPower_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3UltraLowLeak_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3UltraLowLeak_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3UltraLowLeak_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3UltraLowLeak_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3UltraLowLeak_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM3UltraLowLeak_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.5.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.5.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.5.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.5.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.FM4_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.1.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.1.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG-1_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG-1_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG-1_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STBlueNRG-1_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32NUCLEO_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.0.3.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.0.3.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F0xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.0.5.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.0.5.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.0.4.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.0.4.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F1xx_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.9.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.1.0.7.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.1.0.7.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.1.0.6.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.1.0.6.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.1.0.4.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F2xx_DFP.1.0.4.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F3xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.15.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.15.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.11.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.11.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.10.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.10.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.9.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.9.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.8.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.8.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.7.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.7.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.8.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.8.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.7.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.7.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.6.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.6.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.5.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F4xx_DFP.1.0.5.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.14.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.14.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.8.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.8.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.7.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.7.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.2.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32F7xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32H7xx_DFP.2.8.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32H7xx_DFP.2.8.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32H7xx_DFP.2.7.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32H7xx_DFP.2.7.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32H7xx_DFP.2.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32H7xx_DFP.2.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.2.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.2.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.6.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.6.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.5.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.5.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L0xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.0.2.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.0.2.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.0.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.0.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L1xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.2.6.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.2.6.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32L4xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32G0xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32G0xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32G4xx_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32G4xx_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32W1xx_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32W1xx_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32WBxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32WBxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32WLxx_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32WLxx_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32MP1xx_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.STM32MP1xx_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM3S_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM3S_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM3S_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM3S_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM3S_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM3S_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM4F_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM4F_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM4F_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.LM4F_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TM4C_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TM4C_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TM4C_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TM4C_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TM4C_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TM4C_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM0_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.4.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.4.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.3.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.3.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM3_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.2.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.2.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.1.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.1.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TMPM4_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TXZ3_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TXZ3_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TXZ3_DFP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.TXZ3_DFP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EB_TMPM369FDFG_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EB_TMPM369FDFG_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EB_TMPM369FDFG_BSP.1.0.0.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/Keil.EB_TMPM369FDFG_BSP.1.0.0.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/lwIP.lwIP.1.4.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/lwIP.lwIP.1.4.1.pack</a><br>
<a href="https://sadevicepacksprodus.blob.core.windows.net/pack/lwIP.lwIP.1.4.1.pack">https://sadevicepacksprodus.blob.core.windows.net/pack/lwIP.lwIP.1.4.1.pack</a><br>
<a href="http://download.labs.mediatek.com/MediaTek.MTx.4.1.0.pack">http://download.labs.mediatek.com/MediaTek.MTx.4.1.0.pack</a><br>
<a href="http://download.labs.mediatek.com/MediaTek.MTx.4.1.0.pack">http://download.labs.mediatek.com/MediaTek.MTx.4.1.0.pack</a><br>
<a href="http://www.micrium.com/cmsis-pack/Micrium.RTOS.1.0.0.pack">http://www.micrium.com/cmsis-pack/Micrium.RTOS.1.0.0.pack</a><br>
<a href="http://www.micrium.com/cmsis-pack/Micrium.RTOS.1.0.0.pack">http://www.micrium.com/cmsis-pack/Micrium.RTOS.1.0.0.pack</a><br>
<a href="http://www.actel-ip.com/repositories/CMSIS-Pack/Microsemi.M2Sxxx.1.0.61.pack">http://www.actel-ip.com/repositories/CMSIS-Pack/Microsemi.M2Sxxx.1.0.61.pack</a><br>
<a href="http://www.actel-ip.com/repositories/CMSIS-Pack/Microsemi.M2Sxxx.1.0.61.pack">http://www.actel-ip.com/repositories/CMSIS-Pack/Microsemi.M2Sxxx.1.0.61.pack</a><br>
<a href="http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x031_DFP.1.0.0.pack">http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x031_DFP.1.0.0.pack</a><br>
<a href="http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x031_DFP.1.0.0.pack">http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x031_DFP.1.0.0.pack</a><br>
<a href="http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x103_DFP.1.1.0.pack">http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x103_DFP.1.1.0.pack</a><br>
<a href="http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x103_DFP.1.1.0.pack">http://www.mindmotion.com.cn/Download/MDK_KEIL/MindMotion.MM32x103_DFP.1.1.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_ANT/NordicSemiconductor.nRF_ANT.2.0.1-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_ANT/NordicSemiconductor.nRF_ANT.2.0.1-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_ANT/NordicSemiconductor.nRF_ANT.2.0.1-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_ANT/NordicSemiconductor.nRF_ANT.2.0.1-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_BLE/NordicSemiconductor.nRF_BLE.4.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_BLE/NordicSemiconductor.nRF_BLE.4.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_BLE/NordicSemiconductor.nRF_BLE.4.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_BLE/NordicSemiconductor.nRF_BLE.4.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_Common/NordicSemiconductor.nRF_SoftDevice_Common.2.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_Common/NordicSemiconductor.nRF_SoftDevice_Common.2.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_Common/NordicSemiconductor.nRF_SoftDevice_Common.2.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_Common/NordicSemiconductor.nRF_SoftDevice_Common.2.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S210/NordicSemiconductor.nRF_SoftDevice_S210.5.0.2.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S210/NordicSemiconductor.nRF_SoftDevice_S210.5.0.2.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S210/NordicSemiconductor.nRF_SoftDevice_S210.5.0.2.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S210/NordicSemiconductor.nRF_SoftDevice_S210.5.0.2.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S310/NordicSemiconductor.nRF_SoftDevice_S310.3.0.1.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S310/NordicSemiconductor.nRF_SoftDevice_S310.3.0.1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S310/NordicSemiconductor.nRF_SoftDevice_S310.3.0.1.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S310/NordicSemiconductor.nRF_SoftDevice_S310.3.0.1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S110/NordicSemiconductor.nRF_SoftDevice_S110.8.0.3.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S110/NordicSemiconductor.nRF_SoftDevice_S110.8.0.3.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S110/NordicSemiconductor.nRF_SoftDevice_S110.8.0.3.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S110/NordicSemiconductor.nRF_SoftDevice_S110.8.0.3.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S120/NordicSemiconductor.nRF_SoftDevice_S120.2.1.1.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S120/NordicSemiconductor.nRF_SoftDevice_S120.2.1.1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S120/NordicSemiconductor.nRF_SoftDevice_S120.2.1.1.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S120/NordicSemiconductor.nRF_SoftDevice_S120.2.1.1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S130/NordicSemiconductor.nRF_SoftDevice_S130.2.0.0-7.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S130/NordicSemiconductor.nRF_SoftDevice_S130.2.0.0-7.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S130/NordicSemiconductor.nRF_SoftDevice_S130.2.0.0-7.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S130/NordicSemiconductor.nRF_SoftDevice_S130.2.0.0-7.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S132/NordicSemiconductor.nRF_SoftDevice_S132.2.0.0-7.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S132/NordicSemiconductor.nRF_SoftDevice_S132.2.0.0-7.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S132/NordicSemiconductor.nRF_SoftDevice_S132.2.0.0-7.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S132/NordicSemiconductor.nRF_SoftDevice_S132.2.0.0-7.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S1xx_iot/NordicSemiconductor.nRF_SoftDevice_S1xx_iot.0.0.1-prototype2.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S1xx_iot/NordicSemiconductor.nRF_SoftDevice_S1xx_iot.0.0.1-prototype2.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S1xx_iot/NordicSemiconductor.nRF_SoftDevice_S1xx_iot.0.0.1-prototype2.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_SoftDevice_S1xx_iot/NordicSemiconductor.nRF_SoftDevice_S1xx_iot.0.0.1-prototype2.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers_External/NordicSemiconductor.nRF_Drivers_External.1.2.1-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers_External/NordicSemiconductor.nRF_Drivers_External.1.2.1-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers_External/NordicSemiconductor.nRF_Drivers_External.1.2.1-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers_External/NordicSemiconductor.nRF_Drivers_External.1.2.1-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers/NordicSemiconductor.nRF_Drivers.4.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers/NordicSemiconductor.nRF_Drivers.4.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers/NordicSemiconductor.nRF_Drivers.4.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Drivers/NordicSemiconductor.nRF_Drivers.4.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Examples/NordicSemiconductor.nRF_IoT_Examples.0.8.0.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Examples/NordicSemiconductor.nRF_IoT_Examples.0.8.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Examples/NordicSemiconductor.nRF_IoT_Examples.0.8.0.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Examples/NordicSemiconductor.nRF_IoT_Examples.0.8.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Examples/NordicSemiconductor.nRF_Examples.11.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Examples/NordicSemiconductor.nRF_Examples.11.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Examples/NordicSemiconductor.nRF_Examples.11.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Examples/NordicSemiconductor.nRF_Examples.11.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_NFC/NordicSemiconductor.nRF_NFC.1.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_NFC/NordicSemiconductor.nRF_NFC.1.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_NFC/NordicSemiconductor.nRF_NFC.1.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_NFC/NordicSemiconductor.nRF_NFC.1.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF5_SDK/pieces/nRF_DeviceFamilyPack/NordicSemiconductor.nRF_DeviceFamilyPack.8.11.1.pack">http://developer.nordicsemi.com/nRF5_SDK/pieces/nRF_DeviceFamilyPack/NordicSemiconductor.nRF_DeviceFamilyPack.8.11.1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF5_SDK/pieces/nRF_DeviceFamilyPack/NordicSemiconductor.nRF_DeviceFamilyPack.8.11.1.pack">http://developer.nordicsemi.com/nRF5_SDK/pieces/nRF_DeviceFamilyPack/NordicSemiconductor.nRF_DeviceFamilyPack.8.11.1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_RTX/NordicSemiconductor.nRF_RTX.4.74.0-9.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_RTX/NordicSemiconductor.nRF_RTX.4.74.0-9.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_RTX/NordicSemiconductor.nRF_RTX.4.74.0-9.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_RTX/NordicSemiconductor.nRF_RTX.4.74.0-9.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_lwIP/NordicSemiconductor.nRF_IoT_lwIP.1.4.1-1.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_lwIP/NordicSemiconductor.nRF_IoT_lwIP.1.4.1-1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_lwIP/NordicSemiconductor.nRF_IoT_lwIP.1.4.1-1.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_lwIP/NordicSemiconductor.nRF_IoT_lwIP.1.4.1-1.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Properitary_RF/NordicSemiconductor.nRF_Properitary_RF.1.2.3-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Properitary_RF/NordicSemiconductor.nRF_Properitary_RF.1.2.3-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Properitary_RF/NordicSemiconductor.nRF_Properitary_RF.1.2.3-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Properitary_RF/NordicSemiconductor.nRF_Properitary_RF.1.2.3-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Serialization/NordicSemiconductor.nRF_Serialization.2.1.0.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Serialization/NordicSemiconductor.nRF_Serialization.2.1.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Serialization/NordicSemiconductor.nRF_Serialization.2.1.0.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Serialization/NordicSemiconductor.nRF_Serialization.2.1.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Libraries/NordicSemiconductor.nRF_IoT_Libraries.0.8.0.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Libraries/NordicSemiconductor.nRF_IoT_Libraries.0.8.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Libraries/NordicSemiconductor.nRF_IoT_Libraries.0.8.0.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_IoT_Libraries/NordicSemiconductor.nRF_IoT_Libraries.0.8.0.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Libraries/NordicSemiconductor.nRF_Libraries.4.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Libraries/NordicSemiconductor.nRF_Libraries.4.0.0-2.alpha.pack</a><br>
<a href="http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Libraries/NordicSemiconductor.nRF_Libraries.4.0.0-2.alpha.pack">http://developer.nordicsemi.com/nRF51_SDK/pieces/nRF_Libraries/NordicSemiconductor.nRF_Libraries.4.0.0-2.alpha.pack</a><br>
<a href="http://www.nuvoton.com/hq/enu/Documents/KEILSoftwarePack/Nuvoton.NuMicro_DFP.1.0.9.pack">http://www.nuvoton.com/hq/enu/Documents/KEILSoftwarePack/Nuvoton.NuMicro_DFP.1.0.9.pack</a><br>
<a href="http://www.nuvoton.com/hq/enu/Documents/KEILSoftwarePack/Nuvoton.NuMicro_DFP.1.0.9.pack">http://www.nuvoton.com/hq/enu/Documents/KEILSoftwarePack/Nuvoton.NuMicro_DFP.1.0.9.pack</a><br>
<a href="http://www.oryx-embedded.com/download/pack/Oryx-Embedded.Middleware.1.7.4.pack">http://www.oryx-embedded.com/download/pack/Oryx-Embedded.Middleware.1.7.4.pack</a><br>
<a href="http://www.oryx-embedded.com/download/pack/Oryx-Embedded.Middleware.1.7.4.pack">http://www.oryx-embedded.com/download/pack/Oryx-Embedded.Middleware.1.7.4.pack</a><br>
<a href="https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SharkSSL-Lite.38.9.8.pack">https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SharkSSL-Lite.38.9.8.pack</a><br>
<a href="https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SharkSSL-Lite.38.9.8.pack">https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SharkSSL-Lite.38.9.8.pack</a><br>
<a href="https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SMQ.38.9.8.pack">https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SMQ.38.9.8.pack</a><br>
<a href="https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SMQ.38.9.8.pack">https://realtimelogic.com/downloads/arm-mdk-packs/RealTimeLogic.SMQ.38.9.8.pack</a><br>
<a href="http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F1_DFP.1.0.1.pack">http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F1_DFP.1.0.1.pack</a><br>
<a href="http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F1_DFP.1.0.1.pack">http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F1_DFP.1.0.1.pack</a><br>
<a href="http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F2_DFP.1.2.3.pack">http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F2_DFP.1.2.3.pack</a><br>
<a href="http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F2_DFP.1.2.3.pack">http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F2_DFP.1.2.3.pack</a><br>
<a href="http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F7_DFP.1.2.2.pack">http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F7_DFP.1.2.2.pack</a><br>
<a href="http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F7_DFP.1.2.2.pack">http://liveupdate.sonix.com.tw/sonix/develop_tool/MCU/DFP/SONiX.SN32F7_DFP.1.2.2.pack</a><br>
<a href="http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/mspkeil/latest/exports/TexasInstruments.MSP432P4xx_DFP.2.2.1.pack">http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/mspkeil/latest/exports/TexasInstruments.MSP432P4xx_DFP.2.2.1.pack</a><br>
<a href="http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/mspkeil/latest/exports/TexasInstruments.MSP432P4xx_DFP.2.2.1.pack">http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/mspkeil/latest/exports/TexasInstruments.MSP432P4xx_DFP.2.2.1.pack</a><br>
<a href="http://www.ixys.com/Zilog/packs/Zilog.ZNEO32_DFP.1.0.2.pack">http://www.ixys.com/Zilog/packs/Zilog.ZNEO32_DFP.1.0.2.pack</a><br>
<a href="http://www.ixys.com/Zilog/packs/Zilog.ZNEO32_DFP.1.0.2.pack">http://www.ixys.com/Zilog/packs/Zilog.ZNEO32_DFP.1.0.2.pack</a><br>
我们提供的链接中，STM32F1系列并没有写2.2.0版本，如果想下载2.2.0版本怎么办呢，直接修改链接中版本号就行了，其它链接也是同理，Enjoy！</p>
<p><img src="/img/page/stm32/%E8%8A%AF%E7%89%87%E4%B9%8B%E5%AE%B6.png" alt=""></p>
<p><a href="https://mp.weixin.qq.com/s/hsxQFctG3LXMvCpxcRWE2g">芯片之家</a></p>
]]></content>
      <categories>
        <category>KEIL</category>
      </categories>
  </entry>
  <entry>
    <title>单调栈</title>
    <url>/posts/33564.html</url>
    <content><![CDATA[<blockquote>
<p>帮助群友<s>♂♂</s>(AC)，就是帮助自己</p>
</blockquote>
<h1>单调栈</h1>
<ul>
<li>单调递增栈：单调递增栈就是从<strong>栈底到栈顶</strong>数据是<strong>从小到大</strong>（一般）</li>
<li>单调递减栈：单调递减栈就是从<strong>栈底到栈顶</strong>数据是<strong>从大到小</strong>
<ul>
<li>（我们只会用到单调栈的一端）</li>
</ul>
</li>
</ul>
<blockquote>
<p>E.g: 单调递增栈加入数据：：：堆栈实现（<strong>栈顶为最大值</strong>）</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">stack&lt;<span class="hljs-type">int</span>&gt; st;<br><br><span class="hljs-comment">//栈顶为最大值</span><br><span class="hljs-type">void</span> _add(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; x) &#123;<br>	<span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">empty</span>() || st.<span class="hljs-built_in">top</span>() &gt; x)&#123;<br>		st.<span class="hljs-built_in">push</span>(x);<br>	&#125;<br>	<span class="hljs-keyword">else</span>&#123;<br>		stack&lt;<span class="hljs-type">int</span>&gt; tmp;<br>		<span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; st.<span class="hljs-built_in">top</span>() &lt; x) &#123;<br>			tmp.<span class="hljs-built_in">push</span>(st.<span class="hljs-built_in">top</span>()); st.<span class="hljs-built_in">pop</span>();<br>		&#125;<br>		st.<span class="hljs-built_in">push</span>(x);<br>		<br>		<span class="hljs-keyword">while</span> (!tmp.<span class="hljs-built_in">empty</span>()) &#123;<br>			st.<span class="hljs-built_in">push</span>(tmp.<span class="hljs-built_in">top</span>()); tmp.<span class="hljs-built_in">pop</span>();<br>		&#125;<br>	&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>E.g: 单调递增栈加入数据：：：动态数组实现（<strong>(๑•̀ㅂ•́)و✧</strong>）用数组实现的真的还是单调栈吗</p>
<p><s>可恶！已经完全不是堆栈的样子了</s></p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br><br><span class="hljs-comment">//数组最后一项为最大值</span><br><span class="hljs-type">void</span> _add(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; x) &#123;<br>    <span class="hljs-comment">//找小于等于</span><br>	v.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x, greater&lt;&gt;()), x);<br>&#125;<br><br><span class="hljs-comment">//数组第一项为最大值</span><br><span class="hljs-type">void</span> _add(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; x) &#123;<br>    <span class="hljs-comment">//找大于等于</span><br>	v.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">lower_bound</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), x), x);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其实堆栈没必要一定是堆栈**(๑•̀ㅂ•́)و✧**</p>
<hr>
<p>然后对于洛谷的这一题 <a href="https://www.luogu.com.cn/problem/P1823">[COI2007] Patrik 音乐会的等待</a></p>
<h2 id="题目描述">题目描述</h2>
<p>$n$ 个人正在排队进入一个音乐会。人们等得很无聊，于是他们开始转来转去，想在队伍里寻找自己的熟人。</p>
<p>队列中任意两个人 $a$ 和 $b$，如果他们是相邻或他们之间没有人比 $a$ 或 $b$ 高，那么他们是可以互相看得见的。</p>
<p>写一个程序计算出有多少对人可以互相看见。</p>
<h2 id="输入格式">输入格式</h2>
<p>输入的第一行包含一个整数 $n$，表示队伍中共有 $n$ 个人。</p>
<p>接下来的 $n$ 行中，每行包含一个整数，表示人的高度，以毫微米(等于 $10^{-9}$ 米)为单位，这些高度分别表示队伍中人的身高。</p>
<h2 id="输出格式">输出格式</h2>
<p>输出仅有一行，包含一个数 $s$，表示队伍中共有 $s$ 对人可以互相看见。</p>
<h2 id="样例-1">样例 #1</h2>
<h3 id="样例输入-1">样例输入 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">7 <br>2 <br>4 <br>1 <br>2 <br>2 <br>5 <br>1<br></code></pre></td></tr></table></figure>
<h3 id="样例输出-1">样例输出 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">10<br></code></pre></td></tr></table></figure>
<h2 id="提示">提示</h2>
<h4 id="数据规模与约定">数据规模与约定</h4>
<p>对于全部的测试点，保证 $1\le$ 每个人的高度 $&lt; 2^{31}$，$1 \le n \le 5\times 10^5$。</p>
<p>完全适合用单调栈(的概念)去做</p>
<p>上代码解释</p>
<blockquote>
<p>注：这不是AC代码，它没有对大数据的情况进行处理，会卡TLE(代码运行超时)</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//请牢记，这是一个  单调递减栈</span><br><span class="hljs-comment">//下方的ac样例也是  单调递减栈</span><br>stack&lt;<span class="hljs-type">int</span>&gt; st;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> _add(<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; x) &#123;<br>	<span class="hljs-type">int</span> lap = <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">//栈非空 新值大于栈顶值（不符合我们单调递减栈的要求）</span><br>    <br>    <span class="hljs-comment">/*1号循环*/</span><br>    <span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; x &gt;= st.<span class="hljs-built_in">top</span>()) &#123;<br>        <span class="hljs-comment">//如果新值和栈顶值相同（相邻且身高一样的情况），更新答案(ans)</span><br>		<span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">top</span>() == x)lap++;<br>        <br>        <span class="hljs-comment">//新值是满足大于等于栈顶值的，更新答案(ans)</span><br>		ans++;<br>        <br>        <span class="hljs-comment">//通过循环依次pop出小于等于新值的栈顶元素(维护单调递减栈)</span><br>		st.<span class="hljs-built_in">pop</span>();<br>	&#125;<br><br>    <span class="hljs-comment">//当经过上方的</span><br>    <span class="hljs-comment">//		“循环依次pop出小于等于新值的栈顶元素” 操作之后</span><br>    <span class="hljs-comment">//如果堆栈中还有元素存在，此元素一定比插入的新值要大</span><br>    <span class="hljs-comment">//而且我们pop出了 小于等于新值栈顶元素 ，此元素和新值是可以互相看见的</span><br>    <span class="hljs-comment">//↑↑↑这里即是满足了：	“如果他们之间没有人比a或b高”</span><br>	<span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>())ans++;<br>	<br>    <br>    <span class="hljs-comment">//针对重复的元素，要重新填会到堆栈中</span><br>    <span class="hljs-comment">//也就是因为该操作，对于大数据的身高重复情况非常不友好</span><br>    <span class="hljs-comment">//当堆栈相邻元素皆为一样身高时</span><br>    <span class="hljs-comment">//每次/*1号循环*/都会将重复的元素先pop再push</span><br>    <span class="hljs-comment">//这是一种累赘且耗时的操作，所以下方的AC代码以此优化</span><br>    <span class="hljs-comment">/*2号循环*/</span><span class="hljs-keyword">while</span> (lap--)st.<span class="hljs-built_in">push</span>(x);		<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>	cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>	cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <br>	<span class="hljs-type">int</span> n;<br>	cin &gt;&gt; n;<br>	<span class="hljs-type">int</span> x;<br>	<span class="hljs-keyword">while</span> (n--) &#123;<br>		cin &gt;&gt; x;<br>		_add(x);<br>	&#125;<br>	cout &lt;&lt; ans;<br>    <br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<blockquote>
<p>注：这是AC代码</p>
<p>能过大数据的一大原因就在</p>
<blockquote>
<p>代码第35行<code>pa.second += st.top().second;</code>的操作</p>
<p>将相邻的同类数据给合并起来，而不是像上方的80分代码那样~~<strong>先pop再push</strong>~~</p>
</blockquote>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//pair:  first 高度   second 高度的出现次数</span><br>stack&lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; &gt; st;<br><br><span class="hljs-comment">//你需要铭记的是：</span><br><span class="hljs-comment">//		我们这里维护的是一个 单调递减 的堆栈，栈顶为最小值</span><br><span class="hljs-comment">//		针对新插入元素大于栈顶的情况，需要进行处理，并对答案进行更新(ans)</span><br><br><span class="hljs-comment">//n的数量级可以达到5 * 1e5 当这些人高度都一样时，结果为：124999750000</span><br><span class="hljs-comment">//爆int了！！！(っ °Д °;)っ</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>	cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>	cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <br>	<span class="hljs-type">int</span> n;<br>	cin &gt;&gt; n;<br>	<span class="hljs-type">int</span> x;<br>	<span class="hljs-keyword">while</span> (n--) &#123;<br>		cin &gt;&gt; x;<br>		<span class="hljs-function">pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">pa</span><span class="hljs-params">(x, <span class="hljs-number">1ll</span>)</span></span>;<br>        <br>        <span class="hljs-comment">//栈非空 新值大于栈顶值（不符合我们单调递减栈的要求）</span><br>		<span class="hljs-keyword">while</span> (!st.<span class="hljs-built_in">empty</span>() &amp;&amp; x &gt;= st.<span class="hljs-built_in">top</span>().first) &#123;<br>			<span class="hljs-comment">/*新值和栈顶值相同（相邻且身高一样的情况）*/</span><br>			<span class="hljs-keyword">if</span> (st.<span class="hljs-built_in">top</span>().first == x)&#123;<br>                <br>			<span class="hljs-comment">//因为在while循环中，我们会通过循环依次pop出小于等于新值的栈顶元素</span><br>			<span class="hljs-comment">//所以这里是对相同元素的一个统计，这样的优化避免了上方的TLE(代码运行超时)情况</span><br>				pa.second += st.<span class="hljs-built_in">top</span>().second;<br>			&#125;<br>            <br>            <span class="hljs-comment">//新值是满足大于等于栈顶值的，更新答案(ans)</span><br>			ans += st.<span class="hljs-built_in">top</span>().second;<br><br>			st.<span class="hljs-built_in">pop</span>();<span class="hljs-comment">//通过循环依次pop出小于等于新值的栈顶元素(维护单调递减栈)</span><br>		&#125;<br><br>        <br>        <span class="hljs-comment">//当经过上方的</span><br>        <span class="hljs-comment">//		“循环依次pop出小于等于新值的栈顶元素” 操作之后</span><br>        <span class="hljs-comment">//如果堆栈中还有元素存在，此元素一定比插入的新值要大</span><br>        <span class="hljs-comment">//而且我们pop出了 小于等于新值栈顶元素 ，此元素和新值是可以互相看见的</span><br>        <span class="hljs-comment">//↑↑↑这里即是满足了：	“如果他们之间没有人比a或b高”</span><br>		<span class="hljs-keyword">if</span> (!st.<span class="hljs-built_in">empty</span>())ans++;<br><br>        <span class="hljs-comment">//将新值加入到堆栈中</span><br>		st.<span class="hljs-built_in">push</span>(pa);<br>	&#125;<br><br>	cout &lt;&lt; ans;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>栈</tag>
      </tags>
  </entry>
  <entry>
    <title>拓扑排序</title>
    <url>/posts/22315.html</url>
    <content><![CDATA[<h1>什么是拓扑排序？</h1>
<p>在图论中，<strong>拓扑排序</strong>（Topological Sorting）是一个有向无环图（DAG, Directed Acyclic Graph）的所有顶点的线性序列。且该序列必须满足下面两个条件：</p>
<p>每个顶点出现且只出现一次</p>
<p>若存在一条从顶点 A 到顶点 B 的路径，那么在序列中顶点 A 出现在顶点 B 的前面</p>
<p><strong>有向无环图（DAG）才有拓扑排序，非DAG图没有拓扑排序一说</strong></p>
<h1>拓扑排序有什么用？</h1>
<blockquote>
<p><strong>它可以用来解决形如：</strong></p>
<p>有n个任务需要完成，每个任务有一个耗时和一个前置任务列表，前置任务完成后才能开始当前任务。求完成所有任务的最短时间</p>
<p>这样<strong>具有依赖关系</strong>的问题</p>
</blockquote>
<h1>拓扑排序的实现</h1>
<blockquote>
<p>实现拓扑排序的关键就是<strong>维护一个入度为0的顶点的集合</strong></p>
</blockquote>
<hr>
<h2 id="Eg：P1113-杂务">Eg：<a href="https://www.luogu.com.cn/problem/P1113">P1113 杂务</a></h2>
<h2 id="题目描述">题目描述</h2>
<p><code>John</code>的农场在给奶牛挤奶前有很多杂务要完成，每一项杂务都需要一定的时间来完成它。比如：他们要将奶牛集合起来，将他们赶进牛棚，为奶牛清洗乳房以及一些其它工作。尽早将所有杂务完成是必要的，因为这样才有更多时间挤出更多的牛奶。当然，有些杂务必须在另一些杂务完成的情况下才能进行。比如：只有将奶牛赶进牛棚才能开始为它清洗乳房，还有在未给奶牛清洗乳房之前不能挤奶。我们把这些工作称为完成本项工作的准备工作。至少有一项杂务不要求有准备工作，这个可以最早着手完成的工作，标记为杂务$1$。<code>John</code>有需要完成的$n$个杂务的清单，并且这份清单是有一定顺序的，杂务$k(k&gt;1)$的准备工作只可能在杂务$1$至$k-1$中。</p>
<p>写一个程序从$1$到$n$读入每个杂务的工作说明。计算出所有杂务都被完成的最短时间。当然互相没有关系的杂务可以同时工作，并且，你可以假定<code>John</code>的农场有足够多的工人来同时完成任意多项任务。</p>
<h2 id="输入格式">输入格式</h2>
<p>第1行：一个整数$n$，必须完成的杂务的数目($3 \le n \le 10,000$)；</p>
<p>第$2$至$(n+1)$行： 共有$n$行，每行有一些用$1$个空格隔开的整数，分别表示：</p>
<p>* 工作序号($1$至$n$,在输入文件中是有序的)；</p>
<p>* 完成工作所需要的时间$len(1 \le len \le 100)$；</p>
<p>* 一些必须完成的准备工作，总数不超过$100$个，由一个数字$0$结束。有些杂务没有需要准备的工作只描述一个单独的$0$，整个输入文件中不会出现多余的空格。</p>
<h2 id="输出格式">输出格式</h2>
<p>一个整数，表示完成所有杂务所需的最短时间。</p>
<h2 id="样例-1">样例 #1</h2>
<h3 id="样例输入-1">样例输入 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">7<br>1 5 0<br>2 2 1 0<br>3 3 2 0<br>4 6 1 0<br>5 1 2 4 0<br>6 8 2 4 0<br>7 4 3 5 6 0<br></code></pre></td></tr></table></figure>
<h3 id="样例输出-1">样例输出 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">23<br></code></pre></td></tr></table></figure>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 10001		</span><br>vector&lt;<span class="hljs-type">int</span>&gt; followUpTask[MAXN];<span class="hljs-comment">//邻接表存图，对于下标为i的节点，其存储的为i的后续任务</span><br><span class="hljs-type">int</span> inDrgee[MAXN];	<span class="hljs-comment">//入度</span><br><span class="hljs-type">int</span> timeNeed[MAXN];	<span class="hljs-comment">//任务所需时间</span><br><span class="hljs-type">int</span> timeOver[MAXN];	<span class="hljs-comment">//第i号任务总耗时</span><br><br><span class="hljs-type">int</span> n;	<span class="hljs-comment">//图的节点数</span><br><br><span class="hljs-type">int</span> _max(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>	<span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">tuopu</span><span class="hljs-params">()</span> </span>&#123;<br>	queue&lt;<span class="hljs-type">int</span>&gt; q;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		<span class="hljs-keyword">if</span> (!inDrgee[i]) &#123;	<span class="hljs-comment">//统计入度为0的点，放入队列，准备拓扑排序</span><br>			q.<span class="hljs-built_in">push</span>(i);<br>			timeOver[i] = timeNeed[i];	<span class="hljs-comment">//对于入度为0的点，它的总耗时就是自己任务所需时间</span><br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>		<span class="hljs-comment">//pre 存取的是入度为0的点(任务可以独立进行，或任务前置任务已经完成的任务点)</span><br>		<span class="hljs-type">int</span> pre = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br><br>		<span class="hljs-comment">//对于pre的后续任务，我们进行一个遍历</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; crt : followUpTask[pre]) &#123;<br>			<span class="hljs-comment">//后续任务的耗时等于：max( 后续任务耗时 , pre任务+后续任务耗时 )</span><br>			timeOver[crt] = _max(timeOver[crt], timeOver[pre] + timeNeed[crt]);<br><br>			<span class="hljs-comment">//如果该后续任务的所有前置均完成（入度为0），将该后续任务放入队列，作为拓扑排序的新节点</span><br>			<span class="hljs-keyword">if</span> (!--inDrgee[crt])q.<span class="hljs-built_in">push</span>(crt);<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		ans = _max(ans, timeOver[i]);<br>	&#125;<br><br><br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>	cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>	cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>	cin &gt;&gt; n;<br><br>	<span class="hljs-type">int</span> idx;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		cin &gt;&gt; idx &gt;&gt; timeNeed[i];<br><br>		<span class="hljs-type">int</span> preTask;<br>		cin &gt;&gt; preTask;<br>		<span class="hljs-keyword">while</span> (preTask) &#123;<br>			<span class="hljs-comment">//反向存储</span><br>			<span class="hljs-comment">//对于前置任务preTask，存储其后续任务</span><br>			followUpTask[preTask].<span class="hljs-built_in">push_back</span>(i);<br>			inDrgee[i]++;	<span class="hljs-comment">//后续任务入度加一</span><br>			cin &gt;&gt; preTask;<br>		&#125;<br>	&#125;<br><br>	cout &lt;&lt; <span class="hljs-built_in">tuopu</span>();<br>	<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<p>自问自答：</p>
<blockquote>
<p>Q：为什么是取max？</p>
<p>A：因为任务是<strong>不限制人数的可并行完成模式</strong>，在已经计算出每个任务所需耗时后，所有任务中的最大耗时即为完成所有任务的最短耗时</p>
</blockquote>
<h2 id="利用拓扑排序思维的不建图实现（硬性要求1号任务不需要前置任务）">利用拓扑排序思维的不建图实现（硬性要求1号任务不需要前置任务）</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-type">int</span> itime[<span class="hljs-number">10001</span>];<br><span class="hljs-type">int</span> finishTime[<span class="hljs-number">10001</span>];<br>vector&lt;<span class="hljs-type">int</span>&gt; prepare[<span class="hljs-number">10001</span>];<br><br><span class="hljs-type">int</span> _max(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b) &#123;<br>	<span class="hljs-keyword">return</span> a &gt; b ? a : b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>	cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>	cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>	<span class="hljs-type">int</span> n;<br>	cin &gt;&gt; n;<br><br>	<span class="hljs-type">int</span> idx;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		cin &gt;&gt; idx &gt;&gt; itime[i];<br><br>		<span class="hljs-type">int</span> prepa;<br>		cin &gt;&gt; prepa;<br>		<span class="hljs-keyword">while</span> (prepa) &#123;<br>			prepare[i].<span class="hljs-built_in">push_back</span>(prepa);<br>			cin &gt;&gt; prepa;<br>		&#125;<br>	&#125;<br><br><br>	<span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>	finishTime[<span class="hljs-number">1</span>] = itime[<span class="hljs-number">1</span>];<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; t : prepare[i]) &#123;<br>			finishTime[i] = _max(finishTime[i], finishTime[t] + itime[i]);<br>		&#125;<br>		ans = _max(ans, finishTime[i]);<br>	&#125;<br><br>	cout &lt;&lt; ans;<br>	<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>大杂烩</title>
    <url>/posts/3817.html</url>
    <content><![CDATA[<p>[TOC]</p>
<h1>动态规划</h1>
<h2 id="P8784-蓝桥杯-2022-省-B-积木画"><a href="https://www.luogu.com.cn/problem/P8784">P8784 蓝桥杯 2022 省 B  - 积木画 </a></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">int</span> f[<span class="hljs-number">6</span>] = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span> &#125;;<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    cin &gt;&gt; n;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">4</span>; i &lt;= n; i++) &#123;<br>        f[i] = (<span class="hljs-number">2</span> * f[i<span class="hljs-number">-1</span>] % mod + f[i<span class="hljs-number">-3</span>] % mod) % mod;<br>    &#125;<br><br>    cout &lt;&lt; f[n];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="P8786-蓝桥杯-2022-省-B-李白打酒加强版"><a href="https://www.luogu.com.cn/problem/P8786">P8786 蓝桥杯 2022 省 B -  李白打酒加强版 </a></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> mod = <span class="hljs-number">1000000007</span>;<br><br><span class="hljs-type">int</span> jiu[<span class="hljs-number">201</span>][<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    jiu[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][<span class="hljs-number">2</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//i 位置</span><br>    <span class="hljs-comment">//j 花</span><br>    <span class="hljs-comment">//k 酒</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n + m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt;= m; k++) &#123;<br>                <span class="hljs-keyword">if</span> (jiu[i][j][k]) &#123;<br>                    <span class="hljs-keyword">if</span> (k &gt; <span class="hljs-number">0</span>) jiu[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>] = (jiu[i + <span class="hljs-number">1</span>][j + <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>] + jiu[i][j][k]) % mod;<br>                    <span class="hljs-keyword">if</span> (k &lt;= m/<span class="hljs-number">2</span>) jiu[i + <span class="hljs-number">1</span>][j][k * <span class="hljs-number">2</span>] = (jiu[i + <span class="hljs-number">1</span>][j][k * <span class="hljs-number">2</span>] + jiu[i][j][k]) % mod;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; jiu[n + m][m][<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="P2758-编辑距离"><a href="https://www.luogu.com.cn/problem/P2758">P2758 编辑距离 </a></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> ans;<br><span class="hljs-comment">//dp[i][j]</span><br><br><span class="hljs-comment">//A的前i位转换为 B前j位的最小步骤</span><br><span class="hljs-type">int</span> dp[<span class="hljs-number">2001</span>][<span class="hljs-number">2001</span>];<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Ⅰ：删除一个字符；</span><br><span class="hljs-comment">Ⅱ：插入一个字符；</span><br><span class="hljs-comment">Ⅲ：将一个字符改为另一个字符。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <br>    string str1, str2;<br>    cin &gt;&gt; str1 &gt;&gt; str2;<br>    n = str1.<span class="hljs-built_in">size</span>();<br>    m = str2.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = i;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        dp[<span class="hljs-number">0</span>][i] = i;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">if</span> (str1[i - <span class="hljs-number">1</span>] == str2[j - <span class="hljs-number">1</span>]) &#123;<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <br>		<span class="hljs-comment">//分别对应i情况：			Ⅰ			Ⅱ				Ⅲ</span><br>            dp[i][j] = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">min</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]), dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; dp[n][m];<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="P1077-NOIP2012-普及组-摆花"><a href="https://www.luogu.com.cn/problem/P1077">P1077 NOIP2012 普及组 摆花</a></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">int</span> dp[<span class="hljs-number">101</span>][<span class="hljs-number">101</span>];<br><span class="hljs-type">int</span> n, m;<br><span class="hljs-type">int</span> a[<span class="hljs-number">101</span>];<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//m盆</span><br>    <span class="hljs-comment">//n种花</span><br>    <span class="hljs-comment">//第i种不能超ai盆</span><br>    <span class="hljs-comment">//同一种放一起，标号从小到大排</span><br>    cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; a[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num = <span class="hljs-number">0</span>; num &lt;= <span class="hljs-built_in">min</span>(j,a[i]); num++) &#123;<br>                <span class="hljs-comment">//状态方程</span><br>                <span class="hljs-comment">//i种j盆的方法数 = 自身 + i-1种j-a_i选择盆的方法数</span><br>                dp[i][j] = (dp[i][j] + dp[i - <span class="hljs-number">1</span>][j - num])%<span class="hljs-number">1000007</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    cout &lt;&lt; dp[n][m];<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="P4933-大师-洛谷-计算机科学教育新生态-luogu-com-cn"><a href="https://www.luogu.com.cn/problem/P4933">P4933 大师 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> mod 998244353</span><br><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> h[<span class="hljs-number">1001</span>];<br><span class="hljs-type">int</span> dp[<span class="hljs-number">1001</span>][<span class="hljs-number">40001</span>];<br><br><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        cin &gt;&gt; h[i];<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ans++;<span class="hljs-comment">//每个数自身也是一个答案</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i - <span class="hljs-number">1</span>; j; j--) &#123;<br>            dp[i][h[i] - h[j] + <span class="hljs-number">20000</span>] += dp[j][h[i] - h[j] + <span class="hljs-number">20000</span>] + <span class="hljs-number">1</span>;<br>            dp[i][h[i] - h[j] + <span class="hljs-number">20000</span>] %= mod;<br>            ans += dp[j][h[i] - h[j] + <span class="hljs-number">20000</span>] + <span class="hljs-number">1</span>;<br>            ans %= mod;<br>        &#125;<br>    &#125;<br><br><br>    cout &lt;&lt; ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br> <br></code></pre></td></tr></table></figure>
<h2 id="P1091-NOIP2004-提高组-合唱队形">[P1091 <a href="https://www.luogu.com.cn/problem/P1091">NOIP2004 提高组 合唱队形 </a></h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br>    cout.<span class="hljs-built_in">tie</span>(<span class="hljs-number">0</span>);<br><br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        cin &gt;&gt; h[i];<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (h[j] &lt; h[i]) &#123;<br>                dp[i][<span class="hljs-number">0</span>] = <span class="hljs-built_in">max</span>(dp[i][<span class="hljs-number">0</span>], dp[j][<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        dp[i][<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span> (h[j] &gt; h[i]) &#123;<br>                dp[i][<span class="hljs-number">1</span>] = <span class="hljs-built_in">max</span>(dp[i][<span class="hljs-number">1</span>], <span class="hljs-built_in">max</span>(dp[j][<span class="hljs-number">0</span>], dp[j][<span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        ans = <span class="hljs-built_in">max</span>(ans, <span class="hljs-built_in">max</span>(dp[i][<span class="hljs-number">0</span>], dp[i][<span class="hljs-number">1</span>]));<br>    &#125;<br><br>    cout &lt;&lt; n - ans;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1>树</h1>
<h2 id="前序后序，确定中序数量">前序后序，确定中序数量</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//子结点为1的节点数目为n</span><br><span class="hljs-comment">//2^n即为答案</span><br><br>string pre, post;<br>cin &gt;&gt; pre &gt;&gt; post;<br><br><span class="hljs-type">int</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; pre.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>; i++) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; post.<span class="hljs-built_in">size</span>(); j++) &#123;<br>        <span class="hljs-keyword">if</span> (pre[i] == post[j] &amp;&amp; pre[i + <span class="hljs-number">1</span>] == post[j - <span class="hljs-number">1</span>])<br>            b++;<br>    &#125;<br>&#125;<br><br>cout &lt;&lt; (<span class="hljs-number">1</span> &lt;&lt; b);<br></code></pre></td></tr></table></figure>
<h1>堆栈</h1>
<h2 id="小顶堆">小顶堆</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> MAXN = <span class="hljs-number">1314</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> MINH = <span class="hljs-number">-1314</span>;<br><span class="hljs-type">int</span> minS[MAXN], _size;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Creat</span><span class="hljs-params">()</span> </span>&#123;<br>	_size = <span class="hljs-number">0</span>;<br>	minS[<span class="hljs-number">0</span>] = MINH;<span class="hljs-comment">//设置岗哨</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>	<span class="hljs-type">int</span> i;<br>    <span class="hljs-comment">//岗哨的作用体现，岗哨是比插入数据都小的，不会导致越界</span><br>	<span class="hljs-keyword">for</span> (i = ++_size; minS[i / <span class="hljs-number">2</span>] &gt; x; i /= <span class="hljs-number">2</span>)<br>		minS[i] = minS[i / <span class="hljs-number">2</span>];<br>	minS[i] = x;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-type">int</span> n, m;<br>    <span class="hljs-comment">//一个有n个数据的堆，m次查找</span><br>	cin &gt;&gt; n &gt;&gt; m;<br>	<span class="hljs-built_in">Creat</span>();<br>	<span class="hljs-type">int</span> x;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>		cin &gt;&gt; x;<br>		<span class="hljs-built_in">Insert</span>(x);<br>	&#125;<br>	<br>    <span class="hljs-comment">//m次查找，根据查找所给下标，返回其到根的路径</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>		cin &gt;&gt; x;<br>		cout &lt;&lt; minS[x];<br>		<span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">1</span>) &#123;<br>			x /= <span class="hljs-number">2</span>;<br>			cout &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt;  minS[x];<br>		&#125;<br>		cout &lt;&lt; endl;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>tree</tag>
        <tag>动态规划</tag>
        <tag>stack</tag>
      </tags>
  </entry>
  <entry>
    <title>夸父计划--源空间</title>
    <url>/posts/34206.html</url>
    <content><![CDATA[<h1><strong>夸父计划–源空间</strong></h1>
<p>“咱这才刚建成空间站，‘夸父’计划就要施行了？”</p>
<p>“国家做了这个决定，肯定是有原因的，出行前不是说了吗，太阳活动骤减，地面部分探测数据无法进行演算，需要进行近距离观测。这事关乎着我们人类的安危！”</p>
<p>“先别闲聊了！你们俩赶紧过来帮忙！'夸父’不行了！”</p>
<p>空间站上，陈星、赵庆方、陈建成正紧张有序地推进着’夸父’号的在轨建设，听到陈建成的声音，其余两人迅速赶到了连接枢纽，看到闪着红光的’夸父’，陈星、赵庆方两两相视，“他果然又不看说明书”。</p>
<p>&quot; ‘夸父’ 是在自动校验电路，这时候你不要靠近&quot;陈星朝陈建成传话到。</p>
<p>&quot;那，那为什么连个燃料装填口都没有啊！“陈建成敲了敲一旁的&quot;夸父”，隔着面罩都能猜到，他现在又是一脸懵逼的表情。</p>
<p>&quot;不要拿常识去猜测，'夸父’用的是曲率引擎，能源预填充。不过我实在没想到，国家竟然已经完成了1级曲率引擎的理论实际转向，明明曲率泡很难维持……航行速度理论可达1c(1光速)，虽然眼前这个是半成品，但那3%效率也够我们在三个小时之内到达水星了&quot;赵庆方想把右手扶在下巴上，结果摸到了圆圆的面罩，无奈只能叉起了手。</p>
<p>&quot;给，操作手册。&quot;随着陈星将面前的文件划出，陈建成的面罩显示出了《'夸父’计划操作手册》。</p>
<p>&quot;其实我有看的，嗯，当时考的时候我可是满分！&quot;陈建成抬了抬自己的头，双手叉在腰上。</p>
<p>&quot;噗，确实，在座的都是。赶紧完成外部构件吧，电路校验完就准备安装，国家是希望我们越早完成越好的。&quot;陈星一边传话，一边忙着手里的工作。</p>
<p>……建设工作一共持续了3个月……</p>
<p>“通知地面部分，这里是天宫，我们已经完成了’夸父’的在轨建设，比预计时间节约了4小时35分钟”</p>
<p>“这里是北京航天飞行控制中心指挥大厅，你们做的很棒，根据上级指示，可以进行’夸父’计划。”</p>
<p>“陈星收到！”，“陈建成收到！”，&quot;赵庆方收到！&quot;伴随着短暂的数据确认，航天员们穿上了印有’夸父’字样的航天服，这件衣服相比于以往的航天服，显得苗条了不少……</p>
<p>“通知地面部分，飞船即将加速脱离天链卫星通信范围，我们将严格按照计划抛出中继通信点。”</p>
<p>(2小时52分钟后)&quot;通知地面部分，我等已避开水星重力场范围，‘夸父’已成功定轨！舰载‘逐日号’已准备完毕，请求开始探测。&quot;赵庆方紧盯着屏幕上的距离标识，等候地面下一步指示。</p>
<p>“可以进行探测。”，“夸父收到”，“通知，已解除逐日号固定构件。”……</p>
<p>&quot;陈建成，一定要避免太阳引力场捕获！非必要前提下禁止使用人工操作！&quot;陈星非常严肃的向陈建成传话道。&quot;好嘞老大！得令！&quot;陈建成的眼神变得犀利起来。</p>
<p>“赵庆方，我们已到达预定位置，可以与’夸父’同步。”</p>
<p>&quot;指令收到，已开始远望观测同步，数据获取中。&quot;赵庆方紧张的盯着面前的屏幕，上面显现出了1%的字样。</p>
<p>(43小时后)“通知地面部分，数据已经收集完毕，已通知‘逐日’号返航。”</p>
<p>“收到，你们辛苦了，请依照计划，抛出空间锚点后返航。”</p>
<p>&quot;嘿咻，老大，终于干完了，我这都腰酸背痛……不对劲！老大！空间坐标104u,1179u,901u发现异常空间波动，据智能推算97%概率为人工虫洞，同时还发现与其相连的能量传输通路，地点是……可恶！是太阳！&quot;陈建成刚想给陈星发一个么么哒的表情，突如其来的异常却打断了他，“老大，咱们要不要？”</p>
<p>&quot;嘶，人工虫洞？那应该早会被’夸父’发现，难道……&quot;陈星眉头紧锁，脑中的猜测不断被建立又不断被驳倒。</p>
<p>“3号你说这会不会是？”，“咱们想到一块去了，1号。”</p>
<p>&quot;啊？你们在打什么哑语？我怎么听不懂。&quot;陈建成听得一脸懵逼。</p>
<p>“这是一个更高级文明建立的’虫洞’，如果不是你恰巧从它旁边经过，凭我们现在的检测手段根本无法发现”，陈星长舒了一口气，但表情依旧严肃。“’夸父’，替我转接地面。通知地面部分，想必你们已经知晓当前的情况，根据智能推算，太阳的能源如果依靠该虫洞以指数型传输，我们只剩下10天的时间……’夸父’计划航天员1号，陈星，请求进入虫洞！”</p>
<p>“’夸父’计划航天员3号，赵庆方，请求进入虫洞！”</p>
<p>“老大，老三，这种事不带我可不行，’夸父’计划航天员2号，陈建成，请求进入虫洞！”</p>
<p>&quot;……&quot;沉默，良久的沉默。每个人都清楚面对未知这是一种多么危险的行为。</p>
<p>“这里是北京航天飞行控制中心指挥大厅，我是总司令，我们将无条件支持你们的选择，你们的背后不仅是中国，还有整个地球……航天员陈星、赵庆方、陈建成，我以最高权限，批准进入。此指令不再重复，即刻执行。”</p>
<p>……随着飞船信号的消失，陈星、赵庆方和陈建成同时到了一个，奇怪的光亮空间……</p>
]]></content>
      <categories>
        <category>小说</category>
      </categories>
      <tags>
        <tag>夸父计划</tag>
      </tags>
  </entry>
  <entry>
    <title>易语言json操作</title>
    <url>/posts/7608.html</url>
    <content><![CDATA[<h1>易语言 操作json</h1>
<p>这里用到的是精易模块的json类<br>
现在我们就来讲一下，json各种格式用json类来取值的方法：</p>
<h4 id="1-单一键值对（取出单个value）"><strong>1. 单一键值对（取出单个value）</strong></h4>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>	<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁丁&quot;</span><span class="hljs-punctuation">,</span><br>	<span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/e/1901769-ced07c8990b4d88e.png" alt="img"></p>
<h4 id="2-数组之数值-遍历数组中的数值"><strong>2. 数组之数值(遍历数组中的数值)</strong></h4>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>	<span class="hljs-attr">&quot;num&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">,</span> <span class="hljs-number">2</span><span class="hljs-punctuation">,</span> <span class="hljs-number">3</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/e/1901769-041173f3892d0595.png" alt="img"></p>
<h4 id="3-数组之键值对（遍历数组中某个key的value）"><strong>3. 数组之键值对（遍历数组中某个key的value）</strong></h4>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>	<span class="hljs-attr">&quot;student&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>			<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁丁&quot;</span><span class="hljs-punctuation">,</span><br>			<span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>		<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>		<span class="hljs-punctuation">&#123;</span><br>			<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yanyu&quot;</span><span class="hljs-punctuation">,</span><br>			<span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>		<span class="hljs-punctuation">&#125;</span><br>	<span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/e/1901769-34a521a1adebd48f.png" alt="img"></p>
<h4 id="4-键值对套键值对-3的其他一个部分；遍历一个键值对的所有value"><strong>4. 键值对套键值对(3的其他一个部分；遍历一个键值对的所有value)</strong></h4>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>	<span class="hljs-attr">&quot;student&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>		<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁丁&quot;</span><span class="hljs-punctuation">,</span><br>		<span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>	<span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/e/1901769-97a29706a808c8d4.png" alt="img"></p>
<h4 id="5-类-json-取通用属性（支持a-b-c-0-或者-0-a-b-取所有Name值）"><strong>5. 类_json 取通用属性（支持a.b.c[0]或者[0].a.b; 取所有Name值）</strong></h4>
<p>如果现在只是为了取某一个值，并不需要遍历，那么可以使用该方法</p>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>	<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁丁&quot;</span><span class="hljs-punctuation">,</span><br>	<span class="hljs-attr">&quot;person&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>		<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;yanyu&quot;</span><span class="hljs-punctuation">,</span><br>		<span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">20</span><br>	<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>	<span class="hljs-attr">&quot;student&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">&#123;</span><br>		<span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;丁昌江&quot;</span><span class="hljs-punctuation">,</span><br>		<span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">22</span><br>	<span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>
<p><img src="/img/page/e/1901769-ff969610e13ed1e2.png" alt="img"></p>
<h4 id="最后">最后</h4>
<p>OK！到这儿就差不多讲完了json的读取操作，其他的呢？<br>
添加json属性 删除属性 修改属性这些操作请各位看官自己琢磨了；<br>
我相信有了上面的基础，应该不难了吧</p>
<p><img src="/img/page/e/1901769-a23cff8c078f4b90.png" alt="img"></p>
<h4 id="补充：">补充：</h4>
<ul>
<li>取成员属性不管是数值还是字符串，取到的都是字符类型<br>
如果要取数值，请使用“取成员数值()”</li>
<li>如果要获取修改后的内容，请直接使用json去操作</li>
</ul>
<p><img src="/img/page/e/1901769-bc52971a2dc23ba8.png" alt="img"></p>
]]></content>
      <categories>
        <category>易语言</category>
      </categories>
  </entry>
  <entry>
    <title>最短路</title>
    <url>/posts/19070.html</url>
    <content><![CDATA[<blockquote>
<p>最短的求解一般会遇到多种情况</p>
<ul>
<li>有向无环图
<ul>
<li>权值为正</li>
<li>权值<strong>有</strong>负</li>
</ul>
</li>
<li>有向有环图
<ul>
<li>权值为正</li>
<li>权值<strong>有</strong>负</li>
</ul>
</li>
</ul>
<p>负权边和负权环 Bellmon-Ford</p>
<p>权值非负的有向或无向图 Dijkstra</p>
</blockquote>
<h1>Dijkstra</h1>
<blockquote>
<p>Dijkstra本质上是一种贪心算法，通过不断调整每个点的“当前距离”最终得到最优结果</p>
<p>这种不断调整的过程，维基百科上面称为**“relax&quot;（松弛）**</p>
</blockquote>
<blockquote>
<p><strong>算法流程</strong></p>
<p>对于求一点<strong>s</strong>到其他所有点的最短距离</p>
<p>对于每个点v均维护一个<strong>当前距离</strong>（dis[v]）和 <strong>是否访问过</strong>（vis[v]）。首先将dis[s]<strong>初始化为无穷</strong>，所有点访问状态(vis)<strong>置为未访问</strong></p>
<p>对于一条边<strong>u-&gt;v</strong>，其边权为<strong>weight[u-&gt;v]</strong>，我们存储在了<strong>v.first</strong>中(v为G[u]中的一个邻接点)</p>
<ol>
<li>
<p>从所有未访问的点中，找出当前距离最小的，设为u，并将其标记为已访问的。</p>
</li>
<li>
<p>调整u的所有边（若是有向图则为出边）连接的并且<strong>未被访问过的</strong>点：</p>
<p>若<strong>weight[u-&gt;v] + dis[u] &lt; dis[v]</strong>, 则将dis[v]更新为dis[u]+weight[u-&gt;v]，体现在代码中的操作即是：<strong>if (dis[v.second] &gt; dis[x] + v.first)</strong></p>
</li>
<li>
<p>重复1和2步骤，直到所有点都被标记为已访问的，则<strong>dis[i]即s到i的最短距离</strong></p>
<p>（当然，如果只想求从s到某一点的最短距离，那么当该点被标记为访问过之后可直接退出）</p>
</li>
<li>
<p>如果还想得出两点间的最短路径，可以通过一个pre数组，在步骤2的**if (dis[v.second] &gt; dis[x] + v.first)**后添加操作：pre[v] = u</p>
</li>
</ol>
</blockquote>
<hr>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">vector &lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; &gt; G[MAXN];<br><span class="hljs-type">int</span> dis[MAXN];<br><span class="hljs-type">bool</span> vis[MAXN];<br><span class="hljs-type">int</span> n, m, s;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> PII pair<span class="hljs-string">&lt;int, int&gt;</span> </span><br>priority_queue &lt; PII, vector&lt;PII&gt;, greater&lt;PII&gt;&gt; q;<span class="hljs-comment">//小根堆，堆顶存放可访问的 未访问节点中 距离最小的节点</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">dijkstra</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; ++i)dis[i] = <span class="hljs-number">0x7fffffff</span>;<br>    dis[s] = <span class="hljs-number">0</span>;<br>    q.<span class="hljs-built_in">push</span>(&#123; <span class="hljs-number">0</span>, s &#125;);<br><br>    <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">int</span> u = q.<span class="hljs-built_in">top</span>().second;<span class="hljs-comment">//由于点的维护依靠的是小根堆，堆顶的元素即是《未访问节点中 距离最小的节点》</span><br>        q.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (vis[u]) <span class="hljs-keyword">continue</span>;<br>        vis[u] = <span class="hljs-number">1</span>;<br>        <br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; v : G[u]) &#123;<span class="hljs-comment">//邻接点访问</span><br>            <span class="hljs-keyword">if</span> (dis[v.second] &gt; dis[u] + v.first) &#123;<br>                dis[v.second] = dis[u] + v.first;<br>                <span class="hljs-keyword">if</span> (!vis[v.second]) &#123;<br>                    q.<span class="hljs-built_in">push</span>(&#123; dis[v.second], v.second &#125;);<span class="hljs-comment">//当前更新节点未完成更新(未被标记)，将当前节点和当前节点长度入队</span><br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/////////MAIN/////////</span><br>cin &gt;&gt; n &gt;&gt; m &gt;&gt; s;<br><span class="hljs-comment">//register关键字表示使用cpu内部寄存器，这将加快变量的读写速度</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">register</span> <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i)&#123;<br>    <span class="hljs-keyword">register</span> <span class="hljs-type">int</span> u, v, w;<br>    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>    G[u].<span class="hljs-built_in">push_back</span>(&#123; w,v &#125;);<span class="hljs-comment">//有向图</span><br>&#125;<br></code></pre></td></tr></table></figure>
<h1>Bellmon</h1>
<blockquote>
<p>bellmon-ford是一种单源最短路算法，时间复杂度是$O(VE)$ ,显然不如dijkstra快，但它可以处理<strong>负权边</strong>和<strong>负权环</strong>的情况。它基于一个很基本的事实：</p>
<p><strong>对于一个不包含负权环的V个点的图，任意两点之间的最短路径至多包含V-1条边</strong></p>
<p>如果存在负权环，每次在负权环上走一圈都会使环上的每一个点的距离减少，因此不存在最短路径。</p>
<p>bellmon-ford算法可以检测出这种情况</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 1501</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXE 50001</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 99999999</span><br><br><span class="hljs-comment">//	u		   v		w</span><br><span class="hljs-type">int</span> from[MAXE], to[MAXE], weight[MAXE];<br><span class="hljs-comment">//dis为原点到当前节点的最短路径 pre存储最短路径的前后关系</span><br><span class="hljs-type">int</span> dis[MAXN], pre[MAXN];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bellmon</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)dis[i] = inf;<span class="hljs-comment">//初始化距离为极大值</span><br>	dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j++) &#123;<br>			<span class="hljs-type">int</span> u = from[j], v = to[j], w = weight[j];<br>			<span class="hljs-keyword">if</span>(dis[u] + w &lt; dis[v]) &#123;<br>                <span class="hljs-comment">//《松弛》操作，如果u到v有一条边，dis[v]存储u到v的最短边</span><br>				dis[v] = dis[u] + w;<br>                <span class="hljs-comment">//pre表示最短路径上v的前一个节点是u</span><br>				pre[v] = u;<br>			&#125;<br>		&#125;<br>	&#125;<br>    <br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    bellmon-ford算法可以判断负权环的存在：</span><br><span class="hljs-comment">    	只需在算法的最后对每条边再松弛一次</span><br><span class="hljs-comment">    	如果发现有点的距离得到更新</span><br><span class="hljs-comment">    	说明存在负权环</span><br><span class="hljs-comment">    			&quot;因为没有负权环时最短路径的长度至多为V-1&quot;</span><br><span class="hljs-comment">    */</span><br>&#125;<br><br></code></pre></td></tr></table></figure>
<hr>
<h1>SPFA</h1>
<blockquote>
<p>spfa (shortest path faster algorithm)是对<strong>Bellmon</strong>的一个改进</p>
<p>spfa 采用类似bfs的思想，使用一个队列，只松弛那些可能更新点的距离的边</p>
</blockquote>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 1501</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> inf 99999999</span><br><br>vector &lt; pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span> &gt; &gt; G[MAXN];<br><span class="hljs-comment">//dis为原点到当前节点的最短路径</span><br><span class="hljs-type">int</span> dis[MAXN];<br><span class="hljs-type">bool</span> inq[MAXN];<br><span class="hljs-comment">///////////</span><br><span class="hljs-type">int</span> n, m;<span class="hljs-comment">//</span><br><span class="hljs-comment">///////////</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)dis[i] = inf;<span class="hljs-comment">//初始化距离为极大值</span><br>	dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>	queue&lt;<span class="hljs-type">int</span>&gt; q;<br>	q.<span class="hljs-built_in">push</span>(<span class="hljs-number">1</span>); inq[<span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;<br><br>	<span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br>		<span class="hljs-type">int</span> u = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br>		inq[u] = <span class="hljs-literal">false</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; v : G[u]) &#123;<br>			<span class="hljs-keyword">if</span> (dis[v.first] &gt; dis[u] + v.second) &#123;<br>				dis[v.first] = dis[u] + v.second;<br>				<span class="hljs-keyword">if</span> (!inq[v.first]) &#123;<br>					q.<span class="hljs-built_in">push</span>(v.first);<br>					inq[v.first] = <span class="hljs-literal">true</span>;<br>				&#125;<br>			&#125;<br>		&#125;<br>	&#125;<br><br>&#125;<br><br><br><span class="hljs-comment">//main</span><br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-type">int</span> u, v, w;<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>    cin &gt;&gt; u &gt;&gt; v &gt;&gt; w;<br>    G[u].<span class="hljs-built_in">push_back</span>(&#123; v,-w &#125;);<span class="hljs-comment">//-w 求最长路</span><br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>图</tag>
      </tags>
  </entry>
  <entry>
    <title>树的表示</title>
    <url>/posts/30396.html</url>
    <content><![CDATA[<h1>链表实现</h1>
<p><img src="/img/page/tree!%5Bimg%5D(file:///C:%5CUsers%5Cdrluo%5CAppData%5CRoaming%5CTencent%5CQQTempSys)A%5BY)I~%5D(ZC9Z%5B3Y)IDK7LK.gif" alt="">stDo.webp)</p>
<p>图中右下角的样式不统一，若统一为3项，则有大量空间浪费，不妨如此这般</p>
<p><img src="/img/page/tree/SonAndBro.webp" alt=""></p>
<p><img src="/img/page/tree/SonAndBroEG.webp" alt=""></p>
<p>左侧结点存储<strong>儿子</strong>，右侧结点存储<strong>兄弟</strong></p>
<p>这样的表示方式为：<strong>二叉树</strong></p>
<p><img src="/img/page/tree/Binarytree.webp" alt=""></p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>树</tag>
      </tags>
  </entry>
  <entry>
    <title>实验室C语言第一次考核题目讲解及相关代码解读</title>
    <url>/posts/52883.html</url>
    <content><![CDATA[<blockquote>
<p>爱来自ZZULI❤<a href="https://luoy-oss.github.io">drluo</a></p>
</blockquote>
<p><img src="/img/page/ZZULI.webp" alt=""></p>
<h1>第一题</h1>
<blockquote>
<p>编写一个C语言函数（isPrime），该函数接受一个整数作为参数，检查该整数是否为质数（只能被1和自身整除的数），然后返回一个布尔值，如果是质数则返回1，否则返回0</p>
</blockquote>
<p>注意：</p>
<p><s>请使用long long 代替 int，因为用于测试的数字可能很大</s>（<strong>抱歉，后续测试数据依旧选择在了21亿范围内，即int类型范围，相关使用long long进行编写的代码，在测试时，一律手动修改为int，以确保不会因为类型影响计算速度</strong>）</p>
<p>（<strong>相关函数类型为bool的，也进行了调整，测试时保证所有人的函数均为int类型，传递的参数，内部参数均为int类型</strong>）</p>
<p>你的函数应该只有一个参数，并返回一个整数（1或0），用于表示是否为质数，并且不使用其他外部库或函数来进行质数检查(<strong>后经考虑，此函数允许使用sqrt（开方相较于乘积，为耗时操作）</strong>)。</p>
<p>最终，你的函数将通过这样的方式被调用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (isPrime(num)) &#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 是质数\n&quot;</span>, num);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d 不是质数\n&quot;</span>, num);<br>&#125;<br></code></pre></td></tr></table></figure>
<p>其中：isPrime是判断num是否为质数的函数</p>
<blockquote>
<p>此题采用了时间评分，具体代码已在文件中给出。时间评分代码不做解读。</p>
<p><strong>有同学使用sqrt函数，其实完全可以用i * i &lt;= n平替</strong></p>
<p>有的同学将sqrt置于循环判断条件中，导致sqrt被频繁调用，开方被频繁计算，耗时较大。</p>
<p><code>for(int i=2; i &lt;= sqrt(n); i++);</code></p>
<p>可以优化为：</p>
<p><code>int k = sqrt(n);</code></p>
<p><code>for(int i=2; i &lt;= k; i++);</code></p>
<p>或者采用上方<code>i * i &lt;= n</code> 的形式，乘积操作的耗时远小于开方。</p>
</blockquote>
<hr>
<blockquote>
<p><strong>下方代码思路仅作参考</strong></p>
</blockquote>
<hr>
<h3 id="75分代码思路（时间分0）">75分代码思路（时间分0）</h3>
<p>此分段核心思路在于：</p>
<p><strong>使用一个循环从2开始，逐个检查所有大于等于2且小于n的整数是否能整除n，如果能整除，表明n不是质数，返回0。</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1不是质数</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果能被某个整数整除，不是质数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 是质数</span><br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="85-87分代码思路（时间分0-4-0-48）">85 - 87分代码思路（时间分0.4~0.48）</h3>
<p>此分段核心思路在于：</p>
<p><strong>使用一个循环从2开始，逐个检查所有大于等于2且小于等于n的平方根的整数是否能整除n，如果能整除，表明n不是质数，返回0。</strong></p>
<blockquote>
<p>判断重点必须包含等于，比如这个，它是由一个质数的平方组成：</p>
<p>90193009</p>
<p>它不是质数</p>
<p>9497*9497 = 90193009</p>
<p>如果循环停止条件是i * i &lt; n</p>
<p>那么最多会判断到9496，然后就会结束循环，从而忽略掉这个数是由质数相乘组成的条件。</p>
</blockquote>
<p><strong>采用检查到n的平方根的操作，极大的减少了循环时间。这是因为大于sqrt(n)的因子一定无法整除n</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1不是质数</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i * i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果能被某个整数整除，不是质数</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 是质数</span><br><br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="92-94分代码思路（时间分0-72-0-76）">92 - 94分代码思路（时间分0.72~0.76）</h3>
<p>此分段核心思路在于：</p>
<p><strong>使用一个循环从5开始，逐个检查大于等于5且小于等于n的平方根的奇数（5，7，9，11，13，15，…）是否能整除n，如果能整除，表明n不是质数。</strong></p>
<p><strong>这个循环只检查奇数因子，跳过了偶数因子，从而提高了效率</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1不是质数</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 2和3是质数</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || n % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果能被2或3整除，不是质数</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">5</span>; i * i &lt;= n; i += <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (n % i == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="95-96分代码思路（时间分0-8-0-84）">95 - 96分代码思路（时间分0.8 ~ 0.84）</h3>
<p>此分段：</p>
<p><strong>核心思路与92 - 94分相似，相较于前一种代码循环步进<code>i += 2</code>的方式，该代码循环步进的方式为 <code>i += 6</code>，然后检查6的倍数附近的两个数<code>if (n % i == 0 || n % (i + 2) == 0)</code>作为可能的因子。</strong></p>
<blockquote>
<p><strong>为什么要检查<code>n % i</code> 和 <code>n % (i + 2)</code>，而不是<code>n % i</code>  和 <code>n % (i + 3)</code> ，<code>n % i</code> 和<code>n % (i + 5)</code> 这样的呢？</strong></p>
<p>因为如果 n 是一个质数（不为2或3）那么 <code>n % 2 != 0</code> 且 <code>n % 3 != 0</code>这是肯定的</p>
<p>这两个语句可以解释为：</p>
<p>由于 n 不能被2或3整除，如果n是一个质数，那么它的只可能是：6k ± 1的形式，其中 k 是一个整数。</p>
<p>让我们判断一下6k附近的数（<code>6k</code>，<code>6k + 1</code>，<code>6k + 2</code>，<code>6k + 3</code>，<code>6k + 4</code>，<code>6k + 5</code>…）有哪些特点：</p>
<p>其中，<code>6k</code>，<code> 6k + 2</code>，<code>6k + 3</code>，<code>6k + 4</code> 都可以被2整除，这些数不是质数</p>
<p>所以我们只需要判断<code>6k + 1</code>和<code>6k + 5</code>是否为质数即可。（<code>6k + 1</code> 和<code>6k + 5</code> 可以看成： <code>6w + 1</code> 和 <code>6w - 1</code> 可以理解成6k两侧的数）</p>
<p>我们的循环中<code> for (int i = 6; i * i &lt;= n; i += 6)</code></p>
<p><code>i</code> 从6开始，每次自增6</p>
<p><strong>所以对于我们推导出的规律：判断<code>6k + 1</code>和<code>6k + 5</code>是否为质数</strong></p>
<p><strong>在我们这个从6开始的循环中表示为：n能否被<code>i - 1</code>和<code>i + 1</code>整除（即为：n能否被<code>6k - 1</code>和<code>6k + 1</code>整除）</strong></p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 1不是质数</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>; <span class="hljs-comment">// 2和3是质数</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || n % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">// 如果能被2或3整除，不是质数</span><br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">6</span>; i * i &lt;= n; i += <span class="hljs-number">6</span>) &#123;<br>        <span class="hljs-keyword">if</span> (n % (i - <span class="hljs-number">1</span>) == <span class="hljs-number">0</span> || n % (i + <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="99-100分代码思路（时间分0-96-1）【思路1属于牺牲空间换取时间，思路2看看即可】">99-100分代码思路（时间分0.96 ~ 1）【思路1属于牺牲空间换取时间，思路2看看即可】</h3>
<blockquote>
<p>思路1（牺牲空间换取时间）</p>
<p>额外编写一个函数：</p>
<p>//存储数字是否为质数</p>
<p>//获取完质数表后，判断某数是否为质数，只需采用：<code>if(isprime[num])</code>的形式。</p>
<p>bool isprime[MAX];</p>
<p>void getprime(int listsize);</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-type">bool</span> isprime[MAX];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">getprime</span><span class="hljs-params">(<span class="hljs-type">int</span> listsize)</span> &#123;<br>    <span class="hljs-built_in">memset</span>(isprime, <span class="hljs-number">1</span>, <span class="hljs-keyword">sizeof</span>(isprime));<br>    isprime[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>    primesize = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= MAX &amp;&amp; i &lt;= listsize; i++) &#123;<br>        <span class="hljs-keyword">if</span> (isprime[i])prime[++primesize] = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt;= primesize &amp;&amp; i * prime[j] &lt; listsize; j++) &#123;<br>            isprime[i * prime[j]] = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>)<span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    isprime[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-keyword">return</span> isprime[num];<br>&#125;<br></code></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>思路2   （<strong>Miller-Rabin素数测试</strong>）</p>
<p>这是一种概率性的质数测试方法，通常用于确定一个数<strong>是否很可能</strong>是质数。</p>
<p>这个方法比起传统的除法检查要更快，尤其适合大数。</p>
<p>但是这是一种概率性判断，它的结果不一定准确。</p>
<p>有兴趣可以去看<a href="https://zhuanlan.zhihu.com/p/349360074">【朝夕的ACM笔记】数论-Miller Rabin素数判定 - 知乎 (zhihu.com)</a></p>
<p>下面是一个该算法的例子</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 快速幂取模算法</span><br><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title function_">fastModuloExponentiation</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> base, <span class="hljs-type">long</span> <span class="hljs-type">long</span> exponent, <span class="hljs-type">long</span> <span class="hljs-type">long</span> modulo)</span> &#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> result = <span class="hljs-number">1</span>;<br>    base %= modulo;<br>    <span class="hljs-keyword">while</span> (exponent &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (exponent % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            result = (result * base) % modulo;<br>        &#125;<br>        exponent &gt;&gt;= <span class="hljs-number">1</span>;<br>        base = (base * base) % modulo;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-type">bool</span> <span class="hljs-title function_">millerRabinTest</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n)</span> &#123;<br>    <span class="hljs-type">int</span> k = <span class="hljs-number">4</span>;<span class="hljs-comment">//进行Miller-Rabin测试的迭代次数,k的值越大，测试越可靠</span><br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n &lt;= <span class="hljs-number">3</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> d = n - <span class="hljs-number">1</span>;<span class="hljs-comment">//n此时确定为奇数，n-1为偶数</span><br>    <span class="hljs-keyword">while</span> (d % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>        d /= <span class="hljs-number">2</span>; <span class="hljs-comment">// 计算 d，使 n - 1 可写为 2^r * d（2的r次方乘d的形式），其中 d 为奇数</span><br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> a = <span class="hljs-number">2</span> + rand() % (n - <span class="hljs-number">3</span>); <span class="hljs-comment">// 随机选择基数 a，其中 2 &lt;= a &lt;= n - 2</span><br><br>        <span class="hljs-comment">// 使用快速幂取模算法计算 a^d % n</span><br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> x = fastModuloExponentiation(a, d, n);<br><br>        <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span> || x == n - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">while</span> (d != n - <span class="hljs-number">1</span>) &#123;<br>            x = (x * x) % n;<br>            d *= <span class="hljs-number">2</span>;<br><br>            <span class="hljs-keyword">if</span> (x == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x == n - <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (x != n - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">// 通过 k 次测试后，n 可能是质数</span><br>&#125;<br><br><br><br><span class="hljs-comment">//通过isPrime跳转，方便测试函数调用。</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">isPrime</span><span class="hljs-params">(<span class="hljs-type">int</span> num)</span> &#123;<br>    <span class="hljs-keyword">return</span> millerRabinTest(num);<br>&#125;<br></code></pre></td></tr></table></figure>
<h1>第二题</h1>
<blockquote>
<p>分别编写一个或两个C语言函数，用于查找数组中的最大值和最小值，你的函数应该包含<strong>一个整数数组</strong>，<strong>数组的大小</strong>作为参数,你可以另外添加参数，此题不进行时间评分。</p>
</blockquote>
<p><strong>如果你选择编写两个函数</strong>：</p>
<ul>
<li>
<p>不可以使用全局变量。</p>
</li>
<li>
<p>第一个函数的可以返回数组中的最大值。</p>
</li>
<li>
<p>第二个函数可以返回数组中的最小值。</p>
</li>
<li>
<p>不可以引用除stdio.h之外的头文件库。</p>
</li>
<li>
<p>若使用排序，排序函数应手动实现。</p>
</li>
</ul>
<p><strong>如果你选择编写一个函数</strong>：</p>
<ul>
<li>
<p>不可以使用全局变量。</p>
</li>
<li>
<p>该函数应该通过某种方式返回最大值和最小值，可以使用一个或多个变量。</p>
</li>
<li>
<p>可以使用结构体（不使用结构体依旧可以实现）。</p>
</li>
<li>
<p>不可以引用除stdio.h之外的头文件库。</p>
</li>
<li>
<p>若使用排序，排序函数应手动实现。</p>
</li>
</ul>
<blockquote>
<p>以下四种思路均可得分</p>
</blockquote>
<h3 id="思路一（两个函数）">思路一（两个函数）</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">getMax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> sz)</span> &#123;<br>    <span class="hljs-type">int</span> max = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; sz; i++) &#123;<br>        <span class="hljs-keyword">if</span> (max &lt; arr[i]) &#123;<br>            max = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">getMin</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> sz)</span> &#123;<br>    <span class="hljs-type">int</span> min = arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; sz; i++) &#123;<br>        <span class="hljs-keyword">if</span> (min &gt; arr[i]) &#123;<br>            min = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> min;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> b, c;<br>    <span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">-1</span>,<span class="hljs-number">-2</span>,<span class="hljs-number">-3</span>,<span class="hljs-number">-4</span>,<span class="hljs-number">-5</span> &#125;;<br>    <span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span> arr / <span class="hljs-keyword">sizeof</span> arr[<span class="hljs-number">0</span>];<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大值为%d\n&quot;</span>, getMax(arr, sz));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最小值为%d\n&quot;</span>, getMin(arr, sz));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="思路二-一个函数，指针实现">思路二(一个函数，指针实现)</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">findMinMax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> size, <span class="hljs-type">int</span>* min, <span class="hljs-type">int</span>* max)</span> &#123;<br>    *min = *max = arr[<span class="hljs-number">0</span>];<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; size; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; *max) &#123;<br>            *max = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; *min) &#123;<br>            *min = arr[i];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-built_in">array</span>[] = &#123; <span class="hljs-number">7</span>,<span class="hljs-number">89</span>,<span class="hljs-number">76</span>,<span class="hljs-number">-34</span>,<span class="hljs-number">-9</span>,<span class="hljs-number">123</span>,<span class="hljs-number">26</span>,<span class="hljs-number">421</span>,<span class="hljs-number">124</span>,<span class="hljs-number">87</span>,<span class="hljs-number">7</span> &#125;;<br>    <span class="hljs-type">int</span> size = <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>) / <span class="hljs-keyword">sizeof</span>(<span class="hljs-built_in">array</span>[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> minValue, maxValue;<br><br>    findMinMax(<span class="hljs-built_in">array</span>, size, &amp;minValue, &amp;maxValue);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最小值为: %d\n&quot;</span>, minValue);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大值为: %d\n&quot;</span>, maxValue);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h3 id="思路三-（一个函数，结构体实现）">思路三 （一个函数，结构体实现）</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">VALUE</span>&#123;</span><br>	<span class="hljs-type">int</span> max;<br>	<span class="hljs-type">int</span> min;<br>&#125;VALUE;<br><br>VALUE <span class="hljs-title function_">findMinMax</span><span class="hljs-params">(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> sz)</span><br>&#123;<br>    VALUE value = &#123; <span class="hljs-number">0</span>,<span class="hljs-number">0</span> &#125;;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; sz; i++) &#123;<br>        <span class="hljs-keyword">if</span> (arr[i] &gt; value.max) &#123;<br>            value.max = arr[i];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (arr[i] &lt; value.min) &#123;<br>            value.min = arr[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> value;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>	<span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">7</span>,<span class="hljs-number">89</span>,<span class="hljs-number">76</span>,<span class="hljs-number">-34</span>,<span class="hljs-number">123</span>,<span class="hljs-number">26</span>,<span class="hljs-number">421</span>,<span class="hljs-number">124</span>,<span class="hljs-number">87</span>,<span class="hljs-number">7</span> &#125;;<br>	<span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br><br>    VALUE value = findMinMax(arr, sz);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大值为%d\n&quot;</span>, value.max);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最小值为%d\n&quot;</span>, value.min);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h3 id="思路四（一个函数，排序实现）">思路四（一个函数，排序实现）</h3>
<figure class="highlight c"><table><tr><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> _sort(<span class="hljs-type">int</span> arr[], <span class="hljs-type">int</span> sz)<br>&#123;<br>	<span class="hljs-type">int</span> temp = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; sz; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; sz; j++) &#123;<br>			<span class="hljs-keyword">if</span> (arr[i] &gt; arr[j]) &#123;<br>				temp = arr[i];<br>				arr[i] = arr[j];<br>				arr[j] = temp;<br>			&#125;<br>		&#125;<br>	&#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>	<span class="hljs-type">int</span> arr[] = &#123; <span class="hljs-number">7</span>,<span class="hljs-number">89</span>,<span class="hljs-number">76</span>,<span class="hljs-number">-34</span>,<span class="hljs-number">123</span>,<span class="hljs-number">26</span>,<span class="hljs-number">421</span>,<span class="hljs-number">124</span>,<span class="hljs-number">87</span>,<span class="hljs-number">7</span> &#125;;<br>	<span class="hljs-type">int</span> sz = <span class="hljs-keyword">sizeof</span>(arr) / <span class="hljs-keyword">sizeof</span>(arr[<span class="hljs-number">0</span>]);<br>	_sort(arr, sz);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最大值为%d\n&quot;</span>, arr[sz - <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;最小值为%d\n&quot;</span>, arr[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>AIR实验室</tag>
        <tag>C语言考核</tag>
      </tags>
  </entry>
  <entry>
    <title>杂谈</title>
    <url>/posts/12326.html</url>
    <content><![CDATA[<h1>开始于2022年4月24日</h1>
<blockquote>
<p>2022年4月24日，一个比较特殊的日子</p>
</blockquote>
<p>虽然走读生可以选择早晚走读，中午在教室里睡。</p>
<p>但是我被老妈的话语说服了，诚然，走读是我希望的，但是当下疫情特殊时期，难说有人会瞒着县里偷偷从疫情高风险地区返回</p>
<p>所以，我选择了继续住校。</p>
<p>距离2022年高考还有42天，其实住校对我来说没什么不妥，也没什么反感，本身想回家，就是盼着能<img src="/img/emoji/%E5%93%8E%E5%98%BF.jpg" alt="哎嘿"></p>
<p>总之，剩下的42天，加油！</p>
<blockquote>
<p>2022年5月13日，意外学校给放了2天的假期</p>
</blockquote>
<p>205宿舍真不错，宿舍好，人也有趣</p>
<p>最主要的是，民风淳朴啊民风淳朴<img src="/img/emoji/%E5%93%8E%E5%98%BF.jpg" width="10%" height="10%" /></p>
<blockquote>
<p>2022年6月10日，高考结束（12：30分，最后一场，结束。）</p>
</blockquote>
<p>爷考完了哈哈哈哈哈哈哈哈哈！</p>
<blockquote>
<p>2022年9月18日，前往郑州！</p>
</blockquote>
<p>嗨嗨嗨，大学我来啦！<img src="/img/emoji/%E5%98%BF%E5%98%BF%E5%98%BF.jpg" width="10%" height="10%" /></p>
<blockquote>
<p>2022年10月15日，封宿舍楼了TAT</p>
</blockquote>
<blockquote>
<p>2022年11月19日，离校</p>
</blockquote>
<p>C区核酸无异常，才有了这样少见的离校窗口期。</p>
<p>20点48分，终于上车了！！！我可是16点42分就开始等车了，后面差点冻死我呜呜呜呜呜呜</p>
<p>有一说一，虽然隔离的地方离家很远，但是这里是家，嘿嘿<img src="/img/emoji/%E5%98%BF%E5%98%BF%E5%98%BF.jpg" width="10%" height="10%" /></p>
<blockquote>
<p>2022年11月20日，到达费县</p>
</blockquote>
<p>隔离了一天就转走了，嘿嘿</p>
<blockquote>
<p>2022年11月21日，回到了本县</p>
</blockquote>
<blockquote>
<p>2022年12月30日 发烧38.3℃</p>
</blockquote>
<blockquote>
<p>2022年12月31日 退烧啦！</p>
</blockquote>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
      <tags>
        <tag>与我有关</tag>
      </tags>
  </entry>
  <entry>
    <title>模拟与高精度</title>
    <url>/posts/63704.html</url>
    <content><![CDATA[<h2 id="P1042-NOIP2003-普及组-乒乓球">P1042 [NOIP2003 普及组] 乒乓球</h2>
<h3 id="题目背景">题目背景</h3>
<h3 id="题目描述">题目描述</h3>
<p>华华通过以下方式进行分析，首先将比赛每个球的胜负列成一张表，然后分别计算在 11分制和 21 分制下，双方的比赛结果（截至记录末尾）。</p>
<p>比如现在有这么一份记录，（其中 W 表示华华获得一分， L表示华华对手获得一分）：</p>
<blockquote>
<p>WWWWWWWWWWWWWWWWWWWWWWLW</p>
</blockquote>
<p>在 11分制下，此时比赛的结果是华华第一局 11比 0 获胜，第二局 11比 0 获胜，正在进行第三局，当前比分 1 比 1。而在 21 分制下，此时比赛结果是华华第一局 21 比 0 获胜，正在进行第二局，比分 2 比 1。如果一局比赛刚开始，则此时比分为 0 比 0。</p>
<p>到达11分（21分）后，分差大于或者等于 2，才一局结束。</p>
<p>你的程序就是要对于一系列比赛信息的输入（W L 形式），输出正确的结果。</p>
<h3 id="输入格式">输入格式</h3>
<p>每个输入文件包含若干行字符串，字符串有大写的  W 、  L 和  E 组成。其中  E 表示比赛信息结束，程序应该忽略  E 之后的所有内容。</p>
<h3 id="输出格式">输出格式</h3>
<p>输出由两部分组成，每部分有若干行，每一行对应一局比赛的比分（按比赛信息输入顺序）。其中第一部分是 11分制下的结果，第二部分是 21 分制下的结果，两部分之间由一个空行分隔。</p>
<h3 id="样例-1">样例 #1</h3>
<h4 id="样例输入-1">样例输入 #1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">WWWWWWWWWWWWWWWWWWWW<br>WWLWE<br></code></pre></td></tr></table></figure>
<h4 id="样例输出-1">样例输出 #1</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">11:0<br>11:0<br>1:1<br><br>21:0<br>2:1<br></code></pre></td></tr></table></figure>
<h3 id="提示">提示</h3>
<p>每行至多 25 个字母，最多有 2500 行。</p>
<p>（注：事实上有一个测试点有 2501 行数据。）</p>
<details>
    <summary><font color=FFAC68>展开查看代码</font></summary>
<pre><code>
#include <iostream>
#include <string>
using namespace std;
<br>
int _abs(int x) &#123;
	return x > 0 ? x : -x;
&#125;
<br>
void score(int fdif,string& str) &#123;
	int W = 0, L = 0;//W 华华  L对手
	bool wait2 = false;//21:20时等候2分分差
	for (int i = 0; i < str.size() - 1; i++) &#123;
		if (str[i] == 'W')W++;
		if (str[i] == 'L')L++;
		<br>
		if (W == fdif - 1 && L == fdif - 1)wait2 = true;
		<br>
		if (!wait2) &#123;
			if (W == fdif) &#123;
				cout << W << ":" << L << endl;
				W = L = 0;
			&#125;
			else if (L == fdif) &#123;
				cout << W << ":" << L << endl;
				W = L = 0;
			&#125;
		&#125;
		else &#123;
			//等候两分分差
			if (_abs(W - L) == 2) &#123;
				cout << W << ":" << L << endl;
				W = L = wait2 = 0;
			&#125;
		&#125;
		<br>
	&#125;
	cout << W << ":" << L;
&#125;
<br>
int main() &#123;
	string str = "";
	char temp;
	<br>
	do &#123;
		cin >> temp;
		str += temp;
	&#125; while (temp != 'E');
	if (str == "E") &#123;
		cout << "0:0\n\n0:0";
		goto end;
	&#125;
	score(11,str);
	cout << endl << endl;
	score(21,str);
	<br>
end:;
	<br>
	return 0;
&#125;
</code></pre>
</details>
<h1>[NOIP2015 普及组] 扫雷游戏</h1>
<h2 id="题目描述-2">题目描述</h2>
<p>扫雷游戏是一款十分经典的单机小游戏。在 n 行 m 列的雷区中有一些格子含有地雷（称之为地雷格），其他格子不含地雷（称之为非地雷格）。玩家翻开一个非地雷格时，该格将会出现一个数字——提示周围格子中有多少个是地雷格。游戏的目标是在不翻出任何地雷格的条件下，找出所有的非地雷格。</p>
<p>现在给出 n 行 m 列的雷区中的地雷分布，要求计算出每个非地雷格周围的地雷格数。</p>
<p>注：一个格子的周围格子包括其上、下、左、右、左上、右上、左下、右下八个方向上与之直接相邻的格子。</p>
<h2 id="输入格式-2">输入格式</h2>
<p>第一行是用一个空格隔开的两个整数 n 和 m，分别表示雷区的行数和列数。</p>
<p>接下来 n 行，每行 m 个字符，描述了雷区中的地雷分布情况。字符 *}表示相应格子是地雷格，字符 ? 表示相应格子是非地雷格。相邻字符之间无分隔符。</p>
<h2 id="输出格式-2">输出格式</h2>
<p>输出文件包含 n 行，每行 m 个字符，描述整个雷区。用 *表示地雷格，用周围的地雷个数表示非地雷格。相邻字符之间无分隔符。</p>
<h2 id="样例-1-2">样例 #1</h2>
<h3 id="样例输入-1-2">样例输入 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">3 3<br>*??<br>???<br>?*?<br></code></pre></td></tr></table></figure>
<h3 id="样例输出-1-2">样例输出 #1</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">*10<br>221<br>1*1<br></code></pre></td></tr></table></figure>
<h2 id="样例-2">样例 #2</h2>
<h3 id="样例输入-2">样例输入 #2</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">2 3<br>?*?<br>*??<br></code></pre></td></tr></table></figure>
<h3 id="样例输出-2">样例输出 #2</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">2*1<br>*21<br></code></pre></td></tr></table></figure>
<h2 id="提示-2">提示</h2>
<p>对于 100%的数据，1≤n≤100, 1≤m≤100。</p>
<details>
    <summary><font color=FFAC68>展开查看代码</font></summary>
<pre><code>
#include <iostream>
using namespace std;
<br>
char _map[101][101];
<br>
int dx[8] = &#123; -1,1,0,0,-1,-1,1,1 &#125;;
int dy[8] = &#123; 0,0,-1,1,-1,1,-1,1 &#125;;
int main() &#123;
	int n, m;
	cin >> n >> m;
	<br>
	for (int x = 1; x <= n; x++) &#123;
		for (int y = 1; y <= m; y++) &#123;
			cin >> _map[x][y];
		&#125;
	&#125;
	<br>
	for (int x = 1; x <= n; x++) &#123;
		if (x != 1) &#123;
			cout << endl;
		&#125;
		for (int y = 1; y <= m; y++) &#123;
			if (_map[x][y] == '*') &#123;
				cout << "*";
				continue;
			&#125;
			<br>
			int ans = 0;
			for (int n = 0; n < 8; n++) &#123;
				//x , y + 偏移量
				if (_map[x + dx[n]][y + dy[n]] == '*') ans++;
			&#125;
			cout << ans;
		&#125;
	&#125;
	<br>
	return 0;
&#125;
</code></pre>
</details>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>洛谷</tag>
      </tags>
  </entry>
  <entry>
    <title>百天冲鸭！</title>
    <url>/posts/53026.html</url>
    <content><![CDATA[<h1>高考百天，冲冲冲！</h1>
<p><img src="https://api.xecades.xyz/api?&amp;img=2&amp;luogu=%E6%98%AF%E6%B4%9B%E5%A4%A7%E4%BA%BA%E5%93%9F&amp;quote=%E9%95%BF%E4%B9%85%E7%9A%84%E9%99%AA%E4%BC%B4%EF%BC%8C%E6%88%96%E8%AE%B8%E5%B0%B1%E6%98%AF%E5%91%8A%E7%99%BD%E5%90%A7%E3%80%82&amp;img=1&amp;bg=68,68,68,1&amp;color=210,207,207,0.76&amp;bilibili=%E6%98%AF%E6%B4%9B%E5%A4%A7%E4%BA%BA%E5%93%9F&amp;github=luoy-oss&amp;date=2022-06-07" alt=""></p>
<blockquote>
<p>2022年2月27日 以此记录</p>
</blockquote>
<blockquote>
<p>2022年4月19日 学校解封回家1日</p>
</blockquote>
<blockquote>
<p>2022年5月13日，意外学校给放了2天的假期</p>
</blockquote>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>记一次gitee本地推送</title>
    <url>/posts/1022.html</url>
    <content><![CDATA[<h1>序言</h1>
<p>上传项目到gitee的时候，遇到了一些奇奇怪怪的BUG，导致最终无法正确上传项目<br>
此文章旨在利用Git命令行(用cmd也可以)的方式将代码从本地仓库上传到远程仓库</p>
<h1>第一步 本地目录进入git</h1>
<p><img src="/img/page/%E8%AE%B0%E4%B8%80%E6%AC%A1gitee%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/1.png" alt=""></p>
<p>然后用下方代码初始化git，输入完以后就可以看到该目录下多了一个*.git*的隐藏文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git init<br></code></pre></td></tr></table></figure>
<h1>第二步 将本地项目工作区的所有文件添加到暂存区</h1>
<p>小数点 <strong>.</strong> ，意为添加文件夹下的所有文件<br>
把 <strong>.</strong> 改为指定文件名即可添加项目中的指定文件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git add .<br></code></pre></td></tr></table></figure>
<h1>第三步 将暂存区的文件提交到本地仓库</h1>
<p>这里的注释一般用作  <strong>提醒用户此次代码提交做的更改</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git commit -m <span class="hljs-string">&quot;此次提交的注释&quot;</span><br></code></pre></td></tr></table></figure>
<h1>创建gitee仓库</h1>
<p>此步骤可以先做好</p>
<h1>第五步 将本地代码仓库关联到 gitee 上</h1>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git remote add origin 仓库地址<br></code></pre></td></tr></table></figure>
<p><img src="/img/page/%E8%AE%B0%E4%B8%80%E6%AC%A1gitee%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/2.png" alt="仓库地址"></p>
<p>这此处的地址即为仓库地址</p>
<p>在这一步时如果出现错误<code>error:remote origin already exists</code></p>
<p><img src="/img/page/%E8%AE%B0%E4%B8%80%E6%AC%A1gitee%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/3.png" alt="仓库地址"></p>
<p>输入：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git remote rm origin<br>git remote add origin 仓库地址<br></code></pre></td></tr></table></figure>
<p>即可解决</p>
<h1>第六步 将代码由本地仓库上传到 gitee远程仓库</h1>
<h2 id="6-1-获取远程库与本地同步合并">6.1 获取远程库与本地同步合并</h2>
<p>如果远程库不为空必须做这一步，否则后面的提交可能会失败</p>
<p>原因是  gitee 中的 <a href="http://README.md">README.md</a> 文件不在本地仓库中，可以通过该命令进行代码合并</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git pull --rebase origin master  <br></code></pre></td></tr></table></figure>
<p>可能会遇到：</p>
<p><img src="/img/page/%E8%AE%B0%E4%B8%80%E6%AC%A1gitee%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/4.png" alt="仓库地址"></p>
<p>这时输入<code>git rebase --continue</code>后再输入<code>git pull --rebase origin master  </code>即可</p>
<p><img src="/img/page/%E8%AE%B0%E4%B8%80%E6%AC%A1gitee%E6%9C%AC%E5%9C%B0%E6%8E%A8%E9%80%81/5.png" alt="仓库地址"></p>
<h2 id="6-2-把当前分支-master-推送到远程">6.2 把当前分支 master 推送到远程</h2>
<p>执行此命令后有可能会让输入用户名、密码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git push -u origin master<br></code></pre></td></tr></table></figure>
<p>执行完之后如果无错误就上传成功了（这里的 master 是 gitee 默认的分支</p>
<blockquote>
<p>如果本地的当前分支不是master，就用<code>git checkout master</code>切换到master分支</p>
</blockquote>
<blockquote>
<p>如果想用本地当前分支上传代码，就用<code>git checkout 当前分支名称</code>切换成当前分支名即可</p>
</blockquote>
<h1>第七步 完成</h1>
<h1>后记</h1>
<p>如果后续仓库内容做了更新，就只需：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><code class="hljs javascript">git add .<br>git commit -m <span class="hljs-string">&quot;此次提交的注释&quot;</span><br>git remote rm origin<br>git remote add origin 仓库地址<br>git pull --rebase origin master  <br>git push -u origin master<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>gitee</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言实现波士顿房价预测</title>
    <url>/posts/37594.html</url>
    <content><![CDATA[<p>波士顿房价预测是一个经典的机器学习任务，类似于程序员世界的“Hello World”。和大家对房价的普遍认知相同，波士顿地区的房价受诸多因素影响。该数据集统计了13种可能影响房价的因素和该类型房屋的均价，期望构建一个基于13个因素进行房价预测的模型，如 下图所示。</p>
<p><img src="https://ai-studio-static-online.cdn.bcebos.com/abce0cb2a92f4e679c6855cfa520491597171533a0b0447e8d51d904446e213e" alt="波士顿房价影响因素示意图"></p>
<p>对于预测问题，可以根据预测输出的类型是连续的实数值，还是离散的标签，区分为回归任务和分类任务。<strong>因为房价是一个连续值，所以房价预测显然是一个回归任务</strong>。下面我们尝试用最简单的<strong>线性回归模型</strong>解决这个问题，并用神经网络来实现这个模型。</p>
<h2 id="线性回归模型">线性回归模型</h2>
<p>假设房价和各影响因素之间能够用线性关系来描述：<br>
$$<br>
y = \sum_{j=1}^M w_jx_j + b (公式1)<br>
$$<br>
模型的求解即是通过数据拟合出每个$w_j$和$b$。其中，$w_j$和$b$分别表示该线性模型的权重和偏置。一维情况下，$w_j$ 和 $b$ 是直线的斜率和截距。</p>
<p>线性回归模型使用<strong>均方误差</strong>作为损失函数（Loss），用以衡量预测房价和真实房价的差异，公式如下（其中$\widehat Y_i$为预测值 $Y_i$为实际值）：<br>
$$<br>
s = \frac{1}{n}\sum_{i=1}^n (\widehat Y_i - Y_i)^2 (公式2)<br>
$$</p>
<hr>
<p><strong>思考：</strong></p>
<p>为什么要以均方误差作为损失函数？即将模型在每个训练样本上的预测误差加和，来衡量整体样本的准确性。这是因为损失函数的设计不仅仅要考虑“合理性”，同样需要考虑“易解性”，这个问题在后面的内容中会详细阐述。</p>
<hr>
<p>神经网络的标准结构中每个神经元由加权和与非线性变换构成，然后将多个神经元分层的摆放并连接形成神经网络。线性回归模型可以认为是神经网络模型的一种极简特例，是一个只有加权和、没有非线性变换的神经元（无需形成网络），如 <strong>图2</strong> 所示。</p>
<p><img src="https://ai-studio-static-online.cdn.bcebos.com/f9117a5a34d44b1eab85147e62b4e6295e485e48d79d4a03adaa14a447ffd230" alt="线性回归模型的神经网络结构"></p>
<p><strong>以上内容复制自<a href="https://aistudio.baidu.com/aistudio/projectdetail/5984433">飞桨AI Studio - 人工智能学习与实训社区 (baidu.com)</a></strong></p>
<hr>
<h2 id="程序编写概要：">程序编写概要：</h2>
<blockquote>
<ol>
<li>
<p>编写一个 C 语言程序，基于以往房价影响数据训练出房价预测模型，从而预测以后房价。</p>
</li>
<li>
<p>使用用户给出的housing.data数据，该数据每份有14项，前13项为房价影响因素，最后一项为同类型房价中位数。对获得数据进行归一化处理，确保步长不影响模型效果。</p>
</li>
<li>
<p>使用输入层13层，隐藏层2层，输出层1层的简易神经网络。</p>
</li>
<li>
<p>采用训练集：测试集=8：2。</p>
</li>
<li>
<p>实现必要的错误检查和处理机制，防止无效的输入和计算。</p>
</li>
<li>
<p>将程序按照模块化设计原则进行组织，使得代码结构清晰、易于理解和扩展。</p>
</li>
<li>
<p>使用注释对程序进行说明，包括每个函数的作用、输入输出参数、算法思路等。</p>
</li>
<li>
<p>程序的函数声明位于.h文件中，函数具体实现位于.c文件中。</p>
</li>
<li>
<p>进行充分的测试，验证程序在各种情况下的正确性和稳定性。</p>
</li>
</ol>
</blockquote>
<h2 id="系统功能分析">系统功能分析</h2>
<blockquote>
<ol>
<li>
<p>系统分为四大块：数据分配模块、模型训练模块、模型质量检验模块、预测模块。</p>
</li>
<li>
<p>使用如下神经网络架构实现房价预测模型的训练。</p>
<blockquote>
<p>输入层：13</p>
<p>隐藏层：2</p>
<p>输出层：1</p>
</blockquote>
</li>
<li>
<p>数据分配模块：应对整体数据按照8：2分类比分配，分别为训练集和测试集。</p>
</li>
<li>
<p>模型训练模块：载入训练集，对训练集中的数据进行归一化处理后，获取相应数据集和标签集，对模型参数初始化后开始训练，训练的轮次及学习率需在训练前设置，模型训练完成后，导出模型。</p>
</li>
<li>
<p>模型质量检验模块：导入训练好的模型，依照模型参数，对测试集中的数据进行归一化处理后，依照用户所给标准，检验模型质量。</p>
</li>
<li>
<p>预测模块：导入训练好的模型，依照模型参数，对用户所给的数据进行归一化处理后，进行房价预测，并给出99%-50%预测下的房价区间。</p>
</li>
</ol>
</blockquote>
<h1>数据分配源码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global_define.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">double</span> data[SIZE][LABELS];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入数据文件路径：&quot;</span>);<br>	<span class="hljs-type">char</span> datafile[<span class="hljs-number">101</span>];<br>	<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, datafile);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始载入数据...\n&quot;</span>);<br>	FILE* fdata = <span class="hljs-built_in">fopen</span>(datafile, <span class="hljs-string">&quot;r&quot;</span>);<br>	<span class="hljs-keyword">if</span> (fdata == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件%s打开失败，程序即将退出..&quot;</span>, datafile);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-11</span>);<br>	&#125;<br>	<span class="hljs-type">int</span> ysize = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fdata)) &#123;<br>		<span class="hljs-comment">//按着每行14份数据为一组进行分割</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LABELS; i++) &#123;<br>			<span class="hljs-comment">//fscanf_s(fdata, &quot;%lf&quot;, &amp;data[ysize][i]);</span><br>			<span class="hljs-built_in">fscanf</span>(fdata, <span class="hljs-string">&quot;%lf&quot;</span>, &amp;data[ysize][i]);<br>		&#125;<br>		ysize++;<br>	&#125;<br>	<span class="hljs-built_in">fclose</span>(fdata);<br><br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始分配训练数据...\n&quot;</span>);<br>	FILE* train = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;train.data&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">if</span> (i)<span class="hljs-built_in">fprintf</span>(train, <span class="hljs-string">&quot;\n&quot;</span>);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; LABELS; j++) &#123;<br>			<span class="hljs-built_in">fprintf</span>(train, <span class="hljs-string">&quot;%lf &quot;</span>, data[i][j]);<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;训练数据分配完毕！.\n&quot;</span>);<br>	<span class="hljs-built_in">fclose</span>(train);<br><br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始分配测试数据...\n&quot;</span>);<br>	FILE* eval = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;eval.data&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; EVAL_SIZE; i++) &#123;<br>		<span class="hljs-keyword">if</span>(i)<span class="hljs-built_in">fprintf</span>(eval, <span class="hljs-string">&quot;\n&quot;</span>);<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; LABELS; j++) &#123;<br>			<span class="hljs-built_in">fprintf</span>(eval, <span class="hljs-string">&quot;%lf &quot;</span>, data[i + TRAIN_SIZE][j]);<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;测试数据分配完毕！\n&quot;</span>);<br>	<span class="hljs-built_in">fclose</span>(eval);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据处理完成！\n&quot;</span>);<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>
<hr>
<h1>训练源码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global_define.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> M_PI 3.14159265358979323846</span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">normal_random</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-type">double</span> u1 = <span class="hljs-built_in">rand</span>() / (RAND_MAX + <span class="hljs-number">1.0</span>);<br>	<span class="hljs-type">double</span> u2 = <span class="hljs-built_in">rand</span>() / (RAND_MAX + <span class="hljs-number">1.0</span>);<br>	<span class="hljs-type">double</span> z = <span class="hljs-built_in">sqrt</span>(<span class="hljs-number">-2.0</span> * <span class="hljs-built_in">log</span>(u1)) * <span class="hljs-built_in">sin</span>(<span class="hljs-number">2.0</span> * M_PI * u2);<br>	<span class="hljs-keyword">return</span> z;<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span> &#123;<br>	<span class="hljs-type">double</span>* first;<br>	<span class="hljs-type">double</span> second;<br>&#125;;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Pair</span> Pair;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> iterations = <span class="hljs-number">40000</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> log_step = <span class="hljs-number">50</span>;<br><span class="hljs-type">double</span> learningrate = <span class="hljs-number">0.00125</span>;<br><span class="hljs-type">double</span> data[SIZE][LABELS];<br><span class="hljs-type">double</span> train_data[TRAIN_SIZE][LABELS];<br><span class="hljs-type">double</span> maximums[LABELS] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-type">double</span> minimums[LABELS] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-type">double</span> avgs[LABELS] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-type">int</span> init = <span class="hljs-number">0</span>;<br><span class="hljs-type">double</span> w[DATA_SIZE] = &#123;<br>	<span class="hljs-number">1.76405235</span>,<br>	<span class="hljs-number">0.40015721</span>,<br>	<span class="hljs-number">0.97873798</span>,<br>	<span class="hljs-number">2.2408932</span>,<br>	<span class="hljs-number">1.86755799</span>,<br>	<span class="hljs-number">-0.97727788</span>,<br>	<span class="hljs-number">0.95008842</span>,<br>	<span class="hljs-number">-0.15135721</span>,<br>	<span class="hljs-number">-0.10321885</span>,<br>	<span class="hljs-number">0.4105985</span>,<br>	<span class="hljs-number">0.14404357</span>,<br>	<span class="hljs-number">1.45427351</span>,<br>	<span class="hljs-number">0.76103773</span>, &#125;;<br><span class="hljs-type">double</span> b = <span class="hljs-number">0</span>;<br><span class="hljs-comment">////////////////////////////</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;array.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;dataprocess.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;Network.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;vectorcomputation.h&quot;</span></span><br><span class="hljs-comment">////////////////////////////</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-built_in">printhello</span>(<span class="hljs-number">1</span>);<br>	<span class="hljs-built_in">load_data</span>();<br>	<span class="hljs-comment">//数据集 TRAIN_SIZE * SIZE</span><br>	<span class="hljs-type">double</span> x[TRAIN_SIZE][DATA_SIZE];<br>	<span class="hljs-comment">//double** x = (double**)malloc(sizeof(double*) * TRAIN_SIZE);</span><br>	<span class="hljs-comment">//for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br>	<span class="hljs-comment">//	x[i] = (double*)malloc(SIZE * sizeof(double));</span><br>	<span class="hljs-comment">//&#125;</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; DATA_SIZE; j++) &#123;<br>			x[i][j] = train_data[i][j];<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">//标签集 TRAIN_SIZE * 1</span><br>	<span class="hljs-type">double</span> y[TRAIN_SIZE];<br>	<span class="hljs-comment">//double* y = (double*)malloc(sizeof(double) * TRAIN_SIZE);</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		y[i] = train_data[i][DATA_SIZE];<br>	&#125;<br>	__init__();<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按下任意按键以开始训练...\n&quot;</span>);<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-built_in">train</span>(x, y);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">////////////////////////////////__ARRAY_H__//////////////////////////////////</span><br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getsum</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span>* arr, <span class="hljs-type">const</span> <span class="hljs-type">int</span> size)</span> </span>&#123;<br>	<span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>		ans += arr[i];<br>	&#125;<br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getavg</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span>* arr, <span class="hljs-type">const</span> <span class="hljs-type">int</span> size)</span> </span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">getsum</span>(arr, size) / (<span class="hljs-type">double</span>)size;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getmax_col</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> arr[TRAIN_SIZE][LABELS], <span class="hljs-type">const</span> <span class="hljs-type">int</span> col)</span> </span>&#123;<br>	<span class="hljs-type">double</span> ans = <span class="hljs-number">-23333</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">if</span> (arr[i][col] &gt; ans) &#123;<br>			ans = arr[i][col];<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getmin_col</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> arr[TRAIN_SIZE][LABELS], <span class="hljs-type">const</span> <span class="hljs-type">int</span> col)</span> </span>&#123;<br>	<span class="hljs-type">double</span> ans = <span class="hljs-number">23333</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">if</span> (arr[i][col] &lt; ans) &#123;<br>			ans = arr[i][col];<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getsum_row</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> arr[TRAIN_SIZE][LABELS], <span class="hljs-type">const</span> <span class="hljs-type">int</span> col)</span> </span>&#123;<br>	<span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		ans += arr[i][col];<br>	&#125;<br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">getavg_col</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> arr[TRAIN_SIZE][LABELS], <span class="hljs-type">const</span> <span class="hljs-type">int</span> col)</span> </span>&#123;<br>	<span class="hljs-keyword">return</span> <span class="hljs-built_in">getsum_row</span>(arr, col) / (<span class="hljs-type">double</span>)TRAIN_SIZE;<br>&#125;<br><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////__DATAPROCESS_H__///////////////////////////////</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">load_data</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始载入数据...\n&quot;</span>);<br>	<span class="hljs-type">const</span> <span class="hljs-type">char</span>* datafile = <span class="hljs-string">&quot;train.data&quot;</span>;<br>	FILE* fdata = <span class="hljs-built_in">fopen</span>(datafile, <span class="hljs-string">&quot;r&quot;</span>);<br>	<span class="hljs-keyword">if</span> (fdata == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;文件%s打开失败，程序即将退出..&quot;</span>, datafile);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-11</span>);<br>	&#125;<br>	<span class="hljs-type">int</span> ysize = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fdata)) &#123;<br>		<span class="hljs-comment">//按着每行14份数据为一组进行分割</span><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LABELS; i++) &#123;<br>			<span class="hljs-built_in">fscanf</span>(fdata, <span class="hljs-string">&quot;%lf&quot;</span>, &amp;data[ysize][i]);<br>		&#125;<br>		ysize++;<br>	&#125;<br><br>	<span class="hljs-built_in">fclose</span>(fdata);<br><br>	<span class="hljs-comment">//	copy(data, data_slice, 0, 0, TRAIN_SIZE, LABELS);</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; LABELS; j++) &#123;<br>			train_data[i][j] = data[i][j];<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">//for (int i = 0; i &lt; TRAIN_SIZE * LABELS; i++) &#123;</span><br>	<span class="hljs-comment">//	printf(&quot;%lf &quot;, train_data[i / 14][i % 14]);</span><br>	<span class="hljs-comment">//	if (i % 14 == 0)printf(&quot;\n&quot;);</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LABELS; i++) &#123;<br>		maximums[i] = <span class="hljs-built_in">getmax_col</span>(train_data, i);<br>		minimums[i] = <span class="hljs-built_in">getmin_col</span>(train_data, i);<br>		avgs[i] = <span class="hljs-built_in">getavg_col</span>(train_data, i);<br>		<span class="hljs-comment">//printf(&quot;%lf %lf %lf\n&quot;, maximums[i], minimums[i], avgs[i]);</span><br>	&#125;<br>	<br>	<span class="hljs-comment">//归一化</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; TRAIN_SIZE; x++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt; DATA_SIZE; y++) &#123;<br>			<span class="hljs-keyword">if</span> (maximums[y] - minimums[y] == <span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>			data[x][y] = (data[x][y] - minimums[y]) / (maximums[y] - minimums[y]);<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">/*for (int y = 0; y &lt; TRAIN_SIZE; y++) &#123;</span><br><span class="hljs-comment">		printf(&quot;%.5lf &quot;, data[y][0]);</span><br><span class="hljs-comment">	&#125;</span><br><span class="hljs-comment">	printf(&quot;\n&quot;);*/</span><br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; LABELS; j++) &#123;<br>			train_data[i][j] = data[i][j];<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据载入完成\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////////////__NETWORK_H__/////////////////////////////////</span><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 初始化</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-type">void</span> __init__() &#123;<br>	init = <span class="hljs-number">1</span>;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;***w***\n&quot;</span>);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		<span class="hljs-comment">//w[i] = 1.0 * normal_random();</span><br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.2lf &quot;</span>, w[i]);<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>	b = <span class="hljs-number">0.0</span>;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化完成\n&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 前向计算</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;数据集，大小为TRAIN_SIZE * DATA_SIZE&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;z&quot;&gt;用于接受返回值的数组，其值为基于当前w b计算得来的预测值&lt;/param&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">forward</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x[TRAIN_SIZE][DATA_SIZE], <span class="hljs-type">double</span> z[TRAIN_SIZE])</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (!init) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;网络未进行初始化！--forward 错误代码：-1&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>	&#125;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		z[i] = <span class="hljs-built_in">vectordot</span>(x[i], w) + b;<br>		<span class="hljs-comment">//printf(&quot;%lf\n&quot;,z[i]);</span><br>	&#125;<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 计算损失</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;z&quot;&gt;当前w b下的预测值[将用于与标签值比较]，大小为TRAIN_SIZE&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;y&quot;&gt;标签值，大小为TRAIN_SIZE&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;returns&gt;一个double，代表预测值与实际值的误差，误差越小，返回值越小&lt;/returns&gt;</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">loss</span><span class="hljs-params">(<span class="hljs-type">double</span> z[TRAIN_SIZE],<span class="hljs-type">const</span> <span class="hljs-type">double</span> y[TRAIN_SIZE])</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (!init) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;网络未进行初始化！--loss 错误代码：-2&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-2</span>);<br>	&#125;<br>	<span class="hljs-comment">//printf(&quot;::vectorsub &quot;);</span><br>	<span class="hljs-type">double</span> error[TRAIN_SIZE];<br>	<span class="hljs-built_in">vectorsub</span>(z, y, error);<br>	<span class="hljs-comment">/*for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br><span class="hljs-comment">		printf(&quot;%lf &quot;, z[i]);</span><br><span class="hljs-comment">	&#125;</span><br><span class="hljs-comment">	printf(&quot;\n&quot;);*/</span><br><br>	<span class="hljs-comment">//printf(&quot;::vectormultiply  &quot;);</span><br>	<span class="hljs-type">double</span> cost[TRAIN_SIZE];<br>	<span class="hljs-built_in">vectormultiply</span>(error, error, cost);<br>	<br>	<span class="hljs-comment">/*for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br><span class="hljs-comment">		printf(&quot;%.3lf &quot;, cost[i]);</span><br><span class="hljs-comment">	&#125;</span><br><span class="hljs-comment">	printf(&quot;\n***********************************\n&quot;);*/</span><br>	<br>	<span class="hljs-type">double</span> dcost = <span class="hljs-built_in">getavg</span>(cost, TRAIN_SIZE);<br><br>	<span class="hljs-keyword">return</span> dcost;<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 梯度计算</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;数据集，大小为TRAIN_SIZE * DATA_SIZE&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;y&quot;&gt;标签集，大小为TRAIN_SIZE&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;returns&gt;返回Pair 第一项为梯度w 第二项为梯度b&lt;/returns&gt;</span><br><span class="hljs-function">Pair <span class="hljs-title">gradient</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x[TRAIN_SIZE][DATA_SIZE], <span class="hljs-type">const</span> <span class="hljs-type">double</span> y[TRAIN_SIZE])</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (!init) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;网络未进行初始化！--gradient 错误代码：-3&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-3</span>);<br>	&#125;<br>	<span class="hljs-comment">//printf(&quot;gradient::forward\n&quot;);</span><br>	<span class="hljs-comment">//z : 404 * 1</span><br>	<span class="hljs-comment">//y : 404 * 1</span><br>	<span class="hljs-comment">//x : 404 * 13</span><br>	<span class="hljs-type">double</span> z[TRAIN_SIZE];<br>	forward(x, z);<br>	<span class="hljs-comment">/*for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br><span class="hljs-comment">		printf(&quot;%.3lf &quot;, z[i]);</span><br><span class="hljs-comment">	&#125;</span><br><span class="hljs-comment">	printf(&quot;\n&quot;);*/</span><br><br><br>	<span class="hljs-comment">//printf(&quot;gradient::sub\n&quot;);</span><br>	<span class="hljs-type">double</span> tgradient_b[TRAIN_SIZE];<br><br>	<span class="hljs-built_in">vectorsub</span>(z, y, tgradient_b);<br><br>	<span class="hljs-comment">/*for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br><span class="hljs-comment">		printf(&quot;%lf %d\n&quot;, tgradient_b[i], i);</span><br><span class="hljs-comment">	&#125;*/</span><br><br>	<span class="hljs-comment">//printf(&quot;gradient::multiply2\n&quot;);</span><br>	<br>	<span class="hljs-type">double</span> tgradient_w[TRAIN_SIZE][DATA_SIZE];<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; DATA_SIZE; j++) &#123;<br>			tgradient_w[i][j] = tgradient_b[i] * x[i][j];<br>			<span class="hljs-comment">//printf(&quot;%.2lf &quot;, tgradient_w[i][j]);</span><br>		&#125;<br>		<span class="hljs-comment">//printf(&quot;\n&quot;);</span><br>	&#125;<br><br>	<span class="hljs-comment">//for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br>	<span class="hljs-comment">//	vectormultiply(tgradient_b, x[i], tgradient_w[i]);</span><br>	<span class="hljs-comment">//&#125;</span><br><br>	<span class="hljs-comment">//printf(&quot;end multiply\n&quot;);</span><br><br>	<span class="hljs-type">double</span> gradient_w[DATA_SIZE];<br>	<span class="hljs-comment">//列均值</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		<span class="hljs-type">double</span> sum = <span class="hljs-number">0.0</span>;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x = <span class="hljs-number">0</span>; x &lt; TRAIN_SIZE; x++) &#123;<br>			sum += tgradient_w[x][i];<br>			<span class="hljs-comment">//printf(&quot;::gra%lf %d\n&quot;, tgradient_w[x][i], i);</span><br>		&#125;<br>		gradient_w[i] = sum / (<span class="hljs-type">double</span>)TRAIN_SIZE;<br>	&#125;<br>	<span class="hljs-comment">//printf(&quot;end avg\n&quot;);</span><br><br>	<span class="hljs-type">double</span> gradient_b = <span class="hljs-built_in">getavg</span>(tgradient_b, TRAIN_SIZE);<br>	<span class="hljs-comment">/*for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br><span class="hljs-comment">		free(tgradient_w[i]);</span><br><span class="hljs-comment">	&#125;</span><br><span class="hljs-comment">	free(tgradient_w);</span><br><span class="hljs-comment">	free(tgradient_b);</span><br><span class="hljs-comment">	free(z);*/</span><br>	<span class="hljs-comment">//printf(&quot;%lf\n&quot;, gradient_b);</span><br>	<span class="hljs-keyword">return</span> (Pair) &#123; gradient_w, gradient_b &#125;;<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 更新权重w, b</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;gradient_w&quot;&gt;线性的回归的斜率&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;gradient_b&quot;&gt;线性回归的坐标轴位移&lt;/param&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> gradient_w[DATA_SIZE], <span class="hljs-type">const</span> <span class="hljs-type">double</span> gradient_b)</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (!init) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;网络未进行初始化！--update 错误代码：-4&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-4</span>);<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		w[i] -= learningrate * gradient_w[i];<br>	&#125;<br>	b -= learningrate * gradient_b;<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 训练主体</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;数据集，大小为TRAIN_SIZE * DATA_SIZE&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;y&quot;&gt;标签集，大小为TRAIN_SIZE&lt;/param&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">train</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x[TRAIN_SIZE][DATA_SIZE], <span class="hljs-type">const</span> <span class="hljs-type">double</span> y[TRAIN_SIZE])</span> </span>&#123;<br>	<span class="hljs-keyword">if</span> (!init) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;网络未进行初始化！--train 错误代码：-5&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-5</span>);<br>	&#125;<br>	<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;开始训练\n&quot;</span>);<br>	<span class="hljs-type">double</span> L = <span class="hljs-number">-1</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; iterations; i++) &#123;<br>		<span class="hljs-keyword">if</span> (i == iterations * <span class="hljs-number">0.3</span>) &#123;<br>			learningrate /= <span class="hljs-number">2</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (i == iterations * <span class="hljs-number">0.5</span>) &#123;<br>			learningrate /= <span class="hljs-number">2</span>;<br>		&#125;<br>		<span class="hljs-keyword">if</span> (i == iterations * <span class="hljs-number">0.8</span>) &#123;<br>			learningrate /= <span class="hljs-number">2</span>;<br>		&#125;<br>		<span class="hljs-comment">//printf(&quot;进行forward \n&quot;);</span><br>		<span class="hljs-type">double</span> z[TRAIN_SIZE];<br>		forward(x, z);<br>		<span class="hljs-comment">//printf(&quot;计算loss \n&quot;);</span><br>		L = <span class="hljs-built_in">loss</span>(z, y)/<span class="hljs-number">100</span>;<br>		<span class="hljs-comment">/*for (int i = 0; i &lt; TRAIN_SIZE; i++) &#123;</span><br><span class="hljs-comment">			printf(&quot;%lf %lf\n&quot;, z[i], y[i]);</span><br><span class="hljs-comment">		&#125;*/</span><br><br>		<span class="hljs-comment">//printf(&quot;开始gradient \n&quot;);</span><br>		Pair pair = <span class="hljs-built_in">gradient</span>(x, y);<br>		<span class="hljs-type">double</span>* gradient_w = pair.first;<br>		<span class="hljs-type">double</span> gradient_b = pair.second;<br>		<span class="hljs-comment">//printf(&quot;进行更新\n&quot;);</span><br>		<span class="hljs-built_in">update</span>(gradient_w, gradient_b);<br>		<span class="hljs-keyword">if</span> ((i + <span class="hljs-number">1</span>) % log_step == <span class="hljs-number">0</span>) &#123;<br>			<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;  iter %d, loss %.10lf lr %lf\n&quot;</span>, i, L, learningrate);<br>		&#125;<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;训练完成，共训练轮次：%d轮 最终得到的参数为：\n&quot;</span>, iterations);<br>	<span class="hljs-comment">//printf(&quot;************gradient_w************\n&quot;);</span><br>	<span class="hljs-built_in">printgradientw</span>();<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36mw[%2d] = %64.60lf\033[m\n&quot;</span>, i, w[i]);<br>	&#125;<br>	<span class="hljs-comment">//printf(&quot;\n************gradient_b************:\n&quot;);</span><br>	<span class="hljs-built_in">printgradientb</span>();<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m  b   = %64.60lf\033[m\n\n&quot;</span>, b);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;基于该参数的模型预测损失为：%lf\n&quot;</span>, L);<br>	<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;正在导出模型...\n&quot;</span>);<br>	FILE* fout = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;train_finish.luoy&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>);<br>	<span class="hljs-keyword">if</span> (fout == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;模型导出错误，程序即将退出&quot;</span>);<br>		<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">-12</span>);<br>	&#125;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		<span class="hljs-built_in">fprintf</span>(fout, <span class="hljs-string">&quot;%.60lf &quot;</span>, w[i]);<br>	&#125;<br>	<span class="hljs-built_in">fprintf</span>(fout, <span class="hljs-string">&quot;\n&quot;</span>);<br>	<span class="hljs-built_in">fprintf</span>(fout, <span class="hljs-string">&quot;%.60lf&quot;</span>, b);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LABELS; i++) &#123;<br>		<span class="hljs-built_in">fprintf</span>(fout,<span class="hljs-string">&quot;\n%lf %lf %lf&quot;</span>, maximums[i], minimums[i], avgs[i]);<br>	&#125;<br>	<span class="hljs-built_in">fclose</span>(fout);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;模型导出完成！\n&quot;</span>);<br>	<br>	<span class="hljs-built_in">printbye</span>(<span class="hljs-number">1</span>);<br>	<span class="hljs-built_in">printhello</span>(<span class="hljs-number">1</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;按任意键退出...\n&quot;</span>);<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">/////////////////////////////////////////////////////////////////////////////</span><br><span class="hljs-comment">///////////////////////////__VECTORCOMPUTATION_H__///////////////////////////</span><br><span class="hljs-comment">//add, subtract, multiply and divide</span><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 两个DATA_SIZE大小的一纬向量相乘，返回一个两个向量每项乘积之和</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;向量1&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;arr&quot;&gt;向量2&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">vectordot</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x[DATA_SIZE], <span class="hljs-type">const</span> <span class="hljs-type">double</span> arr[DATA_SIZE])</span> </span>&#123;<br>	<span class="hljs-type">double</span> ans = <span class="hljs-number">0</span>;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		ans += x[i] * arr[i];<br>	&#125;<br>	<span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 两个一维向量相减，返回一维向量</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;减数&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;y&quot;&gt;被减数&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;ans&quot;&gt;用于接收返回值的数组&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;returns&gt;&lt;/returns&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">vectorsub</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x[TRAIN_SIZE], <span class="hljs-type">const</span> <span class="hljs-type">double</span> y[TRAIN_SIZE], <span class="hljs-type">double</span> ans[TRAIN_SIZE])</span> </span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		ans[i] = x[i] - y[i];<br>	&#125;<br>&#125;<br><br><span class="hljs-comment">/// &lt;summary&gt;</span><br><span class="hljs-comment">/// 两个一维向量相乘</span><br><span class="hljs-comment">/// &lt;/summary&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;x&quot;&gt;向量1&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;y&quot;&gt;向量2&lt;/param&gt;</span><br><span class="hljs-comment">/// &lt;param name=&quot;ans&quot;&gt;用于接收返回值的数组&lt;/param&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">vectormultiply</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">double</span> x[TRAIN_SIZE], <span class="hljs-type">const</span> <span class="hljs-type">double</span> y[TRAIN_SIZE], <span class="hljs-type">double</span> ans[TRAIN_SIZE])</span> </span>&#123;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; TRAIN_SIZE; i++) &#123;<br>		ans[i] = x[i] * y[i];<br>	&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>预测部分：</p>
<blockquote>
<p>载入模型数据</p>
<p>获取用于预测的数据</p>
<p>基于模型参数对获取到的数据进行归一化处理</p>
<p>获取预测结果（这里采用了写死的方式，没有进行复杂的操作）</p>
</blockquote>
</blockquote>
<h1>预测源码</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;global_define.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Model</span> &#123;<br>	<span class="hljs-type">double</span> w[DATA_SIZE];<br>	<span class="hljs-type">double</span> b;<br>&#125;model;<br><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* label_list[LABELS] = &#123;<br>	<span class="hljs-string">&quot;CRIM&quot;</span>,<span class="hljs-string">&quot;ZN&quot;</span>,<span class="hljs-string">&quot;INDUS&quot;</span>,<span class="hljs-string">&quot;CHAS&quot;</span>,<span class="hljs-string">&quot;NOX&quot;</span>,<span class="hljs-string">&quot;RM&quot;</span>,<br>	<span class="hljs-string">&quot;AGE&quot;</span>,<span class="hljs-string">&quot;DIS&quot;</span>,<span class="hljs-string">&quot;RAD&quot;</span>,<span class="hljs-string">&quot;TAX&quot;</span>,<span class="hljs-string">&quot;PTRATIO&quot;</span>,<span class="hljs-string">&quot;B&quot;</span>,<span class="hljs-string">&quot;LSTAT&quot;</span>,<span class="hljs-string">&quot;MEDV&quot;</span><br>&#125;;<br><span class="hljs-type">double</span> maximums[LABELS] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-type">double</span> minimums[LABELS] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-type">double</span> avgs[LABELS] = &#123; <span class="hljs-number">0.0</span> &#125;;<br><span class="hljs-type">double</span> predict_data[DATA_SIZE];<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_data</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">load_model</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* file_path)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predict</span><span class="hljs-params">()</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-type">char</span> model[<span class="hljs-number">100</span>];<br>	<span class="hljs-built_in">printhello</span>(<span class="hljs-number">2</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要使用的模型(可以不带模型后缀,默认为train_finish.luoy)：&quot;</span>);<br>	<span class="hljs-built_in">gets_s</span>(model, <span class="hljs-number">100</span>);<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strstr</span>(model, <span class="hljs-string">&quot;.luoy&quot;</span>) == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-built_in">strcat</span>(model, <span class="hljs-string">&quot;.luoy&quot;</span>);<br>	&#125;<br>	<span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(model, <span class="hljs-string">&quot;&quot;</span>)) &#123;<br>		<span class="hljs-built_in">strcpy</span>(model, <span class="hljs-string">&quot;train_finish.luoy&quot;</span>);<br>	&#125;<br>	<span class="hljs-built_in">load_model</span>(model);<br>	<span class="hljs-built_in">get_data</span>();<br>	<span class="hljs-built_in">predict</span>();<br>	<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br><br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">get_data</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入要预测的数据...\n&quot;</span>);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入%s：&quot;</span>, label_list[i]);<br>		<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>, &amp;predict_data[i]);<br>	&#125;<br>	<br>	<span class="hljs-comment">//归一化</span><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> y = <span class="hljs-number">0</span>; y &lt; DATA_SIZE; y++) &#123;<br>		<span class="hljs-keyword">if</span> (maximums[y] - minimums[y] == <span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>		predict_data[y] = (predict_data[y] - minimums[y]) / (maximums[y] - minimums[y]);<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;数据获取完成\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">load_model</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* file_path)</span> </span>&#123;<br>	FILE* file = <span class="hljs-built_in">fopen</span>(file_path, <span class="hljs-string">&quot;r&quot;</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;加载模型%s\n&quot;</span>, file_path);<br>	<span class="hljs-keyword">if</span> (file == <span class="hljs-literal">NULL</span>) &#123;<br>		<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;未找到模型%s\n&quot;</span>, file_path);<br>		<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>		<span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>	&#125;<br><br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		<span class="hljs-built_in">fscanf</span>(file, <span class="hljs-string">&quot;%lf&quot;</span>, &amp;model.w[i]);<br>	&#125;<br>	<span class="hljs-built_in">fscanf</span>(file, <span class="hljs-string">&quot;%lf&quot;</span>, &amp;model.b);<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; LABELS; i++) &#123;<br>		<span class="hljs-built_in">fscanf</span>(file, <span class="hljs-string">&quot;%lf%lf%lf&quot;</span>, &amp;maximums[i], &amp;minimums[i], &amp;avgs[i]);<br>	&#125;<br>	<span class="hljs-built_in">fclose</span>(file);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;模型加载完成\n&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">predict</span><span class="hljs-params">()</span> </span>&#123;<br>	<span class="hljs-type">double</span> ans = <span class="hljs-number">0.0</span>;<br>	<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; DATA_SIZE; i++) &#123;<br>		ans += predict_data[i] * model.w[i];<br>	&#125;<br>	ans += model.b;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;根据所给参数：\n&quot;</span>);<br>    <span class="hljs-comment">//这里采用了写死的方式，没有进行复杂的操作</span><br>    <span class="hljs-comment">//后面的+ -参数为当前训练数据的最优参数。</span><br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于99%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">7.2</span>, ans + <span class="hljs-number">7.2</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于98%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">6.04</span>, ans + <span class="hljs-number">6.04</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于97%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">5.77</span>, ans + <span class="hljs-number">5.77</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于94%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">5.1</span>, ans + <span class="hljs-number">5.1</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于91%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">4.59</span>, ans + <span class="hljs-number">4.59</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于89%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">4.2</span>, ans + <span class="hljs-number">4.2</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于83%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">3.9</span>, ans + <span class="hljs-number">3.9</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于76%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">3.6</span>, ans + <span class="hljs-number">3.6</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于67%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">3</span>, ans + <span class="hljs-number">3</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于60%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">2.6</span>, ans + <span class="hljs-number">2.6</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;基于50%%概率预测，该地区房价范围为(%9lf,%10lf)\033[m\n&quot;</span>, ans - <span class="hljs-number">2.08</span>, ans + <span class="hljs-number">2.08</span>);<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[36m&gt;&gt;&gt;该地区房价可能为%10lf\033[m\n&quot;</span>,ans);<br>	<span class="hljs-built_in">printbye</span>(<span class="hljs-number">2</span>);<br>	<span class="hljs-built_in">printhello</span>(<span class="hljs-number">2</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1>训练数据housing.data</h1>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"><span class="hljs-number">41.529200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.531000</span> <span class="hljs-number">85.400000</span> <span class="hljs-number">1.607400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">329.460000</span> <span class="hljs-number">27.380000</span> <span class="hljs-number">6.375000</span> <br><span class="hljs-number">67.920800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.683000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.425400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">384.970000</span> <span class="hljs-number">22.980000</span> <span class="hljs-number">3.750000</span> <br><span class="hljs-number">20.716200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.659000</span> <span class="hljs-number">4.138000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.178100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">370.220000</span> <span class="hljs-number">23.340000</span> <span class="hljs-number">8.925000</span> <br><span class="hljs-number">11.951100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.659000</span> <span class="hljs-number">5.608000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.285200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">332.090000</span> <span class="hljs-number">12.130000</span> <span class="hljs-number">20.925000</span> <br><span class="hljs-number">7.403890</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.597000</span> <span class="hljs-number">5.617000</span> <span class="hljs-number">97.900000</span> <span class="hljs-number">1.454700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">314.640000</span> <span class="hljs-number">26.400000</span> <span class="hljs-number">12.900000</span> <br><span class="hljs-number">14.438300</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.597000</span> <span class="hljs-number">6.852000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.465500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">179.360000</span> <span class="hljs-number">19.780000</span> <span class="hljs-number">20.625000</span> <br><span class="hljs-number">51.135800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.597000</span> <span class="hljs-number">5.757000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.413000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">2.600000</span> <span class="hljs-number">10.110000</span> <span class="hljs-number">11.250000</span> <br><span class="hljs-number">14.050700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.597000</span> <span class="hljs-number">6.657000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.527500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">35.050000</span> <span class="hljs-number">21.220000</span> <span class="hljs-number">12.900000</span> <br><span class="hljs-number">18.811000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.597000</span> <span class="hljs-number">4.628000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.553900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">28.790000</span> <span class="hljs-number">34.370000</span> <span class="hljs-number">13.425000</span> <br><span class="hljs-number">28.655800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.597000</span> <span class="hljs-number">5.155000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.589400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">210.970000</span> <span class="hljs-number">20.080000</span> <span class="hljs-number">12.225000</span> <br><span class="hljs-number">45.746100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">4.519000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.658200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">88.270000</span> <span class="hljs-number">36.980000</span> <span class="hljs-number">5.250000</span> <br><span class="hljs-number">18.084600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">6.434000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.834700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">27.250000</span> <span class="hljs-number">29.050000</span> <span class="hljs-number">5.400000</span> <br><span class="hljs-number">10.834200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">6.782000</span> <span class="hljs-number">90.800000</span> <span class="hljs-number">1.819500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">21.570000</span> <span class="hljs-number">25.790000</span> <span class="hljs-number">5.625000</span> <br><span class="hljs-number">25.940600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">5.304000</span> <span class="hljs-number">89.100000</span> <span class="hljs-number">1.647500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">127.360000</span> <span class="hljs-number">26.640000</span> <span class="hljs-number">7.800000</span> <br><span class="hljs-number">73.534100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">5.957000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.802600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">16.450000</span> <span class="hljs-number">20.620000</span> <span class="hljs-number">6.600000</span> <br><span class="hljs-number">11.812300</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.718000</span> <span class="hljs-number">6.824000</span> <span class="hljs-number">76.500000</span> <span class="hljs-number">1.794000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">48.450000</span> <span class="hljs-number">22.740000</span> <span class="hljs-number">6.300000</span> <br><span class="hljs-number">11.087400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.718000</span> <span class="hljs-number">6.411000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.858900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">318.750000</span> <span class="hljs-number">15.020000</span> <span class="hljs-number">12.525000</span> <br><span class="hljs-number">7.022590</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.718000</span> <span class="hljs-number">6.006000</span> <span class="hljs-number">95.300000</span> <span class="hljs-number">1.874600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">319.980000</span> <span class="hljs-number">15.700000</span> <span class="hljs-number">10.650000</span> <br><span class="hljs-number">12.048200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">5.648000</span> <span class="hljs-number">87.600000</span> <span class="hljs-number">1.951200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">291.550000</span> <span class="hljs-number">14.100000</span> <span class="hljs-number">15.600000</span> <br><span class="hljs-number">7.050420</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">6.103000</span> <span class="hljs-number">85.100000</span> <span class="hljs-number">2.021800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">2.520000</span> <span class="hljs-number">23.290000</span> <span class="hljs-number">10.050000</span> <br><span class="hljs-number">8.792120</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">5.565000</span> <span class="hljs-number">70.600000</span> <span class="hljs-number">2.063500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">3.650000</span> <span class="hljs-number">17.160000</span> <span class="hljs-number">8.775000</span> <br><span class="hljs-number">15.860300</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">5.896000</span> <span class="hljs-number">95.400000</span> <span class="hljs-number">1.909600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">7.680000</span> <span class="hljs-number">24.390000</span> <span class="hljs-number">6.225000</span> <br><span class="hljs-number">12.247200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">5.837000</span> <span class="hljs-number">59.700000</span> <span class="hljs-number">1.997600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">24.650000</span> <span class="hljs-number">15.690000</span> <span class="hljs-number">7.650000</span> <br><span class="hljs-number">37.661900</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">6.202000</span> <span class="hljs-number">78.700000</span> <span class="hljs-number">1.862900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">18.820000</span> <span class="hljs-number">14.520000</span> <span class="hljs-number">8.175000</span> <br><span class="hljs-number">7.367110</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">6.193000</span> <span class="hljs-number">78.100000</span> <span class="hljs-number">1.935600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">96.730000</span> <span class="hljs-number">21.520000</span> <span class="hljs-number">8.250000</span> <br><span class="hljs-number">9.338890</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.679000</span> <span class="hljs-number">6.380000</span> <span class="hljs-number">95.600000</span> <span class="hljs-number">1.968200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">60.720000</span> <span class="hljs-number">24.080000</span> <span class="hljs-number">7.125000</span> <br><span class="hljs-number">8.492130</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">6.348000</span> <span class="hljs-number">86.100000</span> <span class="hljs-number">2.052700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">83.450000</span> <span class="hljs-number">17.640000</span> <span class="hljs-number">10.875000</span> <br><span class="hljs-number">10.062300</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">6.833000</span> <span class="hljs-number">94.300000</span> <span class="hljs-number">2.088200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">81.330000</span> <span class="hljs-number">19.690000</span> <span class="hljs-number">10.575000</span> <br><span class="hljs-number">6.444050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">6.425000</span> <span class="hljs-number">74.800000</span> <span class="hljs-number">2.200400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">97.950000</span> <span class="hljs-number">12.030000</span> <span class="hljs-number">12.075000</span> <br><span class="hljs-number">5.581070</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.436000</span> <span class="hljs-number">87.900000</span> <span class="hljs-number">2.315800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">100.190000</span> <span class="hljs-number">16.220000</span> <span class="hljs-number">10.725000</span> <br><span class="hljs-number">13.913400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.208000</span> <span class="hljs-number">95.000000</span> <span class="hljs-number">2.222200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">100.630000</span> <span class="hljs-number">15.170000</span> <span class="hljs-number">8.775000</span> <br><span class="hljs-number">11.160400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.629000</span> <span class="hljs-number">94.600000</span> <span class="hljs-number">2.124700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">109.850000</span> <span class="hljs-number">23.270000</span> <span class="hljs-number">10.050000</span> <br><span class="hljs-number">14.420800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.461000</span> <span class="hljs-number">93.300000</span> <span class="hljs-number">2.002600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">27.490000</span> <span class="hljs-number">18.050000</span> <span class="hljs-number">7.200000</span> <br><span class="hljs-number">15.177200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.152000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.914200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">9.320000</span> <span class="hljs-number">26.450000</span> <span class="hljs-number">6.525000</span> <br><span class="hljs-number">13.678100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">5.935000</span> <span class="hljs-number">87.900000</span> <span class="hljs-number">1.820600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">68.950000</span> <span class="hljs-number">34.020000</span> <span class="hljs-number">6.300000</span> <br><span class="hljs-number">9.390630</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">5.627000</span> <span class="hljs-number">93.900000</span> <span class="hljs-number">1.817200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">22.880000</span> <span class="hljs-number">9.600000</span> <br><span class="hljs-number">22.051100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">5.818000</span> <span class="hljs-number">92.400000</span> <span class="hljs-number">1.866200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">391.450000</span> <span class="hljs-number">22.110000</span> <span class="hljs-number">7.875000</span> <br><span class="hljs-number">9.724180</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.406000</span> <span class="hljs-number">97.200000</span> <span class="hljs-number">2.065100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">385.960000</span> <span class="hljs-number">19.520000</span> <span class="hljs-number">12.825000</span> <br><span class="hljs-number">5.666370</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.219000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">2.004800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">395.690000</span> <span class="hljs-number">16.590000</span> <span class="hljs-number">13.800000</span> <br><span class="hljs-number">9.966540</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.485000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.978400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">386.730000</span> <span class="hljs-number">18.850000</span> <span class="hljs-number">11.550000</span> <br><span class="hljs-number">12.802300</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">5.854000</span> <span class="hljs-number">96.600000</span> <span class="hljs-number">1.895600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">240.520000</span> <span class="hljs-number">23.790000</span> <span class="hljs-number">8.100000</span> <br><span class="hljs-number">10.671800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.459000</span> <span class="hljs-number">94.800000</span> <span class="hljs-number">1.987900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">43.060000</span> <span class="hljs-number">23.980000</span> <span class="hljs-number">8.850000</span> <br><span class="hljs-number">6.288070</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.341000</span> <span class="hljs-number">96.400000</span> <span class="hljs-number">2.072000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">318.010000</span> <span class="hljs-number">17.790000</span> <span class="hljs-number">11.175000</span> <br><span class="hljs-number">9.924850</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">6.251000</span> <span class="hljs-number">96.600000</span> <span class="hljs-number">2.198000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">388.520000</span> <span class="hljs-number">16.440000</span> <span class="hljs-number">9.450000</span> <br><span class="hljs-number">9.329090</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.185000</span> <span class="hljs-number">98.700000</span> <span class="hljs-number">2.261600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">18.130000</span> <span class="hljs-number">10.575000</span> <br><span class="hljs-number">7.526010</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.417000</span> <span class="hljs-number">98.300000</span> <span class="hljs-number">2.185000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">304.210000</span> <span class="hljs-number">19.310000</span> <span class="hljs-number">9.750000</span> <br><span class="hljs-number">6.717720</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.749000</span> <span class="hljs-number">92.600000</span> <span class="hljs-number">2.323600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">0.320000</span> <span class="hljs-number">17.440000</span> <span class="hljs-number">10.050000</span> <br><span class="hljs-number">5.441140</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.655000</span> <span class="hljs-number">98.200000</span> <span class="hljs-number">2.355200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">355.290000</span> <span class="hljs-number">17.730000</span> <span class="hljs-number">11.400000</span> <br><span class="hljs-number">5.090170</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.297000</span> <span class="hljs-number">91.800000</span> <span class="hljs-number">2.368200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">385.090000</span> <span class="hljs-number">17.270000</span> <span class="hljs-number">12.075000</span> <br><span class="hljs-number">8.248090</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">7.393000</span> <span class="hljs-number">99.300000</span> <span class="hljs-number">2.452700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">375.870000</span> <span class="hljs-number">16.740000</span> <span class="hljs-number">13.350000</span> <br><span class="hljs-number">9.513630</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.728000</span> <span class="hljs-number">94.100000</span> <span class="hljs-number">2.496100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">6.680000</span> <span class="hljs-number">18.710000</span> <span class="hljs-number">11.175000</span> <br><span class="hljs-number">4.752370</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.525000</span> <span class="hljs-number">86.500000</span> <span class="hljs-number">2.435800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">50.920000</span> <span class="hljs-number">18.130000</span> <span class="hljs-number">10.575000</span> <br><span class="hljs-number">4.668830</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">5.976000</span> <span class="hljs-number">87.900000</span> <span class="hljs-number">2.580600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">10.480000</span> <span class="hljs-number">19.010000</span> <span class="hljs-number">9.525000</span> <br><span class="hljs-number">8.200580</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">5.936000</span> <span class="hljs-number">80.300000</span> <span class="hljs-number">2.779200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">3.500000</span> <span class="hljs-number">16.940000</span> <span class="hljs-number">10.125000</span> <br><span class="hljs-number">7.752230</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.301000</span> <span class="hljs-number">83.700000</span> <span class="hljs-number">2.783100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">272.210000</span> <span class="hljs-number">16.230000</span> <span class="hljs-number">11.175000</span> <br><span class="hljs-number">6.801170</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.081000</span> <span class="hljs-number">84.400000</span> <span class="hljs-number">2.717500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">15.000000</span> <br><span class="hljs-number">4.812130</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.701000</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">2.597500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">255.230000</span> <span class="hljs-number">16.420000</span> <span class="hljs-number">12.300000</span> <br><span class="hljs-number">3.693110</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.376000</span> <span class="hljs-number">88.400000</span> <span class="hljs-number">2.567100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">391.430000</span> <span class="hljs-number">14.650000</span> <span class="hljs-number">13.275000</span> <br><span class="hljs-number">6.654920</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.317000</span> <span class="hljs-number">83.000000</span> <span class="hljs-number">2.734400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.990000</span> <span class="hljs-number">14.625000</span> <br><span class="hljs-number">5.821150</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.713000</span> <span class="hljs-number">6.513000</span> <span class="hljs-number">89.900000</span> <span class="hljs-number">2.801600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">393.820000</span> <span class="hljs-number">10.290000</span> <span class="hljs-number">15.150000</span> <br><span class="hljs-number">7.839320</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.655000</span> <span class="hljs-number">6.209000</span> <span class="hljs-number">65.400000</span> <span class="hljs-number">2.963400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.220000</span> <span class="hljs-number">16.050000</span> <br><span class="hljs-number">3.163600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.655000</span> <span class="hljs-number">5.759000</span> <span class="hljs-number">48.200000</span> <span class="hljs-number">3.066500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">334.400000</span> <span class="hljs-number">14.130000</span> <span class="hljs-number">14.925000</span> <br><span class="hljs-number">3.774980</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.655000</span> <span class="hljs-number">5.952000</span> <span class="hljs-number">84.700000</span> <span class="hljs-number">2.871500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">22.010000</span> <span class="hljs-number">17.150000</span> <span class="hljs-number">14.250000</span> <br><span class="hljs-number">4.422280</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">6.003000</span> <span class="hljs-number">94.500000</span> <span class="hljs-number">2.540300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">331.290000</span> <span class="hljs-number">21.320000</span> <span class="hljs-number">14.325000</span> <br><span class="hljs-number">15.575700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.580000</span> <span class="hljs-number">5.926000</span> <span class="hljs-number">71.000000</span> <span class="hljs-number">2.908400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">368.740000</span> <span class="hljs-number">18.130000</span> <span class="hljs-number">14.325000</span> <br><span class="hljs-number">13.075100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.580000</span> <span class="hljs-number">5.713000</span> <span class="hljs-number">56.700000</span> <span class="hljs-number">2.823700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.760000</span> <span class="hljs-number">15.075000</span> <br><span class="hljs-number">4.348790</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.580000</span> <span class="hljs-number">6.167000</span> <span class="hljs-number">84.000000</span> <span class="hljs-number">3.033400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">16.290000</span> <span class="hljs-number">14.925000</span> <br><span class="hljs-number">4.038410</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.532000</span> <span class="hljs-number">6.229000</span> <span class="hljs-number">90.700000</span> <span class="hljs-number">3.099300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">395.330000</span> <span class="hljs-number">12.870000</span> <span class="hljs-number">14.700000</span> <br><span class="hljs-number">3.568680</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.580000</span> <span class="hljs-number">6.437000</span> <span class="hljs-number">75.000000</span> <span class="hljs-number">2.896500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">393.370000</span> <span class="hljs-number">14.360000</span> <span class="hljs-number">17.400000</span> <br><span class="hljs-number">4.646890</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">6.980000</span> <span class="hljs-number">67.600000</span> <span class="hljs-number">2.532900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">374.680000</span> <span class="hljs-number">11.660000</span> <span class="hljs-number">22.350000</span> <br><span class="hljs-number">8.055790</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">5.427000</span> <span class="hljs-number">95.400000</span> <span class="hljs-number">2.429800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">352.580000</span> <span class="hljs-number">18.140000</span> <span class="hljs-number">10.350000</span> <br><span class="hljs-number">6.393120</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.584000</span> <span class="hljs-number">6.162000</span> <span class="hljs-number">97.400000</span> <span class="hljs-number">2.206000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">302.760000</span> <span class="hljs-number">24.100000</span> <span class="hljs-number">9.975000</span> <br><span class="hljs-number">4.871410</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">6.484000</span> <span class="hljs-number">93.600000</span> <span class="hljs-number">2.305300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.210000</span> <span class="hljs-number">18.680000</span> <span class="hljs-number">12.525000</span> <br><span class="hljs-number">15.023400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">5.304000</span> <span class="hljs-number">97.300000</span> <span class="hljs-number">2.100700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">349.480000</span> <span class="hljs-number">24.910000</span> <span class="hljs-number">9.000000</span> <br><span class="hljs-number">10.233000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">6.185000</span> <span class="hljs-number">96.700000</span> <span class="hljs-number">2.170500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">379.700000</span> <span class="hljs-number">18.030000</span> <span class="hljs-number">10.950000</span> <br><span class="hljs-number">14.333700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.614000</span> <span class="hljs-number">6.229000</span> <span class="hljs-number">88.000000</span> <span class="hljs-number">1.951200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">383.320000</span> <span class="hljs-number">13.110000</span> <span class="hljs-number">16.050000</span> <br><span class="hljs-number">5.824010</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.532000</span> <span class="hljs-number">6.242000</span> <span class="hljs-number">64.700000</span> <span class="hljs-number">3.424200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">10.740000</span> <span class="hljs-number">17.250000</span> <br><span class="hljs-number">5.708180</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.532000</span> <span class="hljs-number">6.750000</span> <span class="hljs-number">74.900000</span> <span class="hljs-number">3.331700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">393.070000</span> <span class="hljs-number">7.740000</span> <span class="hljs-number">17.775000</span> <br><span class="hljs-number">5.731160</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.532000</span> <span class="hljs-number">7.061000</span> <span class="hljs-number">77.000000</span> <span class="hljs-number">3.410600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">395.280000</span> <span class="hljs-number">7.010000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">2.818380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.532000</span> <span class="hljs-number">5.762000</span> <span class="hljs-number">40.300000</span> <span class="hljs-number">4.098300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">392.920000</span> <span class="hljs-number">10.420000</span> <span class="hljs-number">16.350000</span> <br><span class="hljs-number">2.378570</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.583000</span> <span class="hljs-number">5.871000</span> <span class="hljs-number">41.900000</span> <span class="hljs-number">3.724000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">370.730000</span> <span class="hljs-number">13.340000</span> <span class="hljs-number">15.450000</span> <br><span class="hljs-number">3.673670</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.583000</span> <span class="hljs-number">6.312000</span> <span class="hljs-number">51.900000</span> <span class="hljs-number">3.991700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">388.620000</span> <span class="hljs-number">10.580000</span> <span class="hljs-number">15.900000</span> <br><span class="hljs-number">5.691750</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.583000</span> <span class="hljs-number">6.114000</span> <span class="hljs-number">79.800000</span> <span class="hljs-number">3.545900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">392.680000</span> <span class="hljs-number">14.980000</span> <span class="hljs-number">14.325000</span> <br><span class="hljs-number">4.835670</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.583000</span> <span class="hljs-number">5.905000</span> <span class="hljs-number">53.200000</span> <span class="hljs-number">3.152300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">388.220000</span> <span class="hljs-number">11.450000</span> <span class="hljs-number">15.450000</span> <br><span class="hljs-number">0.150860</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">27.740000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.609000</span> <span class="hljs-number">5.454000</span> <span class="hljs-number">92.700000</span> <span class="hljs-number">1.820900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">711.000000</span> <span class="hljs-number">20.100000</span> <span class="hljs-number">395.090000</span> <span class="hljs-number">18.060000</span> <span class="hljs-number">11.400000</span> <br><span class="hljs-number">0.183370</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">27.740000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.609000</span> <span class="hljs-number">5.414000</span> <span class="hljs-number">98.300000</span> <span class="hljs-number">1.755400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">711.000000</span> <span class="hljs-number">20.100000</span> <span class="hljs-number">344.050000</span> <span class="hljs-number">23.970000</span> <span class="hljs-number">5.250000</span> <br><span class="hljs-number">0.207460</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">27.740000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.609000</span> <span class="hljs-number">5.093000</span> <span class="hljs-number">98.000000</span> <span class="hljs-number">1.822600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">711.000000</span> <span class="hljs-number">20.100000</span> <span class="hljs-number">318.430000</span> <span class="hljs-number">29.680000</span> <span class="hljs-number">6.075000</span> <br><span class="hljs-number">0.105740</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">27.740000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.609000</span> <span class="hljs-number">5.983000</span> <span class="hljs-number">98.800000</span> <span class="hljs-number">1.868100</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">711.000000</span> <span class="hljs-number">20.100000</span> <span class="hljs-number">390.110000</span> <span class="hljs-number">18.070000</span> <span class="hljs-number">10.200000</span> <br><span class="hljs-number">0.111320</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">27.740000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.609000</span> <span class="hljs-number">5.983000</span> <span class="hljs-number">83.500000</span> <span class="hljs-number">2.109900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">711.000000</span> <span class="hljs-number">20.100000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.350000</span> <span class="hljs-number">15.075000</span> <br><span class="hljs-number">0.173310</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">5.707000</span> <span class="hljs-number">54.000000</span> <span class="hljs-number">2.381700</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">12.010000</span> <span class="hljs-number">16.350000</span> <br><span class="hljs-number">0.279570</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">5.926000</span> <span class="hljs-number">42.600000</span> <span class="hljs-number">2.381700</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.590000</span> <span class="hljs-number">18.375000</span> <br><span class="hljs-number">0.178990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">5.670000</span> <span class="hljs-number">28.800000</span> <span class="hljs-number">2.798600</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">393.290000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">0.289600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">5.390000</span> <span class="hljs-number">72.900000</span> <span class="hljs-number">2.798600</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">21.140000</span> <span class="hljs-number">14.775000</span> <br><span class="hljs-number">0.268380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">5.794000</span> <span class="hljs-number">70.600000</span> <span class="hljs-number">2.892700</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.100000</span> <span class="hljs-number">13.725000</span> <br><span class="hljs-number">0.239120</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">6.019000</span> <span class="hljs-number">65.300000</span> <span class="hljs-number">2.409100</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">12.920000</span> <span class="hljs-number">15.900000</span> <br><span class="hljs-number">0.177830</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">5.569000</span> <span class="hljs-number">73.500000</span> <span class="hljs-number">2.399900</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">395.770000</span> <span class="hljs-number">15.100000</span> <span class="hljs-number">13.125000</span> <br><span class="hljs-number">0.224380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.585000</span> <span class="hljs-number">6.027000</span> <span class="hljs-number">79.700000</span> <span class="hljs-number">2.498200</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.330000</span> <span class="hljs-number">12.600000</span> <br><span class="hljs-number">0.062630</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">11.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.573000</span> <span class="hljs-number">6.593000</span> <span class="hljs-number">69.100000</span> <span class="hljs-number">2.478600</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">273.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">391.990000</span> <span class="hljs-number">9.670000</span> <span class="hljs-number">16.800000</span> <br><span class="hljs-number">0.045270</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">11.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.573000</span> <span class="hljs-number">6.120000</span> <span class="hljs-number">76.700000</span> <span class="hljs-number">2.287500</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">273.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.080000</span> <span class="hljs-number">15.450000</span> <br><span class="hljs-number">0.060760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">11.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.573000</span> <span class="hljs-number">6.976000</span> <span class="hljs-number">91.000000</span> <span class="hljs-number">2.167500</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">273.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.640000</span> <span class="hljs-number">17.925000</span> <br><span class="hljs-number">0.109590</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">11.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.573000</span> <span class="hljs-number">6.794000</span> <span class="hljs-number">89.300000</span> <span class="hljs-number">2.388900</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">273.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">393.450000</span> <span class="hljs-number">6.480000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.047410</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">11.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.573000</span> <span class="hljs-number">6.030000</span> <span class="hljs-number">80.800000</span> <span class="hljs-number">2.505000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">273.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.880000</span> <span class="hljs-number">8.925000</span> <br><span class="hljs-number">0.228760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.405000</span> <span class="hljs-number">85.400000</span> <span class="hljs-number">2.714700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">70.800000</span> <span class="hljs-number">10.630000</span> <span class="hljs-number">13.950000</span> <br><span class="hljs-number">0.211610</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.137000</span> <span class="hljs-number">87.400000</span> <span class="hljs-number">2.714700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">394.470000</span> <span class="hljs-number">13.440000</span> <span class="hljs-number">14.475000</span> <br><span class="hljs-number">0.139600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.167000</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">2.421000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">392.690000</span> <span class="hljs-number">12.330000</span> <span class="hljs-number">15.075000</span> <br><span class="hljs-number">0.132620</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">5.851000</span> <span class="hljs-number">96.700000</span> <span class="hljs-number">2.106900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">394.050000</span> <span class="hljs-number">16.470000</span> <span class="hljs-number">14.625000</span> <br><span class="hljs-number">0.171200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">5.836000</span> <span class="hljs-number">91.900000</span> <span class="hljs-number">2.211000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">395.670000</span> <span class="hljs-number">18.660000</span> <span class="hljs-number">14.625000</span> <br><span class="hljs-number">0.131170</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.127000</span> <span class="hljs-number">85.200000</span> <span class="hljs-number">2.122400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">387.690000</span> <span class="hljs-number">14.090000</span> <span class="hljs-number">15.300000</span> <br><span class="hljs-number">0.128020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.474000</span> <span class="hljs-number">97.100000</span> <span class="hljs-number">2.432900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">395.240000</span> <span class="hljs-number">12.270000</span> <span class="hljs-number">14.850000</span> <br><span class="hljs-number">0.263630</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.229000</span> <span class="hljs-number">91.200000</span> <span class="hljs-number">2.545100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">391.230000</span> <span class="hljs-number">15.550000</span> <span class="hljs-number">14.550000</span> <br><span class="hljs-number">0.107930</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.195000</span> <span class="hljs-number">54.400000</span> <span class="hljs-number">2.777800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">393.490000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">0.100840</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">6.715000</span> <span class="hljs-number">81.600000</span> <span class="hljs-number">2.677500</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">395.590000</span> <span class="hljs-number">10.160000</span> <span class="hljs-number">17.100000</span> <br><span class="hljs-number">0.123290</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">5.913000</span> <span class="hljs-number">92.900000</span> <span class="hljs-number">2.353400</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">394.950000</span> <span class="hljs-number">16.210000</span> <span class="hljs-number">14.100000</span> <br><span class="hljs-number">0.222120</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">6.092000</span> <span class="hljs-number">95.400000</span> <span class="hljs-number">2.548000</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">17.090000</span> <span class="hljs-number">14.025000</span> <br><span class="hljs-number">0.142310</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">6.254000</span> <span class="hljs-number">84.200000</span> <span class="hljs-number">2.256500</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">388.740000</span> <span class="hljs-number">10.450000</span> <span class="hljs-number">13.875000</span> <br><span class="hljs-number">0.171340</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">5.928000</span> <span class="hljs-number">88.200000</span> <span class="hljs-number">2.463100</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">344.910000</span> <span class="hljs-number">15.760000</span> <span class="hljs-number">13.725000</span> <br><span class="hljs-number">0.131580</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">6.176000</span> <span class="hljs-number">72.500000</span> <span class="hljs-number">2.730100</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">393.300000</span> <span class="hljs-number">12.040000</span> <span class="hljs-number">15.900000</span> <br><span class="hljs-number">0.150980</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">6.021000</span> <span class="hljs-number">82.600000</span> <span class="hljs-number">2.747400</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">394.510000</span> <span class="hljs-number">10.300000</span> <span class="hljs-number">14.400000</span> <br><span class="hljs-number">0.130580</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">5.872000</span> <span class="hljs-number">73.100000</span> <span class="hljs-number">2.477500</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">338.630000</span> <span class="hljs-number">15.370000</span> <span class="hljs-number">15.300000</span> <br><span class="hljs-number">0.144760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.547000</span> <span class="hljs-number">5.731000</span> <span class="hljs-number">65.200000</span> <span class="hljs-number">2.759200</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">432.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">391.500000</span> <span class="hljs-number">13.610000</span> <span class="hljs-number">14.475000</span> <br><span class="hljs-number">0.068990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">5.870000</span> <span class="hljs-number">69.700000</span> <span class="hljs-number">2.257700</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">389.150000</span> <span class="hljs-number">14.370000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.071650</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">6.004000</span> <span class="hljs-number">84.100000</span> <span class="hljs-number">2.197400</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">377.670000</span> <span class="hljs-number">14.270000</span> <span class="hljs-number">15.225000</span> <br><span class="hljs-number">0.092990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">5.961000</span> <span class="hljs-number">92.900000</span> <span class="hljs-number">2.086900</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">378.090000</span> <span class="hljs-number">17.930000</span> <span class="hljs-number">15.375000</span> <br><span class="hljs-number">0.150380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">5.856000</span> <span class="hljs-number">97.000000</span> <span class="hljs-number">1.944400</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">370.310000</span> <span class="hljs-number">25.410000</span> <span class="hljs-number">12.975000</span> <br><span class="hljs-number">0.098490</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">5.879000</span> <span class="hljs-number">95.800000</span> <span class="hljs-number">2.006300</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">379.380000</span> <span class="hljs-number">17.580000</span> <span class="hljs-number">14.100000</span> <br><span class="hljs-number">0.169020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">5.986000</span> <span class="hljs-number">88.400000</span> <span class="hljs-number">1.992900</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">385.020000</span> <span class="hljs-number">14.810000</span> <span class="hljs-number">16.050000</span> <br><span class="hljs-number">0.387350</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">25.650000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.581000</span> <span class="hljs-number">5.613000</span> <span class="hljs-number">95.600000</span> <span class="hljs-number">1.757200</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">188.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">359.290000</span> <span class="hljs-number">27.260000</span> <span class="hljs-number">11.775000</span> <br><span class="hljs-number">0.259150</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.693000</span> <span class="hljs-number">96.000000</span> <span class="hljs-number">1.788300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">392.110000</span> <span class="hljs-number">17.190000</span> <span class="hljs-number">12.150000</span> <br><span class="hljs-number">0.325430</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.431000</span> <span class="hljs-number">98.800000</span> <span class="hljs-number">1.812500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">15.390000</span> <span class="hljs-number">13.500000</span> <br><span class="hljs-number">0.881250</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.637000</span> <span class="hljs-number">94.700000</span> <span class="hljs-number">1.979900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">18.340000</span> <span class="hljs-number">10.725000</span> <br><span class="hljs-number">0.340060</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.458000</span> <span class="hljs-number">98.900000</span> <span class="hljs-number">2.118500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">395.040000</span> <span class="hljs-number">12.600000</span> <span class="hljs-number">14.400000</span> <br><span class="hljs-number">1.192940</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.326000</span> <span class="hljs-number">97.700000</span> <span class="hljs-number">2.271000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">12.260000</span> <span class="hljs-number">14.700000</span> <br><span class="hljs-number">0.590050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.372000</span> <span class="hljs-number">97.900000</span> <span class="hljs-number">2.327400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">385.760000</span> <span class="hljs-number">11.120000</span> <span class="hljs-number">17.250000</span> <br><span class="hljs-number">0.329820</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.822000</span> <span class="hljs-number">95.400000</span> <span class="hljs-number">2.469900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">388.690000</span> <span class="hljs-number">15.030000</span> <span class="hljs-number">13.800000</span> <br><span class="hljs-number">0.976170</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.757000</span> <span class="hljs-number">98.400000</span> <span class="hljs-number">2.346000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">262.760000</span> <span class="hljs-number">17.310000</span> <span class="hljs-number">11.700000</span> <br><span class="hljs-number">0.557780</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.335000</span> <span class="hljs-number">98.200000</span> <span class="hljs-number">2.110700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">394.670000</span> <span class="hljs-number">16.960000</span> <span class="hljs-number">13.575000</span> <br><span class="hljs-number">0.322640</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.942000</span> <span class="hljs-number">93.500000</span> <span class="hljs-number">1.966900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">378.250000</span> <span class="hljs-number">16.900000</span> <span class="hljs-number">13.050000</span> <br><span class="hljs-number">0.352330</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.454000</span> <span class="hljs-number">98.400000</span> <span class="hljs-number">1.849800</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">394.080000</span> <span class="hljs-number">14.590000</span> <span class="hljs-number">12.825000</span> <br><span class="hljs-number">0.249800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.857000</span> <span class="hljs-number">98.200000</span> <span class="hljs-number">1.668600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">392.040000</span> <span class="hljs-number">21.320000</span> <span class="hljs-number">9.975000</span> <br><span class="hljs-number">0.544520</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.151000</span> <span class="hljs-number">97.900000</span> <span class="hljs-number">1.668700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">18.460000</span> <span class="hljs-number">13.350000</span> <br><span class="hljs-number">0.290900</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">6.174000</span> <span class="hljs-number">93.600000</span> <span class="hljs-number">1.611900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">388.080000</span> <span class="hljs-number">24.160000</span> <span class="hljs-number">10.500000</span> <br><span class="hljs-number">1.628640</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">21.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.624000</span> <span class="hljs-number">5.019000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.439400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">437.000000</span> <span class="hljs-number">21.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">34.410000</span> <span class="hljs-number">10.800000</span> <br><span class="hljs-number">3.321050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.403000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.321600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">26.820000</span> <span class="hljs-number">10.050000</span> <br><span class="hljs-number">4.097400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.468000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.411800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">26.420000</span> <span class="hljs-number">11.700000</span> <br><span class="hljs-number">2.779740</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">4.903000</span> <span class="hljs-number">97.800000</span> <span class="hljs-number">1.345900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">29.290000</span> <span class="hljs-number">8.850000</span> <br><span class="hljs-number">2.379340</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">6.130000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.419100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">172.910000</span> <span class="hljs-number">27.800000</span> <span class="hljs-number">10.350000</span> <br><span class="hljs-number">2.155050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.628000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.516600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">169.270000</span> <span class="hljs-number">16.650000</span> <span class="hljs-number">11.700000</span> <br><span class="hljs-number">2.368620</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">4.926000</span> <span class="hljs-number">95.700000</span> <span class="hljs-number">1.460800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">391.710000</span> <span class="hljs-number">29.530000</span> <span class="hljs-number">10.950000</span> <br><span class="hljs-number">2.330990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.186000</span> <span class="hljs-number">93.800000</span> <span class="hljs-number">1.529600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">356.990000</span> <span class="hljs-number">28.320000</span> <span class="hljs-number">13.350000</span> <br><span class="hljs-number">2.733970</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.597000</span> <span class="hljs-number">94.900000</span> <span class="hljs-number">1.525700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">351.850000</span> <span class="hljs-number">21.450000</span> <span class="hljs-number">11.550000</span> <br><span class="hljs-number">1.656600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">6.122000</span> <span class="hljs-number">97.300000</span> <span class="hljs-number">1.618000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">372.800000</span> <span class="hljs-number">14.100000</span> <span class="hljs-number">16.125000</span> <br><span class="hljs-number">1.496320</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.404000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.591600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">341.600000</span> <span class="hljs-number">13.280000</span> <span class="hljs-number">14.700000</span> <br><span class="hljs-number">1.126580</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.012000</span> <span class="hljs-number">88.000000</span> <span class="hljs-number">1.610200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">343.280000</span> <span class="hljs-number">12.120000</span> <span class="hljs-number">11.475000</span> <br><span class="hljs-number">2.149180</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.709000</span> <span class="hljs-number">98.500000</span> <span class="hljs-number">1.623200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">261.950000</span> <span class="hljs-number">15.790000</span> <span class="hljs-number">14.550000</span> <br><span class="hljs-number">1.413850</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">6.129000</span> <span class="hljs-number">96.000000</span> <span class="hljs-number">1.749400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">321.020000</span> <span class="hljs-number">15.120000</span> <span class="hljs-number">12.750000</span> <br><span class="hljs-number">3.535010</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">6.152000</span> <span class="hljs-number">82.600000</span> <span class="hljs-number">1.745500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">88.010000</span> <span class="hljs-number">15.020000</span> <span class="hljs-number">11.700000</span> <br><span class="hljs-number">2.446680</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">5.272000</span> <span class="hljs-number">94.000000</span> <span class="hljs-number">1.736400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">88.630000</span> <span class="hljs-number">16.140000</span> <span class="hljs-number">9.825000</span> <br><span class="hljs-number">1.223580</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">6.943000</span> <span class="hljs-number">97.400000</span> <span class="hljs-number">1.877300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">363.430000</span> <span class="hljs-number">4.590000</span> <span class="hljs-number">30.975000</span> <br><span class="hljs-number">1.342840</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">6.066000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.757300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">353.890000</span> <span class="hljs-number">6.430000</span> <span class="hljs-number">18.225000</span> <br><span class="hljs-number">1.425020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.871000</span> <span class="hljs-number">6.510000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.765900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">364.310000</span> <span class="hljs-number">7.390000</span> <span class="hljs-number">17.475000</span> <br><span class="hljs-number">1.273460</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">6.250000</span> <span class="hljs-number">92.600000</span> <span class="hljs-number">1.798400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">338.920000</span> <span class="hljs-number">5.500000</span> <span class="hljs-number">20.250000</span> <br><span class="hljs-number">1.463360</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">7.489000</span> <span class="hljs-number">90.800000</span> <span class="hljs-number">1.970900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">374.430000</span> <span class="hljs-number">1.730000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">1.833770</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">7.802000</span> <span class="hljs-number">98.200000</span> <span class="hljs-number">2.040700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">389.610000</span> <span class="hljs-number">1.920000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">1.519020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">8.375000</span> <span class="hljs-number">93.900000</span> <span class="hljs-number">2.162000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">388.450000</span> <span class="hljs-number">3.320000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">2.242360</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">5.854000</span> <span class="hljs-number">91.800000</span> <span class="hljs-number">2.422000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">395.110000</span> <span class="hljs-number">11.640000</span> <span class="hljs-number">17.025000</span> <br><span class="hljs-number">2.924000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">6.101000</span> <span class="hljs-number">93.000000</span> <span class="hljs-number">2.283400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">240.160000</span> <span class="hljs-number">9.810000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">2.010190</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">7.929000</span> <span class="hljs-number">96.200000</span> <span class="hljs-number">2.045900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">369.300000</span> <span class="hljs-number">3.700000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">1.800280</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">5.877000</span> <span class="hljs-number">79.200000</span> <span class="hljs-number">2.425900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">227.610000</span> <span class="hljs-number">12.140000</span> <span class="hljs-number">17.850000</span> <br><span class="hljs-number">2.300400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">6.319000</span> <span class="hljs-number">96.100000</span> <span class="hljs-number">2.100000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">297.090000</span> <span class="hljs-number">11.100000</span> <span class="hljs-number">17.850000</span> <br><span class="hljs-number">2.449530</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">6.402000</span> <span class="hljs-number">95.200000</span> <span class="hljs-number">2.262500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">330.040000</span> <span class="hljs-number">11.320000</span> <span class="hljs-number">16.725000</span> <br><span class="hljs-number">1.207420</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">5.875000</span> <span class="hljs-number">94.600000</span> <span class="hljs-number">2.425900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">292.290000</span> <span class="hljs-number">14.430000</span> <span class="hljs-number">13.050000</span> <br><span class="hljs-number">2.313900</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">19.580000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.605000</span> <span class="hljs-number">5.880000</span> <span class="hljs-number">97.300000</span> <span class="hljs-number">2.388700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">403.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">348.130000</span> <span class="hljs-number">12.030000</span> <span class="hljs-number">14.325000</span> <br><span class="hljs-number">0.139140</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">5.572000</span> <span class="hljs-number">88.500000</span> <span class="hljs-number">2.596100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.690000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">0.091780</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">6.416000</span> <span class="hljs-number">84.100000</span> <span class="hljs-number">2.646300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">395.500000</span> <span class="hljs-number">9.040000</span> <span class="hljs-number">17.700000</span> <br><span class="hljs-number">0.084470</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">5.859000</span> <span class="hljs-number">68.700000</span> <span class="hljs-number">2.701900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">393.230000</span> <span class="hljs-number">9.640000</span> <span class="hljs-number">16.950000</span> <br><span class="hljs-number">0.066640</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">6.546000</span> <span class="hljs-number">33.100000</span> <span class="hljs-number">3.132300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">390.960000</span> <span class="hljs-number">5.330000</span> <span class="hljs-number">22.050000</span> <br><span class="hljs-number">0.070220</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">6.020000</span> <span class="hljs-number">47.200000</span> <span class="hljs-number">3.554900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">393.230000</span> <span class="hljs-number">10.110000</span> <span class="hljs-number">17.400000</span> <br><span class="hljs-number">0.054250</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">6.315000</span> <span class="hljs-number">73.400000</span> <span class="hljs-number">3.317500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">395.600000</span> <span class="hljs-number">6.290000</span> <span class="hljs-number">18.450000</span> <br><span class="hljs-number">0.066420</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.050000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.510000</span> <span class="hljs-number">6.860000</span> <span class="hljs-number">74.400000</span> <span class="hljs-number">2.915300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">391.270000</span> <span class="hljs-number">6.920000</span> <span class="hljs-number">22.425000</span> <br><span class="hljs-number">0.057800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">6.980000</span> <span class="hljs-number">58.400000</span> <span class="hljs-number">2.829000</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.040000</span> <span class="hljs-number">27.900000</span> <br><span class="hljs-number">0.065880</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">7.765000</span> <span class="hljs-number">83.300000</span> <span class="hljs-number">2.741000</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">395.560000</span> <span class="hljs-number">7.560000</span> <span class="hljs-number">29.850000</span> <br><span class="hljs-number">0.068880</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">6.144000</span> <span class="hljs-number">62.200000</span> <span class="hljs-number">2.597900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.450000</span> <span class="hljs-number">27.150000</span> <br><span class="hljs-number">0.091030</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">7.155000</span> <span class="hljs-number">92.200000</span> <span class="hljs-number">2.700600</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">394.120000</span> <span class="hljs-number">4.820000</span> <span class="hljs-number">28.425000</span> <br><span class="hljs-number">0.100080</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">6.563000</span> <span class="hljs-number">95.600000</span> <span class="hljs-number">2.847000</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.680000</span> <span class="hljs-number">24.375000</span> <br><span class="hljs-number">0.083080</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">5.604000</span> <span class="hljs-number">89.800000</span> <span class="hljs-number">2.987900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">391.000000</span> <span class="hljs-number">13.980000</span> <span class="hljs-number">19.800000</span> <br><span class="hljs-number">0.060470</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">6.153000</span> <span class="hljs-number">68.800000</span> <span class="hljs-number">3.279700</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">387.110000</span> <span class="hljs-number">13.150000</span> <span class="hljs-number">22.200000</span> <br><span class="hljs-number">0.056020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.488000</span> <span class="hljs-number">7.831000</span> <span class="hljs-number">53.600000</span> <span class="hljs-number">3.199200</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">193.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">392.630000</span> <span class="hljs-number">4.450000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.078750</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">3.440000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.782000</span> <span class="hljs-number">41.100000</span> <span class="hljs-number">3.788600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">393.870000</span> <span class="hljs-number">6.680000</span> <span class="hljs-number">24.000000</span> <br><span class="hljs-number">0.125790</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">3.440000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.556000</span> <span class="hljs-number">29.100000</span> <span class="hljs-number">4.566700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">382.840000</span> <span class="hljs-number">4.560000</span> <span class="hljs-number">22.350000</span> <br><span class="hljs-number">0.083700</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">3.440000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">7.185000</span> <span class="hljs-number">38.900000</span> <span class="hljs-number">4.566700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.390000</span> <span class="hljs-number">26.175000</span> <br><span class="hljs-number">0.090680</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">3.440000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.951000</span> <span class="hljs-number">21.500000</span> <span class="hljs-number">6.479800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">377.680000</span> <span class="hljs-number">5.100000</span> <span class="hljs-number">27.750000</span> <br><span class="hljs-number">0.069110</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">3.440000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.739000</span> <span class="hljs-number">30.800000</span> <span class="hljs-number">6.479800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">389.710000</span> <span class="hljs-number">4.690000</span> <span class="hljs-number">22.875000</span> <br><span class="hljs-number">0.086640</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">3.440000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">7.178000</span> <span class="hljs-number">26.300000</span> <span class="hljs-number">6.479800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">390.490000</span> <span class="hljs-number">2.870000</span> <span class="hljs-number">27.300000</span> <br><span class="hljs-number">0.021870</span> <span class="hljs-number">60.000000</span> <span class="hljs-number">2.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.401000</span> <span class="hljs-number">6.800000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">6.219600</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">265.000000</span> <span class="hljs-number">15.600000</span> <span class="hljs-number">393.370000</span> <span class="hljs-number">5.030000</span> <span class="hljs-number">23.325000</span> <br><span class="hljs-number">0.014390</span> <span class="hljs-number">60.000000</span> <span class="hljs-number">2.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.401000</span> <span class="hljs-number">6.604000</span> <span class="hljs-number">18.800000</span> <span class="hljs-number">6.219600</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">265.000000</span> <span class="hljs-number">15.600000</span> <span class="hljs-number">376.700000</span> <span class="hljs-number">4.380000</span> <span class="hljs-number">21.825000</span> <br><span class="hljs-number">0.013810</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">0.460000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.422000</span> <span class="hljs-number">7.875000</span> <span class="hljs-number">32.000000</span> <span class="hljs-number">5.648400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">255.000000</span> <span class="hljs-number">14.400000</span> <span class="hljs-number">394.230000</span> <span class="hljs-number">2.970000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.040110</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">1.520000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.404000</span> <span class="hljs-number">7.287000</span> <span class="hljs-number">34.100000</span> <span class="hljs-number">7.309000</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">329.000000</span> <span class="hljs-number">12.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.080000</span> <span class="hljs-number">24.975000</span> <br><span class="hljs-number">0.046660</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">1.520000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.404000</span> <span class="hljs-number">7.107000</span> <span class="hljs-number">36.600000</span> <span class="hljs-number">7.309000</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">329.000000</span> <span class="hljs-number">12.600000</span> <span class="hljs-number">354.310000</span> <span class="hljs-number">8.610000</span> <span class="hljs-number">22.725000</span> <br><span class="hljs-number">0.037680</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">1.520000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.404000</span> <span class="hljs-number">7.274000</span> <span class="hljs-number">38.300000</span> <span class="hljs-number">7.309000</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">329.000000</span> <span class="hljs-number">12.600000</span> <span class="hljs-number">392.200000</span> <span class="hljs-number">6.620000</span> <span class="hljs-number">25.950000</span> <br><span class="hljs-number">0.031500</span> <span class="hljs-number">95.000000</span> <span class="hljs-number">1.470000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.403000</span> <span class="hljs-number">6.975000</span> <span class="hljs-number">15.300000</span> <span class="hljs-number">7.653400</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">402.000000</span> <span class="hljs-number">17.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.560000</span> <span class="hljs-number">26.175000</span> <br><span class="hljs-number">0.017780</span> <span class="hljs-number">95.000000</span> <span class="hljs-number">1.470000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.403000</span> <span class="hljs-number">7.135000</span> <span class="hljs-number">13.900000</span> <span class="hljs-number">7.653400</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">402.000000</span> <span class="hljs-number">17.000000</span> <span class="hljs-number">384.300000</span> <span class="hljs-number">4.450000</span> <span class="hljs-number">24.675000</span> <br><span class="hljs-number">0.034450</span> <span class="hljs-number">82.500000</span> <span class="hljs-number">2.030000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.415000</span> <span class="hljs-number">6.162000</span> <span class="hljs-number">38.400000</span> <span class="hljs-number">6.270000</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">348.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">393.770000</span> <span class="hljs-number">7.430000</span> <span class="hljs-number">18.075000</span> <br><span class="hljs-number">0.021770</span> <span class="hljs-number">82.500000</span> <span class="hljs-number">2.030000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.415000</span> <span class="hljs-number">7.610000</span> <span class="hljs-number">15.700000</span> <span class="hljs-number">6.270000</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">348.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">395.380000</span> <span class="hljs-number">3.110000</span> <span class="hljs-number">31.725000</span> <br><span class="hljs-number">0.035100</span> <span class="hljs-number">95.000000</span> <span class="hljs-number">2.680000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.416100</span> <span class="hljs-number">7.853000</span> <span class="hljs-number">33.200000</span> <span class="hljs-number">5.118000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">392.780000</span> <span class="hljs-number">3.810000</span> <span class="hljs-number">36.375000</span> <br><span class="hljs-number">0.020090</span> <span class="hljs-number">95.000000</span> <span class="hljs-number">2.680000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.416100</span> <span class="hljs-number">8.034000</span> <span class="hljs-number">31.900000</span> <span class="hljs-number">5.118000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">390.550000</span> <span class="hljs-number">2.880000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.136420</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.891000</span> <span class="hljs-number">22.300000</span> <span class="hljs-number">3.945400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">10.870000</span> <span class="hljs-number">16.950000</span> <br><span class="hljs-number">0.229690</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">6.326000</span> <span class="hljs-number">52.500000</span> <span class="hljs-number">4.354900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">394.870000</span> <span class="hljs-number">10.970000</span> <span class="hljs-number">18.300000</span> <br><span class="hljs-number">0.251990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.783000</span> <span class="hljs-number">72.700000</span> <span class="hljs-number">4.354900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">389.430000</span> <span class="hljs-number">18.060000</span> <span class="hljs-number">16.875000</span> <br><span class="hljs-number">0.135870</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">6.064000</span> <span class="hljs-number">59.100000</span> <span class="hljs-number">4.239200</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">381.320000</span> <span class="hljs-number">14.660000</span> <span class="hljs-number">18.300000</span> <br><span class="hljs-number">0.435710</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.344000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">3.875000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">23.090000</span> <span class="hljs-number">15.000000</span> <br><span class="hljs-number">0.174460</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.960000</span> <span class="hljs-number">92.100000</span> <span class="hljs-number">3.877100</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">393.250000</span> <span class="hljs-number">17.270000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">0.375780</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.404000</span> <span class="hljs-number">88.600000</span> <span class="hljs-number">3.665000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">395.240000</span> <span class="hljs-number">23.980000</span> <span class="hljs-number">14.475000</span> <br><span class="hljs-number">0.217190</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.807000</span> <span class="hljs-number">53.800000</span> <span class="hljs-number">3.652600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">390.940000</span> <span class="hljs-number">16.030000</span> <span class="hljs-number">16.800000</span> <br><span class="hljs-number">0.140520</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">6.375000</span> <span class="hljs-number">32.300000</span> <span class="hljs-number">3.945400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">385.810000</span> <span class="hljs-number">9.380000</span> <span class="hljs-number">21.075000</span> <br><span class="hljs-number">0.289550</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">5.412000</span> <span class="hljs-number">9.800000</span> <span class="hljs-number">3.587500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">348.930000</span> <span class="hljs-number">29.550000</span> <span class="hljs-number">17.775000</span> <br><span class="hljs-number">0.198020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">6.182000</span> <span class="hljs-number">42.400000</span> <span class="hljs-number">3.945400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">277.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">393.630000</span> <span class="hljs-number">9.470000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">0.045600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.890000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.550000</span> <span class="hljs-number">5.888000</span> <span class="hljs-number">56.000000</span> <span class="hljs-number">3.112100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">16.400000</span> <span class="hljs-number">392.800000</span> <span class="hljs-number">13.510000</span> <span class="hljs-number">17.475000</span> <br><span class="hljs-number">0.070130</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.550000</span> <span class="hljs-number">6.642000</span> <span class="hljs-number">85.100000</span> <span class="hljs-number">3.421100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">16.400000</span> <span class="hljs-number">392.780000</span> <span class="hljs-number">9.690000</span> <span class="hljs-number">21.525000</span> <br><span class="hljs-number">0.110690</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.890000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.550000</span> <span class="hljs-number">5.951000</span> <span class="hljs-number">93.800000</span> <span class="hljs-number">2.889300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">16.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">17.920000</span> <span class="hljs-number">16.125000</span> <br><span class="hljs-number">0.114250</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.890000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.550000</span> <span class="hljs-number">6.373000</span> <span class="hljs-number">92.400000</span> <span class="hljs-number">3.363300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">16.400000</span> <span class="hljs-number">393.740000</span> <span class="hljs-number">10.500000</span> <span class="hljs-number">17.250000</span> <br><span class="hljs-number">0.358090</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.951000</span> <span class="hljs-number">88.500000</span> <span class="hljs-number">2.861700</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">391.700000</span> <span class="hljs-number">9.710000</span> <span class="hljs-number">20.025000</span> <br><span class="hljs-number">0.407710</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.164000</span> <span class="hljs-number">91.300000</span> <span class="hljs-number">3.048000</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">395.240000</span> <span class="hljs-number">21.460000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">0.623560</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.879000</span> <span class="hljs-number">77.700000</span> <span class="hljs-number">3.272100</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">390.390000</span> <span class="hljs-number">9.930000</span> <span class="hljs-number">20.625000</span> <br><span class="hljs-number">0.614700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.618000</span> <span class="hljs-number">80.800000</span> <span class="hljs-number">3.272100</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.600000</span> <span class="hljs-number">22.575000</span> <br><span class="hljs-number">0.315330</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">8.266000</span> <span class="hljs-number">78.300000</span> <span class="hljs-number">2.894400</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">385.050000</span> <span class="hljs-number">4.140000</span> <span class="hljs-number">33.600000</span> <br><span class="hljs-number">0.526930</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">8.725000</span> <span class="hljs-number">83.000000</span> <span class="hljs-number">2.894400</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">382.000000</span> <span class="hljs-number">4.630000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.382140</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">8.040000</span> <span class="hljs-number">86.500000</span> <span class="hljs-number">3.215700</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">387.380000</span> <span class="hljs-number">3.130000</span> <span class="hljs-number">28.200000</span> <br><span class="hljs-number">0.412380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">7.163000</span> <span class="hljs-number">79.900000</span> <span class="hljs-number">3.215700</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">372.080000</span> <span class="hljs-number">6.360000</span> <span class="hljs-number">23.700000</span> <br><span class="hljs-number">0.298190</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">7.686000</span> <span class="hljs-number">17.000000</span> <span class="hljs-number">3.375100</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">377.510000</span> <span class="hljs-number">3.920000</span> <span class="hljs-number">35.025000</span> <br><span class="hljs-number">0.441780</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">6.552000</span> <span class="hljs-number">21.400000</span> <span class="hljs-number">3.375100</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">380.340000</span> <span class="hljs-number">3.760000</span> <span class="hljs-number">23.625000</span> <br><span class="hljs-number">0.537000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">5.981000</span> <span class="hljs-number">68.100000</span> <span class="hljs-number">3.671500</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">378.350000</span> <span class="hljs-number">11.650000</span> <span class="hljs-number">18.225000</span> <br><span class="hljs-number">0.462960</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.504000</span> <span class="hljs-number">7.412000</span> <span class="hljs-number">76.900000</span> <span class="hljs-number">3.671500</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">376.140000</span> <span class="hljs-number">5.250000</span> <span class="hljs-number">23.775000</span> <br><span class="hljs-number">0.575290</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">8.337000</span> <span class="hljs-number">73.300000</span> <span class="hljs-number">3.838400</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">385.910000</span> <span class="hljs-number">2.470000</span> <span class="hljs-number">31.275000</span> <br><span class="hljs-number">0.331470</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">8.247000</span> <span class="hljs-number">70.400000</span> <span class="hljs-number">3.651900</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">378.950000</span> <span class="hljs-number">3.950000</span> <span class="hljs-number">36.225000</span> <br><span class="hljs-number">0.447910</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.726000</span> <span class="hljs-number">66.500000</span> <span class="hljs-number">3.651900</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">360.200000</span> <span class="hljs-number">8.050000</span> <span class="hljs-number">21.750000</span> <br><span class="hljs-number">0.330450</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.086000</span> <span class="hljs-number">61.500000</span> <span class="hljs-number">3.651900</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">376.750000</span> <span class="hljs-number">10.880000</span> <span class="hljs-number">18.000000</span> <br><span class="hljs-number">0.520580</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">6.631000</span> <span class="hljs-number">76.500000</span> <span class="hljs-number">4.148000</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">388.450000</span> <span class="hljs-number">9.540000</span> <span class="hljs-number">18.825000</span> <br><span class="hljs-number">0.511830</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.507000</span> <span class="hljs-number">7.358000</span> <span class="hljs-number">71.600000</span> <span class="hljs-number">4.148000</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">17.400000</span> <span class="hljs-number">390.070000</span> <span class="hljs-number">4.730000</span> <span class="hljs-number">23.625000</span> <br><span class="hljs-number">0.082440</span> <span class="hljs-number">30.000000</span> <span class="hljs-number">4.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.481000</span> <span class="hljs-number">18.500000</span> <span class="hljs-number">6.189900</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">379.410000</span> <span class="hljs-number">6.360000</span> <span class="hljs-number">17.775000</span> <br><span class="hljs-number">0.092520</span> <span class="hljs-number">30.000000</span> <span class="hljs-number">4.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.606000</span> <span class="hljs-number">42.200000</span> <span class="hljs-number">6.189900</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">383.780000</span> <span class="hljs-number">7.370000</span> <span class="hljs-number">17.475000</span> <br><span class="hljs-number">0.113290</span> <span class="hljs-number">30.000000</span> <span class="hljs-number">4.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.897000</span> <span class="hljs-number">54.300000</span> <span class="hljs-number">6.336100</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">391.250000</span> <span class="hljs-number">11.380000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.106120</span> <span class="hljs-number">30.000000</span> <span class="hljs-number">4.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.095000</span> <span class="hljs-number">65.100000</span> <span class="hljs-number">6.336100</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">394.620000</span> <span class="hljs-number">12.400000</span> <span class="hljs-number">15.075000</span> <br><span class="hljs-number">0.102900</span> <span class="hljs-number">30.000000</span> <span class="hljs-number">4.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.358000</span> <span class="hljs-number">52.900000</span> <span class="hljs-number">7.035500</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">372.750000</span> <span class="hljs-number">11.220000</span> <span class="hljs-number">16.650000</span> <br><span class="hljs-number">0.127570</span> <span class="hljs-number">30.000000</span> <span class="hljs-number">4.930000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.393000</span> <span class="hljs-number">7.800000</span> <span class="hljs-number">7.035500</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">374.710000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">17.775000</span> <br><span class="hljs-number">0.206080</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">5.593000</span> <span class="hljs-number">76.500000</span> <span class="hljs-number">7.954900</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">372.490000</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">13.200000</span> <br><span class="hljs-number">0.191330</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">5.605000</span> <span class="hljs-number">70.200000</span> <span class="hljs-number">7.954900</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">389.130000</span> <span class="hljs-number">18.460000</span> <span class="hljs-number">13.875000</span> <br><span class="hljs-number">0.339830</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.108000</span> <span class="hljs-number">34.900000</span> <span class="hljs-number">8.055500</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">390.180000</span> <span class="hljs-number">9.160000</span> <span class="hljs-number">18.225000</span> <br><span class="hljs-number">0.196570</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.226000</span> <span class="hljs-number">79.200000</span> <span class="hljs-number">8.055500</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">376.140000</span> <span class="hljs-number">10.150000</span> <span class="hljs-number">15.375000</span> <br><span class="hljs-number">0.164390</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.433000</span> <span class="hljs-number">49.100000</span> <span class="hljs-number">7.826500</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">374.710000</span> <span class="hljs-number">9.520000</span> <span class="hljs-number">18.375000</span> <br><span class="hljs-number">0.190730</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.718000</span> <span class="hljs-number">17.500000</span> <span class="hljs-number">7.826500</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">393.740000</span> <span class="hljs-number">6.560000</span> <span class="hljs-number">19.650000</span> <br><span class="hljs-number">0.140300</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.487000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">7.396700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">396.280000</span> <span class="hljs-number">5.900000</span> <span class="hljs-number">18.300000</span> <br><span class="hljs-number">0.214090</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.438000</span> <span class="hljs-number">8.900000</span> <span class="hljs-number">7.396700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">377.070000</span> <span class="hljs-number">3.590000</span> <span class="hljs-number">18.600000</span> <br><span class="hljs-number">0.082210</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">6.957000</span> <span class="hljs-number">6.800000</span> <span class="hljs-number">8.906700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">386.090000</span> <span class="hljs-number">3.530000</span> <span class="hljs-number">22.200000</span> <br><span class="hljs-number">0.368940</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">5.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.431000</span> <span class="hljs-number">8.259000</span> <span class="hljs-number">8.400000</span> <span class="hljs-number">8.906700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">330.000000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">3.540000</span> <span class="hljs-number">32.100000</span> <br><span class="hljs-number">0.048190</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">3.640000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.392000</span> <span class="hljs-number">6.108000</span> <span class="hljs-number">32.000000</span> <span class="hljs-number">9.220300</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">315.000000</span> <span class="hljs-number">16.400000</span> <span class="hljs-number">392.890000</span> <span class="hljs-number">6.570000</span> <span class="hljs-number">16.425000</span> <br><span class="hljs-number">0.035480</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">3.640000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.392000</span> <span class="hljs-number">5.876000</span> <span class="hljs-number">19.100000</span> <span class="hljs-number">9.220300</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">315.000000</span> <span class="hljs-number">16.400000</span> <span class="hljs-number">395.180000</span> <span class="hljs-number">9.250000</span> <span class="hljs-number">15.675000</span> <br><span class="hljs-number">0.015380</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">3.750000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.394000</span> <span class="hljs-number">7.454000</span> <span class="hljs-number">34.200000</span> <span class="hljs-number">6.336100</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">244.000000</span> <span class="hljs-number">15.900000</span> <span class="hljs-number">386.340000</span> <span class="hljs-number">3.110000</span> <span class="hljs-number">33.000000</span> <br><span class="hljs-number">0.611540</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">8.704000</span> <span class="hljs-number">86.900000</span> <span class="hljs-number">1.801000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">389.700000</span> <span class="hljs-number">5.120000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.663510</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">7.333000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.894600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">383.290000</span> <span class="hljs-number">7.790000</span> <span class="hljs-number">27.000000</span> <br><span class="hljs-number">0.656650</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">6.842000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">2.010700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">391.930000</span> <span class="hljs-number">6.900000</span> <span class="hljs-number">22.575000</span> <br><span class="hljs-number">0.540110</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">7.203000</span> <span class="hljs-number">81.800000</span> <span class="hljs-number">2.112100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">392.800000</span> <span class="hljs-number">9.590000</span> <span class="hljs-number">25.350000</span> <br><span class="hljs-number">0.534120</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">7.520000</span> <span class="hljs-number">89.400000</span> <span class="hljs-number">2.139800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">388.370000</span> <span class="hljs-number">7.260000</span> <span class="hljs-number">32.325000</span> <br><span class="hljs-number">0.520140</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">8.398000</span> <span class="hljs-number">91.500000</span> <span class="hljs-number">2.288500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">386.860000</span> <span class="hljs-number">5.910000</span> <span class="hljs-number">36.600000</span> <br><span class="hljs-number">0.825260</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">7.327000</span> <span class="hljs-number">94.500000</span> <span class="hljs-number">2.078800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">393.420000</span> <span class="hljs-number">11.250000</span> <span class="hljs-number">23.250000</span> <br><span class="hljs-number">0.550070</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">7.206000</span> <span class="hljs-number">91.600000</span> <span class="hljs-number">1.930100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">387.890000</span> <span class="hljs-number">8.100000</span> <span class="hljs-number">27.375000</span> <br><span class="hljs-number">0.761620</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">5.560000</span> <span class="hljs-number">62.800000</span> <span class="hljs-number">1.986500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">392.400000</span> <span class="hljs-number">10.450000</span> <span class="hljs-number">17.100000</span> <br><span class="hljs-number">0.785700</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.647000</span> <span class="hljs-number">7.014000</span> <span class="hljs-number">84.600000</span> <span class="hljs-number">2.132900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">384.070000</span> <span class="hljs-number">14.790000</span> <span class="hljs-number">23.025000</span> <br><span class="hljs-number">0.578340</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.575000</span> <span class="hljs-number">8.297000</span> <span class="hljs-number">67.000000</span> <span class="hljs-number">2.421600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">384.540000</span> <span class="hljs-number">7.440000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.540500</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.575000</span> <span class="hljs-number">7.470000</span> <span class="hljs-number">52.600000</span> <span class="hljs-number">2.872000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">264.000000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">390.300000</span> <span class="hljs-number">3.160000</span> <span class="hljs-number">32.625000</span> <br><span class="hljs-number">0.090650</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">6.960000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">5.920000</span> <span class="hljs-number">61.500000</span> <span class="hljs-number">3.917500</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">223.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">391.340000</span> <span class="hljs-number">13.650000</span> <span class="hljs-number">15.525000</span> <br><span class="hljs-number">0.299160</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">6.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">5.856000</span> <span class="hljs-number">42.100000</span> <span class="hljs-number">4.429000</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">223.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">388.650000</span> <span class="hljs-number">13.000000</span> <span class="hljs-number">15.825000</span> <br><span class="hljs-number">0.162110</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">6.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">6.240000</span> <span class="hljs-number">16.300000</span> <span class="hljs-number">4.429000</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">223.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.590000</span> <span class="hljs-number">18.900000</span> <br><span class="hljs-number">0.114600</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">6.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">6.538000</span> <span class="hljs-number">58.700000</span> <span class="hljs-number">3.917500</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">223.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">394.960000</span> <span class="hljs-number">7.730000</span> <span class="hljs-number">18.300000</span> <br><span class="hljs-number">0.221880</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">6.960000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">7.691000</span> <span class="hljs-number">51.800000</span> <span class="hljs-number">4.366500</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">223.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">390.770000</span> <span class="hljs-number">6.580000</span> <span class="hljs-number">26.400000</span> <br><span class="hljs-number">0.056440</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">6.410000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.447000</span> <span class="hljs-number">6.758000</span> <span class="hljs-number">32.900000</span> <span class="hljs-number">4.077600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">254.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">3.530000</span> <span class="hljs-number">24.300000</span> <br><span class="hljs-number">0.096040</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">6.410000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.447000</span> <span class="hljs-number">6.854000</span> <span class="hljs-number">42.800000</span> <span class="hljs-number">4.267300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">254.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">2.980000</span> <span class="hljs-number">24.000000</span> <br><span class="hljs-number">0.104690</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">6.410000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.447000</span> <span class="hljs-number">7.267000</span> <span class="hljs-number">49.000000</span> <span class="hljs-number">4.787200</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">254.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">389.250000</span> <span class="hljs-number">6.050000</span> <span class="hljs-number">24.900000</span> <br><span class="hljs-number">0.061270</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">6.410000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.447000</span> <span class="hljs-number">6.826000</span> <span class="hljs-number">27.600000</span> <span class="hljs-number">4.862800</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">254.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">393.450000</span> <span class="hljs-number">4.160000</span> <span class="hljs-number">24.825000</span> <br><span class="hljs-number">0.079780</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">6.410000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.447000</span> <span class="hljs-number">6.482000</span> <span class="hljs-number">32.100000</span> <span class="hljs-number">4.140300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">254.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.190000</span> <span class="hljs-number">21.825000</span> <br><span class="hljs-number">0.210380</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.330000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.442900</span> <span class="hljs-number">6.812000</span> <span class="hljs-number">32.200000</span> <span class="hljs-number">4.100700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">216.000000</span> <span class="hljs-number">14.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.850000</span> <span class="hljs-number">26.325000</span> <br><span class="hljs-number">0.035780</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.330000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.442900</span> <span class="hljs-number">7.820000</span> <span class="hljs-number">64.500000</span> <span class="hljs-number">4.694700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">216.000000</span> <span class="hljs-number">14.900000</span> <span class="hljs-number">387.310000</span> <span class="hljs-number">3.760000</span> <span class="hljs-number">34.050000</span> <br><span class="hljs-number">0.037050</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.330000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.442900</span> <span class="hljs-number">6.968000</span> <span class="hljs-number">37.200000</span> <span class="hljs-number">5.244700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">216.000000</span> <span class="hljs-number">14.900000</span> <span class="hljs-number">392.230000</span> <span class="hljs-number">4.590000</span> <span class="hljs-number">26.550000</span> <br><span class="hljs-number">0.061290</span> <span class="hljs-number">20.000000</span> <span class="hljs-number">3.330000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.442900</span> <span class="hljs-number">7.645000</span> <span class="hljs-number">49.700000</span> <span class="hljs-number">5.211900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">216.000000</span> <span class="hljs-number">14.900000</span> <span class="hljs-number">377.070000</span> <span class="hljs-number">3.010000</span> <span class="hljs-number">34.500000</span> <br><span class="hljs-number">0.015010</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">1.210000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.401000</span> <span class="hljs-number">7.923000</span> <span class="hljs-number">24.800000</span> <span class="hljs-number">5.885000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">198.000000</span> <span class="hljs-number">13.600000</span> <span class="hljs-number">395.520000</span> <span class="hljs-number">3.160000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">0.009060</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">2.970000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.400000</span> <span class="hljs-number">7.088000</span> <span class="hljs-number">20.800000</span> <span class="hljs-number">7.307300</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">285.000000</span> <span class="hljs-number">15.300000</span> <span class="hljs-number">394.720000</span> <span class="hljs-number">7.850000</span> <span class="hljs-number">24.150000</span> <br><span class="hljs-number">0.010960</span> <span class="hljs-number">55.000000</span> <span class="hljs-number">2.250000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.389000</span> <span class="hljs-number">6.453000</span> <span class="hljs-number">31.900000</span> <span class="hljs-number">7.307300</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">300.000000</span> <span class="hljs-number">15.300000</span> <span class="hljs-number">394.720000</span> <span class="hljs-number">8.230000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.019650</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">1.760000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.385000</span> <span class="hljs-number">6.230000</span> <span class="hljs-number">31.500000</span> <span class="hljs-number">9.089200</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">241.000000</span> <span class="hljs-number">18.200000</span> <span class="hljs-number">341.600000</span> <span class="hljs-number">12.930000</span> <span class="hljs-number">15.075000</span> <br><span class="hljs-number">0.038710</span> <span class="hljs-number">52.500000</span> <span class="hljs-number">5.320000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.405000</span> <span class="hljs-number">6.209000</span> <span class="hljs-number">31.300000</span> <span class="hljs-number">7.317200</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">293.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.140000</span> <span class="hljs-number">17.400000</span> <br><span class="hljs-number">0.045900</span> <span class="hljs-number">52.500000</span> <span class="hljs-number">5.320000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.405000</span> <span class="hljs-number">6.315000</span> <span class="hljs-number">45.600000</span> <span class="hljs-number">7.317200</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">293.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.600000</span> <span class="hljs-number">16.725000</span> <br><span class="hljs-number">0.042970</span> <span class="hljs-number">52.500000</span> <span class="hljs-number">5.320000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.405000</span> <span class="hljs-number">6.565000</span> <span class="hljs-number">22.900000</span> <span class="hljs-number">7.317200</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">293.000000</span> <span class="hljs-number">16.600000</span> <span class="hljs-number">371.720000</span> <span class="hljs-number">9.510000</span> <span class="hljs-number">18.600000</span> <br><span class="hljs-number">0.035020</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">4.950000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.411000</span> <span class="hljs-number">6.861000</span> <span class="hljs-number">27.900000</span> <span class="hljs-number">5.116700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">245.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">3.330000</span> <span class="hljs-number">21.375000</span> <br><span class="hljs-number">0.078860</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">4.950000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.411000</span> <span class="hljs-number">7.148000</span> <span class="hljs-number">27.700000</span> <span class="hljs-number">5.116700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">245.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">3.560000</span> <span class="hljs-number">27.975000</span> <br><span class="hljs-number">0.036150</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">4.950000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.411000</span> <span class="hljs-number">6.630000</span> <span class="hljs-number">23.400000</span> <span class="hljs-number">5.116700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">245.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.700000</span> <span class="hljs-number">20.925000</span> <br><span class="hljs-number">0.082650</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.920000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.127000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">5.502700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">289.000000</span> <span class="hljs-number">16.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">8.580000</span> <span class="hljs-number">17.925000</span> <br><span class="hljs-number">0.081990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.920000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.009000</span> <span class="hljs-number">42.300000</span> <span class="hljs-number">5.502700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">289.000000</span> <span class="hljs-number">16.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">10.400000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">0.129320</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.920000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.678000</span> <span class="hljs-number">31.100000</span> <span class="hljs-number">5.960400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">289.000000</span> <span class="hljs-number">16.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.270000</span> <span class="hljs-number">21.450000</span> <br><span class="hljs-number">0.053720</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.920000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.549000</span> <span class="hljs-number">51.000000</span> <span class="hljs-number">5.960400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">289.000000</span> <span class="hljs-number">16.000000</span> <span class="hljs-number">392.850000</span> <span class="hljs-number">7.390000</span> <span class="hljs-number">20.325000</span> <br><span class="hljs-number">0.141030</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">13.920000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">5.790000</span> <span class="hljs-number">58.000000</span> <span class="hljs-number">6.320000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">289.000000</span> <span class="hljs-number">16.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">15.840000</span> <span class="hljs-number">15.225000</span> <br><span class="hljs-number">0.064660</span> <span class="hljs-number">70.000000</span> <span class="hljs-number">2.240000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.400000</span> <span class="hljs-number">6.345000</span> <span class="hljs-number">20.100000</span> <span class="hljs-number">7.827800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">358.000000</span> <span class="hljs-number">14.800000</span> <span class="hljs-number">368.240000</span> <span class="hljs-number">4.970000</span> <span class="hljs-number">16.875000</span> <br><span class="hljs-number">0.055610</span> <span class="hljs-number">70.000000</span> <span class="hljs-number">2.240000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.400000</span> <span class="hljs-number">7.041000</span> <span class="hljs-number">10.000000</span> <span class="hljs-number">7.827800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">358.000000</span> <span class="hljs-number">14.800000</span> <span class="hljs-number">371.580000</span> <span class="hljs-number">4.740000</span> <span class="hljs-number">21.750000</span> <br><span class="hljs-number">0.044170</span> <span class="hljs-number">70.000000</span> <span class="hljs-number">2.240000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.400000</span> <span class="hljs-number">6.871000</span> <span class="hljs-number">47.400000</span> <span class="hljs-number">7.827800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">358.000000</span> <span class="hljs-number">14.800000</span> <span class="hljs-number">390.860000</span> <span class="hljs-number">6.070000</span> <span class="hljs-number">18.600000</span> <br><span class="hljs-number">0.035370</span> <span class="hljs-number">34.000000</span> <span class="hljs-number">6.090000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.433000</span> <span class="hljs-number">6.590000</span> <span class="hljs-number">40.400000</span> <span class="hljs-number">5.491700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">329.000000</span> <span class="hljs-number">16.100000</span> <span class="hljs-number">395.750000</span> <span class="hljs-number">9.500000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.092660</span> <span class="hljs-number">34.000000</span> <span class="hljs-number">6.090000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.433000</span> <span class="hljs-number">6.495000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">5.491700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">329.000000</span> <span class="hljs-number">16.100000</span> <span class="hljs-number">383.610000</span> <span class="hljs-number">8.670000</span> <span class="hljs-number">19.800000</span> <br><span class="hljs-number">0.100000</span> <span class="hljs-number">34.000000</span> <span class="hljs-number">6.090000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.433000</span> <span class="hljs-number">6.982000</span> <span class="hljs-number">17.700000</span> <span class="hljs-number">5.491700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">329.000000</span> <span class="hljs-number">16.100000</span> <span class="hljs-number">390.430000</span> <span class="hljs-number">4.860000</span> <span class="hljs-number">24.825000</span> <br><span class="hljs-number">0.055150</span> <span class="hljs-number">33.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.472000</span> <span class="hljs-number">7.236000</span> <span class="hljs-number">41.100000</span> <span class="hljs-number">4.022000</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">393.680000</span> <span class="hljs-number">6.930000</span> <span class="hljs-number">27.075000</span> <br><span class="hljs-number">0.054790</span> <span class="hljs-number">33.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.472000</span> <span class="hljs-number">6.616000</span> <span class="hljs-number">58.100000</span> <span class="hljs-number">3.370000</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">393.360000</span> <span class="hljs-number">8.930000</span> <span class="hljs-number">21.300000</span> <br><span class="hljs-number">0.075030</span> <span class="hljs-number">33.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.472000</span> <span class="hljs-number">7.420000</span> <span class="hljs-number">71.900000</span> <span class="hljs-number">3.099200</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.470000</span> <span class="hljs-number">25.050000</span> <br><span class="hljs-number">0.049320</span> <span class="hljs-number">33.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.472000</span> <span class="hljs-number">6.849000</span> <span class="hljs-number">70.300000</span> <span class="hljs-number">3.182700</span> <span class="hljs-number">7.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.530000</span> <span class="hljs-number">21.150000</span> <br><span class="hljs-number">0.492980</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.635000</span> <span class="hljs-number">82.500000</span> <span class="hljs-number">3.317500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.540000</span> <span class="hljs-number">17.100000</span> <br><span class="hljs-number">0.349400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">5.972000</span> <span class="hljs-number">76.700000</span> <span class="hljs-number">3.102500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.240000</span> <span class="hljs-number">9.970000</span> <span class="hljs-number">15.225000</span> <br><span class="hljs-number">2.635480</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">4.973000</span> <span class="hljs-number">37.800000</span> <span class="hljs-number">2.519400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">350.450000</span> <span class="hljs-number">12.640000</span> <span class="hljs-number">12.075000</span> <br><span class="hljs-number">0.790410</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.122000</span> <span class="hljs-number">52.800000</span> <span class="hljs-number">2.640300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.980000</span> <span class="hljs-number">16.575000</span> <br><span class="hljs-number">0.261690</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.023000</span> <span class="hljs-number">90.400000</span> <span class="hljs-number">2.834000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.300000</span> <span class="hljs-number">11.720000</span> <span class="hljs-number">14.550000</span> <br><span class="hljs-number">0.269380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.266000</span> <span class="hljs-number">82.800000</span> <span class="hljs-number">3.262800</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">393.390000</span> <span class="hljs-number">7.900000</span> <span class="hljs-number">16.200000</span> <br><span class="hljs-number">0.369200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.567000</span> <span class="hljs-number">87.300000</span> <span class="hljs-number">3.602300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">395.690000</span> <span class="hljs-number">9.280000</span> <span class="hljs-number">17.850000</span> <br><span class="hljs-number">0.253560</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">5.705000</span> <span class="hljs-number">77.700000</span> <span class="hljs-number">3.945000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.420000</span> <span class="hljs-number">11.500000</span> <span class="hljs-number">12.150000</span> <br><span class="hljs-number">0.318270</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">5.914000</span> <span class="hljs-number">83.200000</span> <span class="hljs-number">3.998600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">390.700000</span> <span class="hljs-number">18.330000</span> <span class="hljs-number">13.350000</span> <br><span class="hljs-number">0.245220</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">5.782000</span> <span class="hljs-number">71.700000</span> <span class="hljs-number">4.031700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">15.940000</span> <span class="hljs-number">14.850000</span> <br><span class="hljs-number">0.402020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.382000</span> <span class="hljs-number">67.200000</span> <span class="hljs-number">3.532500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">395.210000</span> <span class="hljs-number">10.360000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">0.475470</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">9.900000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.544000</span> <span class="hljs-number">6.113000</span> <span class="hljs-number">58.800000</span> <span class="hljs-number">4.001900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">18.400000</span> <span class="hljs-number">396.230000</span> <span class="hljs-number">12.730000</span> <span class="hljs-number">15.750000</span> <br><span class="hljs-number">0.167600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.426000</span> <span class="hljs-number">52.300000</span> <span class="hljs-number">4.540400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.200000</span> <span class="hljs-number">17.850000</span> <br><span class="hljs-number">0.181590</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.376000</span> <span class="hljs-number">54.300000</span> <span class="hljs-number">4.540400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.870000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">0.351140</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.041000</span> <span class="hljs-number">49.900000</span> <span class="hljs-number">4.721100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.700000</span> <span class="hljs-number">15.300000</span> <br><span class="hljs-number">0.283920</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">5.708000</span> <span class="hljs-number">74.300000</span> <span class="hljs-number">4.721100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">391.130000</span> <span class="hljs-number">11.740000</span> <span class="hljs-number">13.875000</span> <br><span class="hljs-number">0.341090</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.415000</span> <span class="hljs-number">40.100000</span> <span class="hljs-number">4.721100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.120000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">0.191860</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.431000</span> <span class="hljs-number">14.700000</span> <span class="hljs-number">5.415900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">393.680000</span> <span class="hljs-number">5.080000</span> <span class="hljs-number">18.450000</span> <br><span class="hljs-number">0.303470</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.312000</span> <span class="hljs-number">28.900000</span> <span class="hljs-number">5.415900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.150000</span> <span class="hljs-number">17.250000</span> <br><span class="hljs-number">0.241030</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.493000</span> <span class="hljs-number">6.083000</span> <span class="hljs-number">43.700000</span> <span class="hljs-number">5.415900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">287.000000</span> <span class="hljs-number">19.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">12.790000</span> <span class="hljs-number">16.650000</span> <br><span class="hljs-number">0.066170</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.240000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.460000</span> <span class="hljs-number">5.868000</span> <span class="hljs-number">25.800000</span> <span class="hljs-number">5.214600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">430.000000</span> <span class="hljs-number">16.900000</span> <span class="hljs-number">382.440000</span> <span class="hljs-number">9.970000</span> <span class="hljs-number">14.475000</span> <br><span class="hljs-number">0.067240</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.240000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.460000</span> <span class="hljs-number">6.333000</span> <span class="hljs-number">17.200000</span> <span class="hljs-number">5.214600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">430.000000</span> <span class="hljs-number">16.900000</span> <span class="hljs-number">375.210000</span> <span class="hljs-number">7.340000</span> <span class="hljs-number">16.950000</span> <br><span class="hljs-number">0.045440</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.240000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.460000</span> <span class="hljs-number">6.144000</span> <span class="hljs-number">32.200000</span> <span class="hljs-number">5.873600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">430.000000</span> <span class="hljs-number">16.900000</span> <span class="hljs-number">368.570000</span> <span class="hljs-number">9.090000</span> <span class="hljs-number">14.850000</span> <br><span class="hljs-number">0.050230</span> <span class="hljs-number">35.000000</span> <span class="hljs-number">6.060000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437900</span> <span class="hljs-number">5.706000</span> <span class="hljs-number">28.400000</span> <span class="hljs-number">6.640700</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">16.900000</span> <span class="hljs-number">394.020000</span> <span class="hljs-number">12.430000</span> <span class="hljs-number">12.825000</span> <br><span class="hljs-number">0.034660</span> <span class="hljs-number">35.000000</span> <span class="hljs-number">6.060000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437900</span> <span class="hljs-number">6.031000</span> <span class="hljs-number">23.300000</span> <span class="hljs-number">6.640700</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">304.000000</span> <span class="hljs-number">16.900000</span> <span class="hljs-number">362.250000</span> <span class="hljs-number">7.830000</span> <span class="hljs-number">14.550000</span> <br><span class="hljs-number">0.050830</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">6.316000</span> <span class="hljs-number">38.100000</span> <span class="hljs-number">6.458400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">389.710000</span> <span class="hljs-number">5.680000</span> <span class="hljs-number">16.650000</span> <br><span class="hljs-number">0.037380</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">6.310000</span> <span class="hljs-number">38.500000</span> <span class="hljs-number">6.458400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">389.400000</span> <span class="hljs-number">6.750000</span> <span class="hljs-number">15.525000</span> <br><span class="hljs-number">0.039610</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">6.037000</span> <span class="hljs-number">34.500000</span> <span class="hljs-number">5.985300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">8.010000</span> <span class="hljs-number">15.825000</span> <br><span class="hljs-number">0.034270</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">5.869000</span> <span class="hljs-number">46.300000</span> <span class="hljs-number">5.231100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.800000</span> <span class="hljs-number">14.625000</span> <br><span class="hljs-number">0.030410</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">5.895000</span> <span class="hljs-number">59.600000</span> <span class="hljs-number">5.615000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">394.810000</span> <span class="hljs-number">10.560000</span> <span class="hljs-number">13.875000</span> <br><span class="hljs-number">0.033060</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">6.059000</span> <span class="hljs-number">37.300000</span> <span class="hljs-number">4.812200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.140000</span> <span class="hljs-number">8.510000</span> <span class="hljs-number">15.450000</span> <br><span class="hljs-number">0.054970</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">5.985000</span> <span class="hljs-number">45.400000</span> <span class="hljs-number">4.812200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.740000</span> <span class="hljs-number">14.250000</span> <br><span class="hljs-number">0.061510</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.190000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.515000</span> <span class="hljs-number">5.968000</span> <span class="hljs-number">58.500000</span> <span class="hljs-number">4.812200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">224.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.290000</span> <span class="hljs-number">14.025000</span> <br><span class="hljs-number">0.013010</span> <span class="hljs-number">35.000000</span> <span class="hljs-number">1.520000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.442000</span> <span class="hljs-number">7.241000</span> <span class="hljs-number">49.300000</span> <span class="hljs-number">7.037900</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">15.500000</span> <span class="hljs-number">394.740000</span> <span class="hljs-number">5.490000</span> <span class="hljs-number">24.525000</span> <br><span class="hljs-number">0.024980</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">1.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.518000</span> <span class="hljs-number">6.540000</span> <span class="hljs-number">59.700000</span> <span class="hljs-number">6.266900</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">422.000000</span> <span class="hljs-number">15.900000</span> <span class="hljs-number">389.960000</span> <span class="hljs-number">8.650000</span> <span class="hljs-number">12.375000</span> <br><span class="hljs-number">0.025430</span> <span class="hljs-number">55.000000</span> <span class="hljs-number">3.780000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.484000</span> <span class="hljs-number">6.696000</span> <span class="hljs-number">56.400000</span> <span class="hljs-number">5.732100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">370.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">7.180000</span> <span class="hljs-number">17.925000</span> <br><span class="hljs-number">0.030490</span> <span class="hljs-number">55.000000</span> <span class="hljs-number">3.780000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.484000</span> <span class="hljs-number">6.874000</span> <span class="hljs-number">28.100000</span> <span class="hljs-number">6.465400</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">370.000000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">387.970000</span> <span class="hljs-number">4.610000</span> <span class="hljs-number">23.400000</span> <br><span class="hljs-number">0.031130</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.390000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.442000</span> <span class="hljs-number">6.014000</span> <span class="hljs-number">48.500000</span> <span class="hljs-number">8.013600</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">352.000000</span> <span class="hljs-number">18.800000</span> <span class="hljs-number">385.640000</span> <span class="hljs-number">10.530000</span> <span class="hljs-number">13.125000</span> <br><span class="hljs-number">0.061620</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.390000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.442000</span> <span class="hljs-number">5.898000</span> <span class="hljs-number">52.300000</span> <span class="hljs-number">8.013600</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">352.000000</span> <span class="hljs-number">18.800000</span> <span class="hljs-number">364.610000</span> <span class="hljs-number">12.670000</span> <span class="hljs-number">12.900000</span> <br><span class="hljs-number">0.018700</span> <span class="hljs-number">85.000000</span> <span class="hljs-number">4.150000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.429000</span> <span class="hljs-number">6.516000</span> <span class="hljs-number">27.700000</span> <span class="hljs-number">8.535300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">351.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">392.430000</span> <span class="hljs-number">6.360000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">0.015010</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">2.010000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.435000</span> <span class="hljs-number">6.635000</span> <span class="hljs-number">29.700000</span> <span class="hljs-number">8.344000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">280.000000</span> <span class="hljs-number">17.000000</span> <span class="hljs-number">390.940000</span> <span class="hljs-number">5.990000</span> <span class="hljs-number">18.375000</span> <br><span class="hljs-number">0.028990</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">1.250000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.429000</span> <span class="hljs-number">6.939000</span> <span class="hljs-number">34.500000</span> <span class="hljs-number">8.792100</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">335.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">389.850000</span> <span class="hljs-number">5.890000</span> <span class="hljs-number">19.950000</span> <br><span class="hljs-number">0.062110</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">1.250000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.429000</span> <span class="hljs-number">6.490000</span> <span class="hljs-number">44.400000</span> <span class="hljs-number">8.792100</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">335.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.980000</span> <span class="hljs-number">17.175000</span> <br><span class="hljs-number">0.079500</span> <span class="hljs-number">60.000000</span> <span class="hljs-number">1.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.411000</span> <span class="hljs-number">6.579000</span> <span class="hljs-number">35.900000</span> <span class="hljs-number">10.710300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">411.000000</span> <span class="hljs-number">18.300000</span> <span class="hljs-number">370.780000</span> <span class="hljs-number">5.490000</span> <span class="hljs-number">18.075000</span> <br><span class="hljs-number">0.072440</span> <span class="hljs-number">60.000000</span> <span class="hljs-number">1.690000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.411000</span> <span class="hljs-number">5.884000</span> <span class="hljs-number">18.500000</span> <span class="hljs-number">10.710300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">411.000000</span> <span class="hljs-number">18.300000</span> <span class="hljs-number">392.330000</span> <span class="hljs-number">7.790000</span> <span class="hljs-number">13.950000</span> <br><span class="hljs-number">0.017090</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">2.020000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.410000</span> <span class="hljs-number">6.728000</span> <span class="hljs-number">36.100000</span> <span class="hljs-number">12.126500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">187.000000</span> <span class="hljs-number">17.000000</span> <span class="hljs-number">384.460000</span> <span class="hljs-number">4.500000</span> <span class="hljs-number">22.575000</span> <br><span class="hljs-number">0.043010</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">1.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.413000</span> <span class="hljs-number">5.663000</span> <span class="hljs-number">21.900000</span> <span class="hljs-number">10.585700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">334.000000</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">382.800000</span> <span class="hljs-number">8.050000</span> <span class="hljs-number">13.650000</span> <br><span class="hljs-number">0.106590</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">1.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.413000</span> <span class="hljs-number">5.936000</span> <span class="hljs-number">19.500000</span> <span class="hljs-number">10.585700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">334.000000</span> <span class="hljs-number">22.000000</span> <span class="hljs-number">376.040000</span> <span class="hljs-number">5.570000</span> <span class="hljs-number">15.450000</span> <br><span class="hljs-number">8.982960</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">6.212000</span> <span class="hljs-number">97.400000</span> <span class="hljs-number">2.122200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">377.730000</span> <span class="hljs-number">17.600000</span> <span class="hljs-number">13.350000</span> <br><span class="hljs-number">3.849700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">6.395000</span> <span class="hljs-number">91.000000</span> <span class="hljs-number">2.505200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">391.340000</span> <span class="hljs-number">13.270000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">5.201770</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">6.127000</span> <span class="hljs-number">83.400000</span> <span class="hljs-number">2.722700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">395.430000</span> <span class="hljs-number">11.480000</span> <span class="hljs-number">17.025000</span> <br><span class="hljs-number">4.261310</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">6.112000</span> <span class="hljs-number">81.300000</span> <span class="hljs-number">2.509100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">390.740000</span> <span class="hljs-number">12.670000</span> <span class="hljs-number">16.950000</span> <br><span class="hljs-number">4.541920</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">6.398000</span> <span class="hljs-number">88.000000</span> <span class="hljs-number">2.518200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">374.560000</span> <span class="hljs-number">7.790000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">3.836840</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">6.251000</span> <span class="hljs-number">91.100000</span> <span class="hljs-number">2.295500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">350.650000</span> <span class="hljs-number">14.190000</span> <span class="hljs-number">14.925000</span> <br><span class="hljs-number">3.678220</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">5.362000</span> <span class="hljs-number">96.200000</span> <span class="hljs-number">2.103600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">380.790000</span> <span class="hljs-number">10.190000</span> <span class="hljs-number">15.600000</span> <br><span class="hljs-number">4.222390</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.770000</span> <span class="hljs-number">5.803000</span> <span class="hljs-number">89.000000</span> <span class="hljs-number">1.904700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">353.040000</span> <span class="hljs-number">14.640000</span> <span class="hljs-number">12.600000</span> <br><span class="hljs-number">3.474280</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.718000</span> <span class="hljs-number">8.780000</span> <span class="hljs-number">82.900000</span> <span class="hljs-number">1.904700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">354.550000</span> <span class="hljs-number">5.290000</span> <span class="hljs-number">16.425000</span> <br><span class="hljs-number">4.555870</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.718000</span> <span class="hljs-number">3.561000</span> <span class="hljs-number">87.900000</span> <span class="hljs-number">1.613200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">354.700000</span> <span class="hljs-number">7.120000</span> <span class="hljs-number">20.625000</span> <br><span class="hljs-number">3.696950</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.718000</span> <span class="hljs-number">4.963000</span> <span class="hljs-number">91.400000</span> <span class="hljs-number">1.752300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">316.030000</span> <span class="hljs-number">14.000000</span> <span class="hljs-number">16.425000</span> <br><span class="hljs-number">13.522200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.631000</span> <span class="hljs-number">3.863000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.510600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">131.420000</span> <span class="hljs-number">13.330000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">4.898220</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.631000</span> <span class="hljs-number">4.970000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.332500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">375.520000</span> <span class="hljs-number">3.260000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">5.669980</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.631000</span> <span class="hljs-number">6.683000</span> <span class="hljs-number">96.800000</span> <span class="hljs-number">1.356700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">375.330000</span> <span class="hljs-number">3.730000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">6.538760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.631000</span> <span class="hljs-number">7.016000</span> <span class="hljs-number">97.500000</span> <span class="hljs-number">1.202400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">392.050000</span> <span class="hljs-number">2.960000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">9.232300</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.631000</span> <span class="hljs-number">6.216000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.169100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">366.150000</span> <span class="hljs-number">9.530000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">8.267250</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">0.668000</span> <span class="hljs-number">5.875000</span> <span class="hljs-number">89.600000</span> <span class="hljs-number">1.129600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">347.880000</span> <span class="hljs-number">8.880000</span> <span class="hljs-number">37.500000</span> <br><span class="hljs-number">11.108100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.668000</span> <span class="hljs-number">4.906000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.174200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">34.770000</span> <span class="hljs-number">10.350000</span> <br><span class="hljs-number">18.498200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.668000</span> <span class="hljs-number">4.138000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.137000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">37.970000</span> <span class="hljs-number">10.350000</span> <br><span class="hljs-number">19.609100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">7.313000</span> <span class="hljs-number">97.900000</span> <span class="hljs-number">1.316300</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.440000</span> <span class="hljs-number">11.250000</span> <br><span class="hljs-number">15.288000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">6.649000</span> <span class="hljs-number">93.300000</span> <span class="hljs-number">1.344900</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">363.020000</span> <span class="hljs-number">23.240000</span> <span class="hljs-number">10.425000</span> <br><span class="hljs-number">9.823490</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">6.794000</span> <span class="hljs-number">98.800000</span> <span class="hljs-number">1.358000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">21.240000</span> <span class="hljs-number">9.975000</span> <br><span class="hljs-number">23.648200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">6.380000</span> <span class="hljs-number">96.200000</span> <span class="hljs-number">1.386100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">23.690000</span> <span class="hljs-number">9.825000</span> <br><span class="hljs-number">17.866700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">6.223000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.386100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">393.740000</span> <span class="hljs-number">21.780000</span> <span class="hljs-number">7.650000</span> <br><span class="hljs-number">88.976200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">6.968000</span> <span class="hljs-number">91.900000</span> <span class="hljs-number">1.416500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">17.210000</span> <span class="hljs-number">7.800000</span> <br><span class="hljs-number">15.874400</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.671000</span> <span class="hljs-number">6.545000</span> <span class="hljs-number">99.100000</span> <span class="hljs-number">1.519200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">21.080000</span> <span class="hljs-number">8.175000</span> <br><span class="hljs-number">9.187020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.536000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.580400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">23.600000</span> <span class="hljs-number">8.475000</span> <br><span class="hljs-number">7.992480</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.520000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.533100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">24.560000</span> <span class="hljs-number">9.225000</span> <br><span class="hljs-number">20.084900</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">4.368000</span> <span class="hljs-number">91.200000</span> <span class="hljs-number">1.439500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">285.830000</span> <span class="hljs-number">30.630000</span> <span class="hljs-number">6.600000</span> <br><span class="hljs-number">16.811800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.277000</span> <span class="hljs-number">98.100000</span> <span class="hljs-number">1.426100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">30.810000</span> <span class="hljs-number">5.400000</span> <br><span class="hljs-number">24.393800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">4.652000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.467200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">28.280000</span> <span class="hljs-number">7.875000</span> <br><span class="hljs-number">22.597100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">89.500000</span> <span class="hljs-number">1.518400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">31.990000</span> <span class="hljs-number">5.550000</span> <br><span class="hljs-number">14.333700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">4.880000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.589500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">372.920000</span> <span class="hljs-number">30.620000</span> <span class="hljs-number">7.650000</span> <br><span class="hljs-number">8.151740</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.390000</span> <span class="hljs-number">98.900000</span> <span class="hljs-number">1.728100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">20.850000</span> <span class="hljs-number">8.625000</span> <br><span class="hljs-number">6.962150</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.713000</span> <span class="hljs-number">97.000000</span> <span class="hljs-number">1.926500</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">394.430000</span> <span class="hljs-number">17.110000</span> <span class="hljs-number">11.325000</span> <br><span class="hljs-number">5.293050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">6.051000</span> <span class="hljs-number">82.500000</span> <span class="hljs-number">2.167800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">378.380000</span> <span class="hljs-number">18.760000</span> <span class="hljs-number">17.400000</span> <br><span class="hljs-number">11.577900</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.700000</span> <span class="hljs-number">5.036000</span> <span class="hljs-number">97.000000</span> <span class="hljs-number">1.770000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">25.680000</span> <span class="hljs-number">7.275000</span> <br><span class="hljs-number">8.644760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">6.193000</span> <span class="hljs-number">92.600000</span> <span class="hljs-number">1.791200</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">15.170000</span> <span class="hljs-number">10.350000</span> <br><span class="hljs-number">13.359800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.887000</span> <span class="hljs-number">94.700000</span> <span class="hljs-number">1.782100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">16.350000</span> <span class="hljs-number">9.525000</span> <br><span class="hljs-number">8.716750</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">6.471000</span> <span class="hljs-number">98.800000</span> <span class="hljs-number">1.725700</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">391.980000</span> <span class="hljs-number">17.120000</span> <span class="hljs-number">9.825000</span> <br><span class="hljs-number">5.872050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">6.405000</span> <span class="hljs-number">96.000000</span> <span class="hljs-number">1.676800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">19.370000</span> <span class="hljs-number">9.375000</span> <br><span class="hljs-number">7.672020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.747000</span> <span class="hljs-number">98.900000</span> <span class="hljs-number">1.633400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">393.100000</span> <span class="hljs-number">19.920000</span> <span class="hljs-number">6.375000</span> <br><span class="hljs-number">38.351800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.453000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.489600</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">30.590000</span> <span class="hljs-number">3.750000</span> <br><span class="hljs-number">9.916550</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.852000</span> <span class="hljs-number">77.800000</span> <span class="hljs-number">1.500400</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">338.160000</span> <span class="hljs-number">29.970000</span> <span class="hljs-number">4.725000</span> <br><span class="hljs-number">25.046100</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.987000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.588800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">26.770000</span> <span class="hljs-number">4.200000</span> <br><span class="hljs-number">14.236200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">6.343000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.574100</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">20.320000</span> <span class="hljs-number">5.400000</span> <br><span class="hljs-number">9.595710</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">6.404000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.639000</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">376.110000</span> <span class="hljs-number">20.310000</span> <span class="hljs-number">9.075000</span> <br><span class="hljs-number">24.801700</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">18.100000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.693000</span> <span class="hljs-number">5.349000</span> <span class="hljs-number">96.000000</span> <span class="hljs-number">1.702800</span> <span class="hljs-number">24.000000</span> <span class="hljs-number">666.000000</span> <span class="hljs-number">20.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">19.770000</span> <span class="hljs-number">6.225000</span> <br><span class="hljs-number">0.006320</span> <span class="hljs-number">18.000000</span> <span class="hljs-number">2.310000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.575000</span> <span class="hljs-number">65.200000</span> <span class="hljs-number">4.090000</span> <span class="hljs-number">1.000000</span> <span class="hljs-number">296.000000</span> <span class="hljs-number">15.300000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.980000</span> <span class="hljs-number">18.000000</span> <br><span class="hljs-number">0.027310</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.070000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.469000</span> <span class="hljs-number">6.421000</span> <span class="hljs-number">78.900000</span> <span class="hljs-number">4.967100</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">242.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.140000</span> <span class="hljs-number">16.200000</span> <br><span class="hljs-number">0.027290</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">7.070000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.469000</span> <span class="hljs-number">7.185000</span> <span class="hljs-number">61.100000</span> <span class="hljs-number">4.967100</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">242.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">392.830000</span> <span class="hljs-number">4.030000</span> <span class="hljs-number">26.025000</span> <br><span class="hljs-number">0.032370</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.458000</span> <span class="hljs-number">6.998000</span> <span class="hljs-number">45.800000</span> <span class="hljs-number">6.062200</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">394.630000</span> <span class="hljs-number">2.940000</span> <span class="hljs-number">25.050000</span> <br><span class="hljs-number">0.069050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.458000</span> <span class="hljs-number">7.147000</span> <span class="hljs-number">54.200000</span> <span class="hljs-number">6.062200</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.330000</span> <span class="hljs-number">27.150000</span> <br><span class="hljs-number">0.029850</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.180000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.458000</span> <span class="hljs-number">6.430000</span> <span class="hljs-number">58.700000</span> <span class="hljs-number">6.062200</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">222.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">394.120000</span> <span class="hljs-number">5.210000</span> <span class="hljs-number">21.525000</span> <br><span class="hljs-number">0.088290</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">6.012000</span> <span class="hljs-number">66.600000</span> <span class="hljs-number">5.560500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">395.600000</span> <span class="hljs-number">12.430000</span> <span class="hljs-number">17.175000</span> <br><span class="hljs-number">0.144550</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">6.172000</span> <span class="hljs-number">96.100000</span> <span class="hljs-number">5.950500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">19.150000</span> <span class="hljs-number">20.325000</span> <br><span class="hljs-number">0.211240</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">5.631000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">6.082100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">386.630000</span> <span class="hljs-number">29.930000</span> <span class="hljs-number">12.375000</span> <br><span class="hljs-number">0.170040</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">6.004000</span> <span class="hljs-number">85.900000</span> <span class="hljs-number">6.592100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">386.710000</span> <span class="hljs-number">17.100000</span> <span class="hljs-number">14.175000</span> <br><span class="hljs-number">0.224890</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">6.377000</span> <span class="hljs-number">94.300000</span> <span class="hljs-number">6.346700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">392.520000</span> <span class="hljs-number">20.450000</span> <span class="hljs-number">11.250000</span> <br><span class="hljs-number">0.117470</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">6.009000</span> <span class="hljs-number">82.900000</span> <span class="hljs-number">6.226700</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.270000</span> <span class="hljs-number">14.175000</span> <br><span class="hljs-number">0.093780</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">7.870000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.524000</span> <span class="hljs-number">5.889000</span> <span class="hljs-number">39.000000</span> <span class="hljs-number">5.450900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">311.000000</span> <span class="hljs-number">15.200000</span> <span class="hljs-number">390.500000</span> <span class="hljs-number">15.710000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">0.629760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.949000</span> <span class="hljs-number">61.800000</span> <span class="hljs-number">4.707500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">8.260000</span> <span class="hljs-number">15.300000</span> <br><span class="hljs-number">0.637960</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.096000</span> <span class="hljs-number">84.500000</span> <span class="hljs-number">4.461900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">380.020000</span> <span class="hljs-number">10.260000</span> <span class="hljs-number">13.650000</span> <br><span class="hljs-number">0.627390</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.834000</span> <span class="hljs-number">56.500000</span> <span class="hljs-number">4.498600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">395.620000</span> <span class="hljs-number">8.470000</span> <span class="hljs-number">14.925000</span> <br><span class="hljs-number">1.053930</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.935000</span> <span class="hljs-number">29.300000</span> <span class="hljs-number">4.498600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">386.850000</span> <span class="hljs-number">6.580000</span> <span class="hljs-number">17.325000</span> <br><span class="hljs-number">0.784200</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.990000</span> <span class="hljs-number">81.700000</span> <span class="hljs-number">4.257900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">386.750000</span> <span class="hljs-number">14.670000</span> <span class="hljs-number">13.125000</span> <br><span class="hljs-number">0.802710</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.456000</span> <span class="hljs-number">36.600000</span> <span class="hljs-number">3.796500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">288.990000</span> <span class="hljs-number">11.690000</span> <span class="hljs-number">15.150000</span> <br><span class="hljs-number">0.725800</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.727000</span> <span class="hljs-number">69.500000</span> <span class="hljs-number">3.796500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">390.950000</span> <span class="hljs-number">11.280000</span> <span class="hljs-number">13.650000</span> <br><span class="hljs-number">1.251790</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.570000</span> <span class="hljs-number">98.100000</span> <span class="hljs-number">3.797900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">376.570000</span> <span class="hljs-number">21.020000</span> <span class="hljs-number">10.200000</span> <br><span class="hljs-number">0.852040</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.965000</span> <span class="hljs-number">89.200000</span> <span class="hljs-number">4.012300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">392.530000</span> <span class="hljs-number">13.830000</span> <span class="hljs-number">14.700000</span> <br><span class="hljs-number">1.232470</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.142000</span> <span class="hljs-number">91.700000</span> <span class="hljs-number">3.976900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">18.720000</span> <span class="hljs-number">11.400000</span> <br><span class="hljs-number">0.988430</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.813000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">4.095200</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">394.540000</span> <span class="hljs-number">19.880000</span> <span class="hljs-number">10.875000</span> <br><span class="hljs-number">0.750260</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.924000</span> <span class="hljs-number">94.100000</span> <span class="hljs-number">4.399600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">394.330000</span> <span class="hljs-number">16.300000</span> <span class="hljs-number">11.700000</span> <br><span class="hljs-number">0.840540</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.599000</span> <span class="hljs-number">85.700000</span> <span class="hljs-number">4.454600</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">303.420000</span> <span class="hljs-number">16.510000</span> <span class="hljs-number">10.425000</span> <br><span class="hljs-number">0.671910</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.813000</span> <span class="hljs-number">90.300000</span> <span class="hljs-number">4.682000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">376.880000</span> <span class="hljs-number">14.810000</span> <span class="hljs-number">12.450000</span> <br><span class="hljs-number">0.955770</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.047000</span> <span class="hljs-number">88.800000</span> <span class="hljs-number">4.453400</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">306.380000</span> <span class="hljs-number">17.280000</span> <span class="hljs-number">11.100000</span> <br><span class="hljs-number">0.772990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.495000</span> <span class="hljs-number">94.400000</span> <span class="hljs-number">4.454700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">387.940000</span> <span class="hljs-number">12.800000</span> <span class="hljs-number">13.800000</span> <br><span class="hljs-number">1.002450</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.674000</span> <span class="hljs-number">87.300000</span> <span class="hljs-number">4.239000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">380.230000</span> <span class="hljs-number">11.980000</span> <span class="hljs-number">15.750000</span> <br><span class="hljs-number">1.130810</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.713000</span> <span class="hljs-number">94.100000</span> <span class="hljs-number">4.233000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">360.170000</span> <span class="hljs-number">22.600000</span> <span class="hljs-number">9.525000</span> <br><span class="hljs-number">1.354720</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.072000</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">4.175000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">376.730000</span> <span class="hljs-number">13.040000</span> <span class="hljs-number">10.875000</span> <br><span class="hljs-number">1.387990</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.950000</span> <span class="hljs-number">82.000000</span> <span class="hljs-number">3.990000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">232.600000</span> <span class="hljs-number">27.710000</span> <span class="hljs-number">9.900000</span> <br><span class="hljs-number">1.151720</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">5.701000</span> <span class="hljs-number">95.000000</span> <span class="hljs-number">3.787200</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">358.770000</span> <span class="hljs-number">18.350000</span> <span class="hljs-number">9.825000</span> <br><span class="hljs-number">1.612820</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.140000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.538000</span> <span class="hljs-number">6.096000</span> <span class="hljs-number">96.900000</span> <span class="hljs-number">3.759800</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">307.000000</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">248.310000</span> <span class="hljs-number">20.340000</span> <span class="hljs-number">10.125000</span> <br><span class="hljs-number">0.064170</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.499000</span> <span class="hljs-number">5.933000</span> <span class="hljs-number">68.200000</span> <span class="hljs-number">3.360300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">279.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.680000</span> <span class="hljs-number">14.175000</span> <br><span class="hljs-number">0.097440</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.499000</span> <span class="hljs-number">5.841000</span> <span class="hljs-number">61.400000</span> <span class="hljs-number">3.377900</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">279.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">377.560000</span> <span class="hljs-number">11.410000</span> <span class="hljs-number">15.000000</span> <br><span class="hljs-number">0.080140</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.499000</span> <span class="hljs-number">5.850000</span> <span class="hljs-number">41.500000</span> <span class="hljs-number">3.934200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">279.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">8.770000</span> <span class="hljs-number">15.750000</span> <br><span class="hljs-number">0.175050</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">5.960000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.499000</span> <span class="hljs-number">5.966000</span> <span class="hljs-number">30.200000</span> <span class="hljs-number">3.847300</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">279.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">393.430000</span> <span class="hljs-number">10.130000</span> <span class="hljs-number">18.525000</span> <br><span class="hljs-number">0.027630</span> <span class="hljs-number">75.000000</span> <span class="hljs-number">2.950000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">6.595000</span> <span class="hljs-number">21.800000</span> <span class="hljs-number">5.401100</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">252.000000</span> <span class="hljs-number">18.300000</span> <span class="hljs-number">395.630000</span> <span class="hljs-number">4.320000</span> <span class="hljs-number">23.100000</span> <br><span class="hljs-number">0.033590</span> <span class="hljs-number">75.000000</span> <span class="hljs-number">2.950000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.428000</span> <span class="hljs-number">7.024000</span> <span class="hljs-number">15.800000</span> <span class="hljs-number">5.401100</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">252.000000</span> <span class="hljs-number">18.300000</span> <span class="hljs-number">395.620000</span> <span class="hljs-number">1.980000</span> <span class="hljs-number">26.175000</span> <br><span class="hljs-number">0.127440</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">6.770000</span> <span class="hljs-number">2.900000</span> <span class="hljs-number">5.720900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">385.410000</span> <span class="hljs-number">4.840000</span> <span class="hljs-number">19.950000</span> <br><span class="hljs-number">0.141500</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">6.169000</span> <span class="hljs-number">6.600000</span> <span class="hljs-number">5.720900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">383.370000</span> <span class="hljs-number">5.810000</span> <span class="hljs-number">18.975000</span> <br><span class="hljs-number">0.159360</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">6.211000</span> <span class="hljs-number">6.500000</span> <span class="hljs-number">5.720900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">394.460000</span> <span class="hljs-number">7.440000</span> <span class="hljs-number">18.525000</span> <br><span class="hljs-number">0.122690</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">6.069000</span> <span class="hljs-number">40.000000</span> <span class="hljs-number">5.720900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">389.390000</span> <span class="hljs-number">9.550000</span> <span class="hljs-number">15.900000</span> <br><span class="hljs-number">0.171420</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">5.682000</span> <span class="hljs-number">33.800000</span> <span class="hljs-number">5.100400</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">10.210000</span> <span class="hljs-number">14.475000</span> <br><span class="hljs-number">0.188360</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">5.786000</span> <span class="hljs-number">33.300000</span> <span class="hljs-number">5.100400</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.150000</span> <span class="hljs-number">15.000000</span> <br><span class="hljs-number">0.229270</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">6.030000</span> <span class="hljs-number">85.500000</span> <span class="hljs-number">5.689400</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">392.740000</span> <span class="hljs-number">18.800000</span> <span class="hljs-number">12.450000</span> <br><span class="hljs-number">0.253870</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">5.399000</span> <span class="hljs-number">95.300000</span> <span class="hljs-number">5.870000</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">30.810000</span> <span class="hljs-number">10.800000</span> <br><span class="hljs-number">0.219770</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">6.910000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.448000</span> <span class="hljs-number">5.602000</span> <span class="hljs-number">62.000000</span> <span class="hljs-number">6.087700</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">233.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">16.200000</span> <span class="hljs-number">14.550000</span> <br><span class="hljs-number">0.088730</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">5.640000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.439000</span> <span class="hljs-number">5.963000</span> <span class="hljs-number">45.700000</span> <span class="hljs-number">6.814700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">243.000000</span> <span class="hljs-number">16.800000</span> <span class="hljs-number">395.560000</span> <span class="hljs-number">13.450000</span> <span class="hljs-number">14.775000</span> <br><span class="hljs-number">0.043370</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">5.640000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.439000</span> <span class="hljs-number">6.115000</span> <span class="hljs-number">63.000000</span> <span class="hljs-number">6.814700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">243.000000</span> <span class="hljs-number">16.800000</span> <span class="hljs-number">393.970000</span> <span class="hljs-number">9.430000</span> <span class="hljs-number">15.375000</span> <br><span class="hljs-number">0.053600</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">5.640000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.439000</span> <span class="hljs-number">6.511000</span> <span class="hljs-number">21.100000</span> <span class="hljs-number">6.814700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">243.000000</span> <span class="hljs-number">16.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.280000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">0.049810</span> <span class="hljs-number">21.000000</span> <span class="hljs-number">5.640000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.439000</span> <span class="hljs-number">5.998000</span> <span class="hljs-number">21.400000</span> <span class="hljs-number">6.814700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">243.000000</span> <span class="hljs-number">16.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">8.430000</span> <span class="hljs-number">17.550000</span> <br><span class="hljs-number">0.013600</span> <span class="hljs-number">75.000000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.410000</span> <span class="hljs-number">5.888000</span> <span class="hljs-number">47.600000</span> <span class="hljs-number">7.319700</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">469.000000</span> <span class="hljs-number">21.100000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">14.800000</span> <span class="hljs-number">14.175000</span> <br><span class="hljs-number">0.013110</span> <span class="hljs-number">90.000000</span> <span class="hljs-number">1.220000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.403000</span> <span class="hljs-number">7.249000</span> <span class="hljs-number">21.900000</span> <span class="hljs-number">8.696600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">226.000000</span> <span class="hljs-number">17.900000</span> <span class="hljs-number">395.930000</span> <span class="hljs-number">4.810000</span> <span class="hljs-number">26.550000</span> <br><span class="hljs-number">0.020550</span> <span class="hljs-number">85.000000</span> <span class="hljs-number">0.740000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.410000</span> <span class="hljs-number">6.383000</span> <span class="hljs-number">35.700000</span> <span class="hljs-number">9.187600</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">313.000000</span> <span class="hljs-number">17.300000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.770000</span> <span class="hljs-number">18.525000</span> <br><span class="hljs-number">0.014320</span> <span class="hljs-number">100.000000</span> <span class="hljs-number">1.320000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.411000</span> <span class="hljs-number">6.816000</span> <span class="hljs-number">40.500000</span> <span class="hljs-number">8.324800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">256.000000</span> <span class="hljs-number">15.100000</span> <span class="hljs-number">392.900000</span> <span class="hljs-number">3.950000</span> <span class="hljs-number">23.700000</span> <br><span class="hljs-number">0.154450</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">5.130000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.453000</span> <span class="hljs-number">6.145000</span> <span class="hljs-number">29.200000</span> <span class="hljs-number">7.814800</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">390.680000</span> <span class="hljs-number">6.860000</span> <span class="hljs-number">17.475000</span> <br><span class="hljs-number">0.103280</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">5.130000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.453000</span> <span class="hljs-number">5.927000</span> <span class="hljs-number">47.200000</span> <span class="hljs-number">6.932000</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.220000</span> <span class="hljs-number">14.700000</span> <br><span class="hljs-number">0.149320</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">5.130000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.453000</span> <span class="hljs-number">5.741000</span> <span class="hljs-number">66.200000</span> <span class="hljs-number">7.225400</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">395.110000</span> <span class="hljs-number">13.150000</span> <span class="hljs-number">14.025000</span> <br><span class="hljs-number">0.171710</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">5.130000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.453000</span> <span class="hljs-number">5.966000</span> <span class="hljs-number">93.400000</span> <span class="hljs-number">6.818500</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">378.080000</span> <span class="hljs-number">14.440000</span> <span class="hljs-number">12.000000</span> <br><span class="hljs-number">0.110270</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">5.130000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.453000</span> <span class="hljs-number">6.456000</span> <span class="hljs-number">67.800000</span> <span class="hljs-number">7.225500</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.730000</span> <span class="hljs-number">16.650000</span> <br><span class="hljs-number">0.126500</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">5.130000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.453000</span> <span class="hljs-number">6.762000</span> <span class="hljs-number">43.400000</span> <span class="hljs-number">7.980900</span> <span class="hljs-number">8.000000</span> <span class="hljs-number">284.000000</span> <span class="hljs-number">19.700000</span> <span class="hljs-number">395.580000</span> <span class="hljs-number">9.500000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">0.019510</span> <span class="hljs-number">17.500000</span> <span class="hljs-number">1.380000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.416100</span> <span class="hljs-number">7.104000</span> <span class="hljs-number">59.500000</span> <span class="hljs-number">9.222900</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">216.000000</span> <span class="hljs-number">18.600000</span> <span class="hljs-number">393.240000</span> <span class="hljs-number">8.050000</span> <span class="hljs-number">24.750000</span> <br><span class="hljs-number">0.035840</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">3.370000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.398000</span> <span class="hljs-number">6.290000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">6.611500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">337.000000</span> <span class="hljs-number">16.100000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.670000</span> <span class="hljs-number">17.625000</span> <br><span class="hljs-number">0.043790</span> <span class="hljs-number">80.000000</span> <span class="hljs-number">3.370000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.398000</span> <span class="hljs-number">5.787000</span> <span class="hljs-number">31.100000</span> <span class="hljs-number">6.611500</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">337.000000</span> <span class="hljs-number">16.100000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">10.240000</span> <span class="hljs-number">14.550000</span> <br><span class="hljs-number">0.057890</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">6.070000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.409000</span> <span class="hljs-number">5.878000</span> <span class="hljs-number">21.400000</span> <span class="hljs-number">6.498000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">345.000000</span> <span class="hljs-number">18.900000</span> <span class="hljs-number">396.210000</span> <span class="hljs-number">8.100000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.135540</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">6.070000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.409000</span> <span class="hljs-number">5.594000</span> <span class="hljs-number">36.800000</span> <span class="hljs-number">6.498000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">345.000000</span> <span class="hljs-number">18.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">13.090000</span> <span class="hljs-number">13.050000</span> <br><span class="hljs-number">0.128160</span> <span class="hljs-number">12.500000</span> <span class="hljs-number">6.070000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.409000</span> <span class="hljs-number">5.885000</span> <span class="hljs-number">33.000000</span> <span class="hljs-number">6.498000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">345.000000</span> <span class="hljs-number">18.900000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">8.790000</span> <span class="hljs-number">15.675000</span> <br><span class="hljs-number">0.088260</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.810000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.413000</span> <span class="hljs-number">6.417000</span> <span class="hljs-number">6.600000</span> <span class="hljs-number">5.287300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">305.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">383.730000</span> <span class="hljs-number">6.720000</span> <span class="hljs-number">18.150000</span> <br><span class="hljs-number">0.158760</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.810000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.413000</span> <span class="hljs-number">5.961000</span> <span class="hljs-number">17.500000</span> <span class="hljs-number">5.287300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">305.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">376.940000</span> <span class="hljs-number">9.880000</span> <span class="hljs-number">16.275000</span> <br><span class="hljs-number">0.091640</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.810000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.413000</span> <span class="hljs-number">6.065000</span> <span class="hljs-number">7.800000</span> <span class="hljs-number">5.287300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">305.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">390.910000</span> <span class="hljs-number">5.520000</span> <span class="hljs-number">17.100000</span> <br><span class="hljs-number">0.195390</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">10.810000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.413000</span> <span class="hljs-number">6.245000</span> <span class="hljs-number">6.200000</span> <span class="hljs-number">5.287300</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">305.000000</span> <span class="hljs-number">19.200000</span> <span class="hljs-number">377.170000</span> <span class="hljs-number">7.540000</span> <span class="hljs-number">17.550000</span> <br><span class="hljs-number">0.078960</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">12.830000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.273000</span> <span class="hljs-number">6.000000</span> <span class="hljs-number">4.251500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">394.920000</span> <span class="hljs-number">6.780000</span> <span class="hljs-number">18.075000</span> <br><span class="hljs-number">0.095120</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">12.830000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.286000</span> <span class="hljs-number">45.000000</span> <span class="hljs-number">4.502600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">383.230000</span> <span class="hljs-number">8.940000</span> <span class="hljs-number">16.050000</span> <br><span class="hljs-number">0.101530</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">12.830000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.279000</span> <span class="hljs-number">74.500000</span> <span class="hljs-number">4.052200</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">373.660000</span> <span class="hljs-number">11.970000</span> <span class="hljs-number">15.000000</span> <br><span class="hljs-number">0.087070</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">12.830000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.140000</span> <span class="hljs-number">45.800000</span> <span class="hljs-number">4.090500</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">386.960000</span> <span class="hljs-number">10.270000</span> <span class="hljs-number">15.600000</span> <br><span class="hljs-number">0.056460</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">12.830000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">6.232000</span> <span class="hljs-number">53.700000</span> <span class="hljs-number">5.014100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">386.400000</span> <span class="hljs-number">12.340000</span> <span class="hljs-number">15.900000</span> <br><span class="hljs-number">0.083870</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">12.830000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.437000</span> <span class="hljs-number">5.874000</span> <span class="hljs-number">36.600000</span> <span class="hljs-number">4.502600</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">398.000000</span> <span class="hljs-number">18.700000</span> <span class="hljs-number">396.060000</span> <span class="hljs-number">9.100000</span> <span class="hljs-number">15.225000</span> <br><span class="hljs-number">0.041130</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">4.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.426000</span> <span class="hljs-number">6.727000</span> <span class="hljs-number">33.500000</span> <span class="hljs-number">5.400700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">281.000000</span> <span class="hljs-number">19.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.290000</span> <span class="hljs-number">21.000000</span> <br><span class="hljs-number">0.044620</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">4.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.426000</span> <span class="hljs-number">6.619000</span> <span class="hljs-number">70.400000</span> <span class="hljs-number">5.400700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">281.000000</span> <span class="hljs-number">19.000000</span> <span class="hljs-number">395.630000</span> <span class="hljs-number">7.220000</span> <span class="hljs-number">17.925000</span> <br><span class="hljs-number">0.036590</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">4.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.426000</span> <span class="hljs-number">6.302000</span> <span class="hljs-number">32.200000</span> <span class="hljs-number">5.400700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">281.000000</span> <span class="hljs-number">19.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.720000</span> <span class="hljs-number">18.600000</span> <br><span class="hljs-number">0.035510</span> <span class="hljs-number">25.000000</span> <span class="hljs-number">4.860000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.426000</span> <span class="hljs-number">6.167000</span> <span class="hljs-number">46.700000</span> <span class="hljs-number">5.400700</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">281.000000</span> <span class="hljs-number">19.000000</span> <span class="hljs-number">390.640000</span> <span class="hljs-number">7.510000</span> <span class="hljs-number">17.175000</span> <br><span class="hljs-number">0.050590</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.490000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.449000</span> <span class="hljs-number">6.389000</span> <span class="hljs-number">48.000000</span> <span class="hljs-number">4.779400</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">247.000000</span> <span class="hljs-number">18.500000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">9.620000</span> <span class="hljs-number">17.925000</span> <br><span class="hljs-number">0.057350</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.490000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.449000</span> <span class="hljs-number">6.630000</span> <span class="hljs-number">56.100000</span> <span class="hljs-number">4.437700</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">247.000000</span> <span class="hljs-number">18.500000</span> <span class="hljs-number">392.300000</span> <span class="hljs-number">6.530000</span> <span class="hljs-number">19.950000</span> <br><span class="hljs-number">0.051880</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.490000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.449000</span> <span class="hljs-number">6.015000</span> <span class="hljs-number">45.100000</span> <span class="hljs-number">4.427200</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">247.000000</span> <span class="hljs-number">18.500000</span> <span class="hljs-number">395.990000</span> <span class="hljs-number">12.860000</span> <span class="hljs-number">16.875000</span> <br><span class="hljs-number">0.071510</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">4.490000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.449000</span> <span class="hljs-number">6.121000</span> <span class="hljs-number">56.800000</span> <span class="hljs-number">3.747600</span> <span class="hljs-number">3.000000</span> <span class="hljs-number">247.000000</span> <span class="hljs-number">18.500000</span> <span class="hljs-number">395.150000</span> <span class="hljs-number">8.440000</span> <span class="hljs-number">16.650000</span> <br><span class="hljs-number">0.056600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.410000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">7.007000</span> <span class="hljs-number">86.300000</span> <span class="hljs-number">3.421700</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">5.500000</span> <span class="hljs-number">17.700000</span> <br><span class="hljs-number">0.053020</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.410000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">7.079000</span> <span class="hljs-number">63.100000</span> <span class="hljs-number">3.414500</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">396.060000</span> <span class="hljs-number">5.700000</span> <span class="hljs-number">21.525000</span> <br><span class="hljs-number">0.046840</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.410000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">6.417000</span> <span class="hljs-number">66.100000</span> <span class="hljs-number">3.092300</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">392.180000</span> <span class="hljs-number">8.810000</span> <span class="hljs-number">16.950000</span> <br><span class="hljs-number">0.039320</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">3.410000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.489000</span> <span class="hljs-number">6.405000</span> <span class="hljs-number">73.900000</span> <span class="hljs-number">3.092100</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">17.800000</span> <span class="hljs-number">393.550000</span> <span class="hljs-number">8.200000</span> <span class="hljs-number">16.500000</span> <br><span class="hljs-number">0.042030</span> <span class="hljs-number">28.000000</span> <span class="hljs-number">15.040000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">6.442000</span> <span class="hljs-number">53.600000</span> <span class="hljs-number">3.665900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">18.200000</span> <span class="hljs-number">395.010000</span> <span class="hljs-number">8.160000</span> <span class="hljs-number">17.175000</span> <br><span class="hljs-number">0.028750</span> <span class="hljs-number">28.000000</span> <span class="hljs-number">15.040000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">6.211000</span> <span class="hljs-number">28.900000</span> <span class="hljs-number">3.665900</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">18.200000</span> <span class="hljs-number">396.330000</span> <span class="hljs-number">6.210000</span> <span class="hljs-number">18.750000</span> <br><span class="hljs-number">0.042940</span> <span class="hljs-number">28.000000</span> <span class="hljs-number">15.040000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.464000</span> <span class="hljs-number">6.249000</span> <span class="hljs-number">77.300000</span> <span class="hljs-number">3.615000</span> <span class="hljs-number">4.000000</span> <span class="hljs-number">270.000000</span> <span class="hljs-number">18.200000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">10.590000</span> <span class="hljs-number">15.450000</span> <br><span class="hljs-number">0.122040</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.445000</span> <span class="hljs-number">6.625000</span> <span class="hljs-number">57.800000</span> <span class="hljs-number">3.495200</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">18.000000</span> <span class="hljs-number">357.980000</span> <span class="hljs-number">6.650000</span> <span class="hljs-number">21.300000</span> <br><span class="hljs-number">0.115040</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.445000</span> <span class="hljs-number">6.163000</span> <span class="hljs-number">69.600000</span> <span class="hljs-number">3.495200</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">18.000000</span> <span class="hljs-number">391.830000</span> <span class="hljs-number">11.340000</span> <span class="hljs-number">16.050000</span> <br><span class="hljs-number">0.120830</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.445000</span> <span class="hljs-number">8.069000</span> <span class="hljs-number">76.000000</span> <span class="hljs-number">3.495200</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">18.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">4.210000</span> <span class="hljs-number">29.025000</span> <br><span class="hljs-number">0.081870</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.445000</span> <span class="hljs-number">7.820000</span> <span class="hljs-number">36.900000</span> <span class="hljs-number">3.495200</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">18.000000</span> <span class="hljs-number">393.530000</span> <span class="hljs-number">3.570000</span> <span class="hljs-number">32.850000</span> <br><span class="hljs-number">0.068600</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">2.890000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.445000</span> <span class="hljs-number">7.416000</span> <span class="hljs-number">62.500000</span> <span class="hljs-number">3.495200</span> <span class="hljs-number">2.000000</span> <span class="hljs-number">276.000000</span> <span class="hljs-number">18.000000</span> <span class="hljs-number">396.900000</span> <span class="hljs-number">6.190000</span> <span class="hljs-number">24.900000</span> <br><span class="hljs-number">0.148660</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.727000</span> <span class="hljs-number">79.900000</span> <span class="hljs-number">2.777800</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">394.760000</span> <span class="hljs-number">9.420000</span> <span class="hljs-number">20.625000</span> <br><span class="hljs-number">0.114320</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">8.560000</span> <span class="hljs-number">0.000000</span> <span class="hljs-number">0.520000</span> <span class="hljs-number">6.781000</span> <span class="hljs-number">71.300000</span> <span class="hljs-number">2.856100</span> <span class="hljs-number">5.000000</span> <span class="hljs-number">384.000000</span> <span class="hljs-number">20.900000</span> <span class="hljs-number">395.580000</span> <span class="hljs-number">7.670000</span> <span class="hljs-number">19.875000</span><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>神经网络</tag>
      </tags>
  </entry>
  <entry>
    <title>百度Paddle模型训练</title>
    <url>/posts/62432.html</url>
    <content><![CDATA[<blockquote>
<p><strong>注意：本说明并没有详细谈及各参数的调整</strong></p>
<p>对于多卡训练，只需要将python  tools/trainxxxx改为：</p>
<p>python -m paddle.distributed.launch --selected_gpus 0,1,2,3 tools/trainxxxxxx</p>
<p>其中0,1,2,3参数是因为有4张卡，若是两张卡训练，此处应写0,1</p>
<p>你可以通过nvidia-smi查询显卡数量</p>
</blockquote>
<hr>
<p><strong>以百度飞浆推出的PaddleDetection目标检测开发套件为例</strong></p>
<h2 id="项目架构">项目架构</h2>
<p>这是其Github项目文件</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/Github-PaddleDetection.webp" alt=""></p>
<p>我们将要用到的基本架构如下：</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/%E6%9E%B6%E6%9E%84.webp" alt=""></p>
<hr>
<h2 id="对于数据集">对于数据集</h2>
<p>其中，car_train是我们自己的数据集，这里的数据集格式为<strong>VOC</strong></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/car_train_VOC.webp" alt=""></p>
<p>JPEGImages存放所有数据集图片，Annotations中存放所有标注文件</p>
<p>你可以通过<strong>labelimg</strong>软件进行数据的标注</p>
<p>当我们有了这样的数据集后，就可以准备进行模型训练了</p>
<hr>
<h2 id="模型训练前的准备">模型训练前的准备</h2>
<p>我们这里使用的是yolov3模型，你可以在克隆下来的PaddleDetection的：PaddleDetection/configs/中找到它</p>
<p>但是可以发现，在这些yml中，没有我们想要的yolov3_mobilenet_v3_small_270e_voc</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/yolov3.webp" alt=""></p>
<p>我们复制yolov3_mobilenet_v3_large_270e_voc.yml 将其更名为yolov3_mobilenet_v3_small_270e_voc.yml</p>
<p><code>cp yolov3_mobilenet_v3_large_270e_voc.yml yolov3_mobilenet_v3_small_270e_voc.yml</code></p>
<p>更改复制好的small_270e中的内容：</p>
<p>改前：<img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/yolov3_mobilenet_v3_small_270e_voc%E6%94%B9%E5%89%8D.webp" alt=""></p>
<p>改后：<img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/yolov3_mobilenet_v3_small_270e_voc%E6%94%B9%E5%90%8E.webp" alt=""></p>
<p>随后，我们需要修改<strong>与yolov3同一目录下datasets中的</strong>文件voc.yml</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/yolov3-datasets.webp" alt=""></p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/voc.webp" alt=""></p>
<blockquote>
<p>注意这里的dataset_dir要改成我们数据集的路径</p>
<p>**这里的num_classes要着重注意！**其大小应与我们的标签数一致</p>
<p>TrainDataset中的anno_path是每次训练时要用到的文件，其格式可以<a href="#train.txt%E6%A0%BC%E5%BC%8F">点我查看</a></p>
<p>EvalDataset中的anno_path是每次检验模型时要用到的文件，其格式可以<a href="#eval.txt%E6%A0%BC%E5%BC%8F">点我查看</a></p>
<p>label_list的格式可以<a href="#labels.txt%E6%A0%BC%E5%BC%8F">点我查看</a></p>
</blockquote>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">metric:</span> <span class="hljs-string">VOC</span><br><span class="hljs-attr">map_type:</span> <span class="hljs-string">11point</span><br><span class="hljs-attr">num_classes:</span> <span class="hljs-number">8</span><br><br><span class="hljs-attr">TrainDataset:</span><br>  <span class="hljs-type">!VOCDataSet</span><br>    <span class="hljs-attr">dataset_dir:</span> <span class="hljs-string">dataset/car_train</span><br>    <span class="hljs-attr">anno_path:</span> <span class="hljs-string">train.txt</span><br>    <span class="hljs-attr">label_list:</span> <span class="hljs-string">labels.txt</span><br>    <span class="hljs-attr">data_fields:</span> [<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-string">&#x27;gt_bbox&#x27;</span>, <span class="hljs-string">&#x27;gt_class&#x27;</span>, <span class="hljs-string">&#x27;difficult&#x27;</span>]<br><br><span class="hljs-attr">EvalDataset:</span><br>  <span class="hljs-type">!VOCDataSet</span><br>    <span class="hljs-attr">dataset_dir:</span> <span class="hljs-string">dataset/car_train</span><br>    <span class="hljs-attr">anno_path:</span> <span class="hljs-string">eval.txt</span><br>    <span class="hljs-attr">label_list:</span> <span class="hljs-string">labels.txt</span><br>    <span class="hljs-attr">data_fields:</span> [<span class="hljs-string">&#x27;image&#x27;</span>, <span class="hljs-string">&#x27;gt_bbox&#x27;</span>, <span class="hljs-string">&#x27;gt_class&#x27;</span>, <span class="hljs-string">&#x27;difficult&#x27;</span>]<br><br><span class="hljs-attr">TestDataset:</span><br>  <span class="hljs-type">!ImageFolder</span><br>    <span class="hljs-attr">anno_path:</span> <span class="hljs-string">dataset/car_train/labels.txt</span><br></code></pre></td></tr></table></figure>
<hr>
<h2 id="模型训练">模型训练</h2>
<blockquote>
<p>当你完成以上步骤：</p>
<p>PaddleDetection的下载</p>
<p>数据集的准备（包括图片文件，图片数据标注文件，训练文件train.txt   测试文件eval.txt  标签文件labels.txt）</p>
<p>训练config的配置</p>
<p>恭喜，你可以进行模型训练了</p>
</blockquote>
<p><strong>模型训练</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python tools/train.py -c configs/yolov3/yolov3_mobilenet_v3_small_270e_voc.yml --use_vdl=True --eval<br></code></pre></td></tr></table></figure>
<p><strong>断点训练</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python tools/train.py -c configs/yolov3/yolov3_mobilenet_v3_small_270e_voc.yml -r output/yolov3_mobilenet_v3_small_270e_voc/100<br></code></pre></td></tr></table></figure>
<p>注意这里的100需要根据你的中断点而调整，比如上一次训练被我停止在了第19次</p>
<p>（该文件的位置位于<strong>之前yolov3_mobilenet_v3_small_270e_voc.yml中设置的weight目录路径中</strong>）</p>
<p><img src="/img/page/%E7%99%BE%E5%BA%A6Paddle/19.webp" alt=""></p>
<p>那这里就需要填写19</p>
<hr>
<p><strong>模型评估</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python tools/eval.py -c configs/yolov3/yolov3_mobilenet_v3_small_270e_voc.yml -o weights=output/yolov3_mobilenet_v3_small_270e_voc/best_model<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>模型导出</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python tools/export_model.py -c configs/yolov3/yolov3_mobilenet_v3_small_270e_voc.yml --output_dir=./inference_model -o weights=output/yolov3_mobilenet_v3_small_270e_voc/best_model<br></code></pre></td></tr></table></figure>
<hr>
<p><strong>模型预测</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">python deploy/python/infer.py --model_dir=./inference_model/yolov3_mobilenet_v3_small_270e_voc --image_file=./street.jpg --device=GPU --threshold=0.2<br></code></pre></td></tr></table></figure>
<hr>
<h1>杂项解析</h1>
<h3 id="train-txt格式">train.txt格式</h3>
<figure class="highlight json"><table><tr><td class="code"><pre><code class="hljs json">第一列为图片路径，	第二列为图片对应的xml文件路径<br>JPEGImages/<span class="hljs-number">4457.</span>jpg Annotations/<span class="hljs-number">4457.</span>xml<br>JPEGImages/<span class="hljs-number">212.</span>jpg Annotations/<span class="hljs-number">212.</span>xml<br>JPEGImages/<span class="hljs-number">642.</span>jpg Annotations/<span class="hljs-number">642.</span>xml<br></code></pre></td></tr></table></figure>
<h3 id="eval-txt格式">eval.txt格式</h3>
<p>与train.txt一致</p>
<h3 id="labels-txt格式">labels.txt格式</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">bump<br>cone<br>bridge<br>granary<br>CrossWalk<br>tractor<br>corn<br>pig<br><br></code></pre></td></tr></table></figure>
<h3 id="randlist-py代码">randlist.py代码</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> xml.dom.minidom<br><br>lst = [<span class="hljs-string">&#x27;bump&#x27;</span>, <span class="hljs-string">&#x27;cone&#x27;</span>, <span class="hljs-string">&#x27;bridge&#x27;</span>, <span class="hljs-string">&#x27;granary&#x27;</span>, <span class="hljs-string">&#x27;CrossWalk&#x27;</span>, <span class="hljs-string">&#x27;tractor&#x27;</span>, <span class="hljs-string">&#x27;corn&#x27;</span>, <span class="hljs-string">&#x27;pig&#x27;</span>]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReadFileDatas</span>():<br>    FileNamelist = []<br>    file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;train.txt&#x27;</span>,<span class="hljs-string">&#x27;r+&#x27;</span>)<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> file:<br>        line = line.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        FileNamelist.append(line)<br>    <span class="hljs-comment">#print(&#x27;len ( FileNamelist ) = &#x27; ,len(FileNamelist))</span><br>    file.close()<br>    <span class="hljs-keyword">return</span> FileNamelist<br> <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">WriteDatasToFile</span>(<span class="hljs-params">listInfo</span>):<br>    file_handle_train = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;train.txt&#x27;</span>,mode=<span class="hljs-string">&#x27;w&#x27;</span>)<br>    file_handle_eval = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;eval.txt&quot;</span>,mode=<span class="hljs-string">&#x27;w&#x27;</span>)<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(listInfo)):<br>        <span class="hljs-built_in">str</span> = listInfo[idx]<br><br>        ndex = <span class="hljs-built_in">str</span>.rfind(<span class="hljs-string">&#x27;_&#x27;</span>)<br>        str_Result = <span class="hljs-built_in">str</span>  + <span class="hljs-string">&#x27;\n&#x27;</span><br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">6</span> != <span class="hljs-number">0</span>):<br>            file_handle_train.write(str_Result)<br>        <span class="hljs-keyword">else</span>:<br>            file_handle_eval.write(str_Result)<br>        i += <span class="hljs-number">1</span><br>    file_handle_train.close()<br>    file_handle_eval.close()<br><br>path = <span class="hljs-string">&#x27;./Annotations/&#x27;</span><br>res = os.listdir(path)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">WriteDataToFile</span>(<span class="hljs-params">DataList</span>):<br>    file_handle_train = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;train.txt&#x27;</span>,mode=<span class="hljs-string">&#x27;w&#x27;</span>)<br>    file_handle_eval = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;eval.txt&quot;</span>,mode=<span class="hljs-string">&#x27;w&#x27;</span>)<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> idx <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(DataList)):<br>        <span class="hljs-built_in">str</span> = DataList[idx]<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">6</span> != <span class="hljs-number">0</span>):<br>            file_handle_train.write(<span class="hljs-built_in">str</span>+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            file_handle_eval.write(<span class="hljs-built_in">str</span>+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        i += <span class="hljs-number">1</span><br>    file_handle_train.close()<br>    file_handle_eval.close()    <br><br><br>dataList = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:<br>    <span class="hljs-comment">#print(&quot;./Images/&quot;+ str(i[0:-4:1]) + &quot;.jpg &quot;+ path + str(i))</span><br>   dataList.append(<span class="hljs-string">&quot;./JPEGImages/&quot;</span>+ <span class="hljs-built_in">str</span>(i[<span class="hljs-number">0</span>:-<span class="hljs-number">4</span>:<span class="hljs-number">1</span>]) + <span class="hljs-string">&quot;.jpg &quot;</span>+ path + <span class="hljs-built_in">str</span>(i))<br>   WriteDataToFile(DataList=dataList)<br><br>listFileInfo = ReadFileDatas()<br>random.shuffle(listFileInfo)<span class="hljs-comment"># 打乱</span><br>WriteDatasToFile(listFileInfo)<br><br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Paddle</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>部署博客那些事</title>
    <url>/posts/33186.html</url>
    <content><![CDATA[<p>为了把班里的截图导到网站上，就用gitee搞个非公开的博客，用的hexo。</p>
<hr>
<h4 id="在一开始没啥问题，但是在部署的时候遇到-ERROR-Deployer-not-found-git-的错误">在一开始没啥问题，但是在部署的时候遇到 ERROR Deployer not found: git  的错误</h4>
<p>经过调查之后 才知道 需要运行下这个指令才行</p>
<p><code>npm install hexo-deployer-git --save</code></p>
<p>然后就可以部署了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure>
<hr>
<h4 id="访问但无法加载css文件">访问但无法加载css文件</h4>
<p>再次研究，发现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">url: https://drluo.gitee.io/grade2019class22/<br>root: /<br></code></pre></td></tr></table></figure>
<p><code>root: /</code>   后面应该加上<code>grade2019class22/</code></p>
<p>即：<code>root: /grade2019class22/</code></p>
<p>修改后，恢复正常。</p>
<hr>
<h4 id="访问但是无法加载文章图片">访问但是无法加载文章图片</h4>
<p>这里我不怎么想改了，F12查看图片获取路径为<br>
<code>https://drluo.gitee.io/images/cover/Dailysummary.png</code><br>
这波我直接选择在图片路径前加上<code>/grade2019class22</code><br>
顺便把所用theme的<code>_config.yml</code>中的<code>favicon</code>也改为了<br>
<code>favicon: /grade2019class22/favicon.ico</code></p>
<hr>
<h5 id="获取dplayer插件">获取dplayer插件</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install dplayer --save<br></code></pre></td></tr></table></figure>
<h5 id="取waterfall插件">取waterfall插件</h5>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">npm install waterfall --save<br></code></pre></td></tr></table></figure>
<h1>flex-block主题相关设置</h1>
<h1>变动</h1>
<p>关于 <strong><a href="#waterfall-%E7%80%91%E5%B8%83%E6%B5%81">waterfall</a></strong> 标签，在更新主题后，会导致以前的视频不能正常播放，需要进行如下修改:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&lt;!-- 旧版写法 --&gt;<br>&#123;% dplayer https://qiniu.miiiku.xyz/video/%E7%BE%8E.mp4 https://qiniu.miiiku.xyz/video/%E7%BE%8E.mp4?vframe/jpg/offset/10 %&#125; <br><br>&lt;!-- 新版写法 需要指定属性名 --&gt;<br>&#123;% dplayer url=&quot;https://qiniu.miiiku.xyz/video/%E7%BE%8E.mp4&quot; cover=&quot;https://qiniu.miiiku.xyz/video/%E7%BE%8E.mp4?vframe/jpg/offset/10&quot; %&#125; <br></code></pre></td></tr></table></figure>
<h1>可自定义的相关页面</h1>
<h2 id="目前可以扩展的页面菜单有">目前可以扩展的页面菜单有:</h2>
<table>
<thead>
<tr>
<th>type</th>
<th>value</th>
<th>name</th>
</tr>
</thead>
<tbody>
<tr>
<td>categories</td>
<td>/categories</td>
<td>分类</td>
</tr>
<tr>
<td>tags</td>
<td>/tags</td>
<td>标签</td>
</tr>
<tr>
<td>links</td>
<td>/links</td>
<td>友链</td>
</tr>
<tr>
<td>messages</td>
<td>/messages</td>
<td>留言板</td>
</tr>
</tbody>
</table>
<h2 id="如何添加">如何添加:</h2>
<p>🌰 添加友链页面</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new page links<br></code></pre></td></tr></table></figure>
<p>找到新建的页面并修改<code>Front-matter</code>，添加如下内容</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">type: links<br></code></pre></td></tr></table></figure>
<p>修改<code>_config.yml</code>配置菜单，找到<code>menu</code>选项添加如下内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><code class="hljs plaintext">links: /links<br></code></pre></td></tr></table></figure>
<h2 id="添加其他自定义页面，如关于页面">添加其他自定义页面，如<code>关于</code>页面</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">hexo new page about<br></code></pre></td></tr></table></figure>
<h1><code>Front-matter</code>相关</h1>
<h2 id="除开以有的字段，目前有效的相关属性">除开以有的<a href="https://hexo.io/zh-cn/docs/front-matter">字段</a>，目前有效的相关属性</h2>
<table>
<thead>
<tr>
<th>key</th>
<th>layout</th>
<th>desc</th>
</tr>
</thead>
<tbody>
<tr>
<td>subtitle</td>
<td>post,page,draft</td>
<td>小标题，文章或页面的小标题，文章缺省值为文章的发布时间</td>
</tr>
<tr>
<td>categories</td>
<td>post,draft</td>
<td>分类，文章的分类</td>
</tr>
<tr>
<td>cover</td>
<td>post,page,draft</td>
<td>封面，文章或页面的封面，banner图</td>
</tr>
<tr>
<td>type</td>
<td>page</td>
<td>页面类型，取值详见<strong>可自定义的相关页面</strong></td>
</tr>
</tbody>
</table>
<p>建议复制以下代码替换<code>scaffolds/</code>下默认的模版</p>
<h3 id="post-md-draft-md"><a href="http://post.md">post.md</a>,<a href="http://draft.md">draft.md</a></h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">---<br>title: &#123;&#123; title &#125;&#125;<br>subtitle:<br>date: &#123;&#123; date &#125;&#125;<br>categories:<br>tags:<br><span class="hljs-section">cover:</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure>
<h3 id="page-md"><a href="http://page.md">page.md</a></h3>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">---<br>title: &#123;&#123; title &#125;&#125;<br>subtitle:<br>date: &#123;&#123; date &#125;&#125;<br>cover:<br><span class="hljs-section">type:</span><br><span class="hljs-section">---</span><br></code></pre></td></tr></table></figure>
<h1>自定义数据</h1>
<h2 id="友链数据">友链数据</h2>
<p>在目录的<code>source/_data</code>下新建一个<strong>links.yml</strong></p>
<p>一行一条数据，格式如下:</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> &#123; <span class="hljs-string">&quot;name&quot;</span> <span class="hljs-string">:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;describe&quot;</span> <span class="hljs-string">:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;link&quot;</span> <span class="hljs-string">:</span> <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;cover&quot;</span> <span class="hljs-string">:</span> <span class="hljs-string">&quot;&quot;</span> &#125;<br></code></pre></td></tr></table></figure>
<h1>SEO优化相关</h1>
<p><strong>查找并修改<code>Hexo</code>下的<code>_config.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># Site</span><br><br><span class="hljs-comment"># &lt;meta name=&quot;description&quot; content=[config.description]&gt;</span><br><span class="hljs-attr">description:</span> <br><br><span class="hljs-comment"># &lt;meta name=&quot;keywords&quot; content=[config.keywords]&gt;</span><br><span class="hljs-attr">keywords:</span> <br><br><span class="hljs-comment"># &lt;meta name=&quot;author&quot; content=[config.author]&gt;</span><br><span class="hljs-attr">author:</span> <br><br><span class="hljs-comment"># &lt;meta name=&quot;copyright&quot; content=[config.copyright]&gt;</span><br><span class="hljs-attr">copyright:</span><br></code></pre></td></tr></table></figure>
<h1>配置项:</h1>
<h2 id="代码高亮">代码高亮</h2>
<p>hexo默认提供了highlightjs代码高亮，如何开启？</p>
<p><strong>查找并修改<code>Hexo</code>下的<code>_config.yml</code></strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">highlight:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">auto_detect:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">tab_replace:</span><br>  <span class="hljs-attr">hljs:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">androidstudio</span><br></code></pre></td></tr></table></figure>
<p>其中<code>enable</code>为开启代码高亮，<code>hljs</code>设置为hljs为class，<code>theme</code>为highlight代码高亮主题，不设置默认为default</p>
<p>具体的主题可以在<a href="https://highlightjs.org/">https://highlightjs.org/</a>查看</p>
<h2 id="长标题">长标题</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>large_legnth</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># large cover</span><br><span class="hljs-comment"># long: [article, link]</span><br><span class="hljs-comment"># short: [category, tag]</span><br><span class="hljs-attr">large_legnth:</span><br>  <span class="hljs-attr">long:</span> <span class="hljs-number">20</span><br>  <span class="hljs-attr">short:</span> <span class="hljs-number">5</span><br></code></pre></td></tr></table></figure>
<p><strong>long:</strong> 作用于<code>文章</code>和<code>友链</code>卡片</p>
<p><strong>short:</strong> 作用于<code>分类</code>和<code>标签</code>卡片</p>
<p>设置Card封面的大小，如 <code>long: 20</code> 表示如果文章标题长度大于20，文章卡片显示为长文章</p>
<p><em>如果启用了友链，则会判断<code>友链名称</code>和<code>友链描述</code>两个字段长度</em></p>
<h2 id="aplayer">aplayer</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>aplayer</code></p>
<p><strong><code>aplayer</code>歌词模式默认使用第三种（文件格式）</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># aplayer 视频播放</span><br><span class="hljs-comment"># docs: https://aplayer.js.org/#/</span><br><span class="hljs-attr">aplayer:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&quot;#b7daff&quot;</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mutex:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">lrcType:</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<p>详情查看<a href="https://aplayer.js.org/">https://aplayer.js.org/</a></p>
<h2 id="dplayer">dplayer</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>dplayer</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># dplayer 视频播放</span><br><span class="hljs-comment"># docs: http://dplayer.js.org/</span><br><span class="hljs-attr">dplayer:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">theme:</span> <span class="hljs-string">&quot;#b7daff&quot;</span><br>  <span class="hljs-attr">autoplay:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">loop:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">mutex:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<p>详情查看<a href="http://dplayer.js.org/">http://dplayer.js.org/</a></p>
<h2 id="zoom-图片预览">zoom 图片预览</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>zoom</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># zoom 图片预览</span><br><span class="hljs-comment"># docs: https://github.com/miiiku/zoom</span><br><span class="hljs-comment"># Specific configuration information go to `layout/plug-in/zoom.ejs`</span><br><span class="hljs-attr">zoom:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<p>详情查看<a href="https://github.com/miiiku/zoom">https://github.com/miiiku/zoom</a></p>
<h2 id="waterfall-瀑布流">waterfall 瀑布流</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>waterfall</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># waterfall 瀑布流</span><br><span class="hljs-comment"># docs: https://github.com/miiiku/waterfall</span><br><span class="hljs-comment"># Specific configuration information go to `layout/plug-in/waterfall.ejs`</span><br><span class="hljs-attr">waterfall:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<p>如果要进行详细的配置，请找到并编辑<code>layout/plug-in/waterfall.ejs</code></p>
<p>详情查看<a href="https://github.com/miiiku/waterfall">https://github.com/miiiku/waterfall</a></p>
<h2 id="Valine评论">Valine评论</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>valine</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># valine 评论</span><br><span class="hljs-comment"># docs: https://valine.js.org</span><br><span class="hljs-comment"># You can get your appid and appkey from https://leancloud.cn</span><br><span class="hljs-comment"># 这里appId和appKey一定一定要改成自己的，没有的话去https://leancloud.cn这个网站注册创建一个</span><br><span class="hljs-attr">valine:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">appId:</span> <span class="hljs-comment"># your appid</span><br>  <span class="hljs-attr">appKey:</span> <span class="hljs-comment"># your appkey</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">mm</span><br>  <span class="hljs-attr">placeholder:</span> <span class="hljs-string">随便说点什么叭～</span><br>  <span class="hljs-attr">notify:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">visitor:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">pageSize:</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>
<p>如果想给某一页面/文章取消评论，在<code>md</code>文件的<code>front-matter</code>中增加<code>comments: false</code></p>
<p>详情查看<a href="https://valine.js.org/configuration.html">https://valine.js.org/configuration.html</a></p>
<h2 id="disqus评论">disqus评论</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>disqus</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># disqus 评论</span><br><span class="hljs-comment"># docs: https://disqus.com/</span><br><span class="hljs-comment"># website 网站到昵称</span><br><span class="hljs-comment"># error 加载失败的提示语</span><br><span class="hljs-attr">disqus:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">website:</span> <span class="hljs-comment"># your website</span><br>  <span class="hljs-attr">error:</span> <span class="hljs-string">如果你看不到评论，那么就真的看不到评论</span> <span class="hljs-string">w(゜Д゜)w</span><br></code></pre></td></tr></table></figure>
<h2 id="一言（当前版本好像弃用了）">一言（当前版本好像弃用了）</h2>
<p>进入<code>flex-block</code>配置文件<code>_config.yml</code>找到<code>hitokoto</code></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-comment"># 一言</span><br><span class="hljs-comment"># docs: https://hitokoto.cn/api</span><br><span class="hljs-comment"># type: [a, b, c, d, e, f, g]</span><br><span class="hljs-attr">hitokoto:</span><br>  <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">a</span><br></code></pre></td></tr></table></figure>
<p>详情查看<a href="https://hitokoto.cn/api">https://hitokoto.cn/api</a></p>
<h1>内建标签</h1>
<h2 id="插入音频-aplayer">插入音频 aplayer</h2>
<p><strong>更多参数可参考<a href="https://aplayer.js.org/#/home?id=options">https://aplayer.js.org/#/home?id=options</a>中<code>audio</code>的属性</strong></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&lt;!-- url 必填  --&gt;<br>&#123;% aplayer name=&quot;アイロニ&quot; artist=&quot;鹿乃&quot; url=&quot;https://qiniu.miiiku.xyz/public/music/鹿乃 - アイロニ.mp3&quot; lrc=&quot;https://qiniu.miiiku.xyz/public/music/鹿乃 - アイロニ.lrc&quot; cover=&quot;https://qiniu.miiiku.xyz/public/music/鹿乃 - アイロニ.jpg&quot; %&#125;<br></code></pre></td></tr></table></figure>
<p><strong>注意: 需要开启<code>aplayer</code>插件才能正常使用本内置标签</strong></p>
<h2 id="插入视频-dplayer">插入视频 dplayer</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&lt;!-- url 必填 cover(封面) 可选 subtitle(字幕) 可选 --&gt;<br>&#123;% dplayer url=&quot;https://qiniu.miiiku.xyz/video/%E7%BE%8E.mp4&quot; cover=&quot;https://qiniu.miiiku.xyz/video/%E7%BE%8E.mp4?vframe/jpg/offset/10&quot; %&#125; <br></code></pre></td></tr></table></figure>
<p><strong>注意: 需要开启<code>dplayer</code>插件才能正常使用本内置标签</strong></p>
<h2 id="插入瀑布流-waterfall">插入瀑布流 waterfall</h2>
<p>如需要修改大小 添加参数<code>size=&quot;max&quot;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% waterfall size=&quot;max&quot; %&#125;<br>![<span class="hljs-string">imgname</span>](<span class="hljs-link">imgsrc</span>)<br>...<br>&#123;% endwaterfall %&#125;<br></code></pre></td></tr></table></figure>
<p><strong>更多参数可参考<a href="https://github.com/miiiku/waterfall#options">https://github.com/miiiku/waterfall#options</a> 原参数的<code>驼峰命名</code>改为<code>横线连接</code></strong></p>
<p>🌰: 如设置布局为<code>水平布局</code>，每个元素的类名为<code>item-image</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% waterfall direction=h item-class=item-image %&#125;<br>![<span class="hljs-string">imgname</span>](<span class="hljs-link">imgsrc</span>)<br>...<br>&#123;% endwaterfall %&#125;<br></code></pre></td></tr></table></figure>
<p><strong>注意: 需要开启<code>waterfall</code>插件才能正常使用本内置标签</strong></p>
<h2 id="水平居中-center">水平居中 center</h2>
<p>使center标签内的内容水平居中</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&#123;% center %&#125;<br>...<br>&#123;% endcenter %&#125;<br></code></pre></td></tr></table></figure>
<h2 id="插入书签-bookmark">插入书签 bookmark</h2>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&lt;!-- link 地址(必填) title? 标题 cover? 封面 --&gt;<br>&#123;% bookmark title=&quot;我在这里&quot; link=&quot;https://miiiku.xyz&quot; cover=&quot;https://qiniu.miiiku.xyz/attach/2019/03/15529735091219953<span class="hljs-emphasis">_175322076_</span>H800.jpg&quot; %&#125;<br></code></pre></td></tr></table></figure>
<h2 id="插入图片-image">插入图片 image</h2>
<p>如需要修改大小 添加参数<code>size=&quot;max&quot;</code></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><code class="hljs markdown">&lt;!-- src 地址(必填) title? 描述 size? 大小 --&gt;<br>&#123;% image src=&quot;https://qiniu.miiiku.xyz/attach/2019/03/15529735091219953<span class="hljs-emphasis">_175322076_</span>H800.jpg&quot; title=&quot;hello world&quot; size=&quot;max&quot; %&#125;<br></code></pre></td></tr></table></figure>
<h1>其他</h1>
<h2 id="favicon">favicon</h2>
<p>替换掉主题文件下的<code>source/favicon.ico</code></p>
<h2 id="logo">logo</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">logo:</span><br></code></pre></td></tr></table></figure>
<p>高度不超过50，宽度不超过200为最佳</p>
<h2 id="banner">banner</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">banner:</span><br></code></pre></td></tr></table></figure>
<p>宽图为最佳</p>
<h2 id="统计">统计</h2>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">google_analytics:</span> <br><br><span class="hljs-attr">gauges_analytics:</span> <br><br><span class="hljs-attr">baidu_analytics:</span> <br><br><span class="hljs-attr">tencent_analytics:</span> <br></code></pre></td></tr></table></figure>
<p>接入常用网站统计第三方</p>
<h2 id="social-icon-社交图标">social icon 社交图标</h2>
<p>添加常用到一些社交图标</p>
<p><code>header_enable</code> 首页导航栏是否显示社交图标</p>
<p><code>footer_enable</code> 底部导航栏是否显示社交图标</p>
<p>如需要修改图标显示顺序，只需要移动<code>icons</code>下的列表顺序即可</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">social_icon:</span><br>  <span class="hljs-attr">header_enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">footer_enable:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">email</span>,      <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">github</span>,     <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">google+</span>,    <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">ins</span>,        <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">twitter</span>,    <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">youtube</span>,    <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">weibo</span>,      <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">cloudmusic</span>, <span class="hljs-attr">value:</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">type:</span> <span class="hljs-string">zhihu</span>,      <span class="hljs-attr">value:</span> &#125;<br></code></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>杂谈</category>
      </categories>
  </entry>
  <entry>
    <title>随便写的一些东西</title>
    <url>/posts/35609.html</url>
    <content><![CDATA[<blockquote>
<p>爱来自ZZULI❤<a href="https://luoy-oss.github.io">drluo</a></p>
</blockquote>
<p><img src="/img/page/ZZULI.webp" alt=""></p>
<h1>C/C++</h1>
<h2 id="图像经过bitset处理为二进制后再转为uchar格式便于串口发送，并支持解码为uchar数组（240-320）-row-col">图像经过bitset处理为二进制后再转为uchar格式便于串口发送，并支持解码为uchar数组（240 * 320）(row * col)</h2>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UCHARFrame</span> &#123;<br><span class="hljs-keyword">public</span>:<br>	<span class="hljs-built_in">UCHARFrame</span>() &#123;<br><br>	&#125;<br>	<span class="hljs-built_in">UCHARFrame</span>(<span class="hljs-type">const</span> cv::Mat bi_frame) &#123;<br>		<span class="hljs-built_in">biFrameToUCHARarr</span>(bi_frame);<br>		<span class="hljs-keyword">this</span>-&gt;uframe = (uchar*)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(uchar) * <span class="hljs-number">320</span> * <span class="hljs-number">240</span>);<br>	&#125;<br><br>	~<span class="hljs-built_in">UCHARFrame</span>() &#123;<br>		<span class="hljs-built_in">free</span>(<span class="hljs-keyword">this</span>-&gt;uframe);<br>	&#125;<br>	<span class="hljs-comment">// 320列 240行图像 二进制转换为uchar array</span><br>	<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">biFrameToUCHARarr</span><span class="hljs-params">(<span class="hljs-type">const</span> cv::Mat bi_frame)</span> </span>&#123;<br>		std::bitset&lt;8&gt; f[<span class="hljs-number">240</span>][<span class="hljs-number">40</span>];<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; <span class="hljs-number">240</span>; r++) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">320</span>; c++) &#123;<br>				<span class="hljs-type">int</span> data = *(bi_frame.data + c + r * <span class="hljs-number">320</span>);<br>				<span class="hljs-keyword">if</span> (data == <span class="hljs-number">0</span>) &#123;<br>					f[r][c / <span class="hljs-number">8</span>].<span class="hljs-built_in">reset</span>(c % <span class="hljs-number">8</span>);<br>				&#125;<br>				<span class="hljs-comment">//白色 置为1</span><br>				<span class="hljs-keyword">else</span> &#123;<br>					f[r][c / <span class="hljs-number">8</span>].<span class="hljs-built_in">set</span>(c % <span class="hljs-number">8</span>);<br>				&#125;<br>			&#125;<br>		&#125;<br><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; <span class="hljs-number">240</span>; r++) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>				<span class="hljs-keyword">this</span>-&gt;frame_uchar_data[r][i] = f[r][i].<span class="hljs-built_in">to_ulong</span>();<br>			&#125;<br>		&#125;<br>	&#125;<br><br>	<span class="hljs-comment">// 320列 240行图像 二进制转换为uchar array</span><br>	<span class="hljs-function">uchar* <span class="hljs-title">ucharArrToBiFrame</span><span class="hljs-params">()</span> </span>&#123;<br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; <span class="hljs-number">240</span>; r++) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">40</span>; i++) &#123;<br>				<span class="hljs-type">int</span> index = i * <span class="hljs-number">8</span>;<br>				<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> b = <span class="hljs-number">1</span>; b &lt; (<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">8</span>); b = b &lt;&lt; <span class="hljs-number">1</span>) &#123;<br>					<span class="hljs-comment">// 当前二进制位为1 白色</span><br>					<span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;frame_uchar_data[r][i] &amp; b) &#123;<br>						*(<span class="hljs-keyword">this</span>-&gt;uframe + r * <span class="hljs-number">320</span> + index) = <span class="hljs-number">255</span>;<br>					&#125;<br>					<span class="hljs-keyword">else</span> &#123;<br>						*(<span class="hljs-keyword">this</span>-&gt;uframe + r * <span class="hljs-number">320</span> + index) = <span class="hljs-number">0</span>;<br>					&#125;<br>					index++;<br>				&#125;<br>			&#125;<br>		&#125;<br>		<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>-&gt;uframe;<br>	&#125;<br><br><br><span class="hljs-keyword">private</span>:<br>	uchar frame_uchar_data[<span class="hljs-number">240</span>][<span class="hljs-number">40</span>];<br>	uchar* uframe;<br>&#125;;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>	VideoCapture cap;<br>	cap.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;../video/result_best.mp4&quot;</span>);<br>	cap.<span class="hljs-built_in">set</span>(CAP_PROP_FRAME_WIDTH, <span class="hljs-number">320</span>);    <span class="hljs-comment">//设置宽度</span><br>	cap.<span class="hljs-built_in">set</span>(CAP_PROP_FRAME_HEIGHT, <span class="hljs-number">240</span>);  <span class="hljs-comment">//设置长度</span><br>	cap.<span class="hljs-built_in">set</span>(CAP_PROP_FOURCC, VideoWriter::<span class="hljs-built_in">fourcc</span>(<span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>));<span class="hljs-comment">//视频流格式</span><br>	Mat frame;<br>	<span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>		cap &gt;&gt; frame;<br>		<span class="hljs-built_in">cvtColor</span>(frame, frame, COLOR_BGR2GRAY);<br>		<span class="hljs-built_in">threshold</span>(frame, frame, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>, THRESH_OTSU);	<br>		<span class="hljs-function">UCHARFrame <span class="hljs-title">uFrame</span><span class="hljs-params">(frame)</span></span>;<br>		uchar* uframe = uFrame.<span class="hljs-built_in">ucharArrToBiFrame</span>();<br><br>		<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r = <span class="hljs-number">0</span>; r &lt; <span class="hljs-number">240</span>; r++) &#123;<br>			<span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> c = <span class="hljs-number">0</span>; c &lt; <span class="hljs-number">320</span>; c++) &#123;<br>				<span class="hljs-comment">// 黑色点</span><br>				<span class="hljs-keyword">if</span> ((<span class="hljs-type">int</span>)(uframe + r * <span class="hljs-number">240</span> + c) == <span class="hljs-number">0</span>) &#123;<br>					cout &lt;&lt; <span class="hljs-number">0</span>;<br>				&#125;<br>				<span class="hljs-comment">// 白色点</span><br>				<span class="hljs-keyword">else</span> &#123;<br>					cout &lt;&lt; <span class="hljs-number">1</span>;<br>				&#125;<br>			&#125;<br>			cout &lt;&lt; endl;<br>		&#125;<br><br>		<span class="hljs-built_in">waitKey</span>(<span class="hljs-number">100000</span>);<br>	&#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="拼音排序">拼音排序</h2>
<p><a href="https://drluo.lanzoul.com/iufHi1khjv5e">unicode_to_hanyu_pinyin.txt下载地址</a></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><code class="hljs c++">std::map&lt;<span class="hljs-type">int</span>, std::string&gt; pinyinMap;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">readPinYinData</span><span class="hljs-params">()</span> </span>&#123;<br>    FILE* fin;<br>    <span class="hljs-built_in">fopen_s</span>(&amp;fin, <span class="hljs-string">&quot;unicode_to_hanyu_pinyin.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (fin == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;拼音文件打开失败！\n汉语排序可能出错！&quot;</span>);<br>        <span class="hljs-built_in">MessageBox</span>(<span class="hljs-literal">NULL</span>, _T(<span class="hljs-string">&quot;拼音文件打开失败！\n汉语排序可能出错！&quot;</span>), _T(<span class="hljs-string">&quot;&quot;</span>), MB_OK | MB_SYSTEMMODAL);<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> hexNum;<br>        <span class="hljs-type">char</span>* pinyinStr = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[<span class="hljs-number">100</span>];<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">feof</span>(fin)) &#123;<br>            <span class="hljs-built_in">fscanf_s</span>(fin, <span class="hljs-string">&quot;%x,%s&quot;</span>, &amp;hexNum, pinyinStr, <span class="hljs-number">10</span>);<br>            <span class="hljs-built_in">getc</span>(fin);<br>            <span class="hljs-comment">//printf(&quot;%x %s\n&quot;, hexNum, pinyinStr);</span><br>            pinyinMap.<span class="hljs-built_in">insert</span>(std::pair&lt;<span class="hljs-type">int</span>, std::string&gt;&#123;hexNum, pinyinStr&#125;);         <br>        &#125;<br><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;成功载入拼音数据：%zd份&quot;</span>, pinyinMap.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-built_in">fclose</span>(fin);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">compare</span><span class="hljs-params">(<span class="hljs-type">const</span> std::wstring&amp; a, <span class="hljs-type">const</span> std::wstring&amp; b)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; a.<span class="hljs-built_in">size</span>() &amp;&amp; i &lt; b.<span class="hljs-built_in">size</span>(); ++i) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != b[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">strcmp</span>(pinyinMap[(<span class="hljs-type">int</span>)a[i]].<span class="hljs-built_in">c_str</span>(), pinyinMap[(<span class="hljs-type">int</span>)b[i]].<span class="hljs-built_in">c_str</span>()) &lt; <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">size</span>() &lt; b.<span class="hljs-built_in">size</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmpWithName</span><span class="hljs-params">(Drug a, Drug b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">compare</span>(a.name, b.name);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sortByName</span><span class="hljs-params">(std::vector&lt;Drug&gt;&amp; drugList)</span> </span>&#123;<br>	std::<span class="hljs-built_in">sort</span>(drugList.<span class="hljs-built_in">begin</span>(), drugList.<span class="hljs-built_in">end</span>(), cmpWithName);<br>&#125;<br><br></code></pre></td></tr></table></figure>
<h1>Python</h1>
<h2 id="mp42img">mp42img</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 导入所需要的库</span><br><span class="hljs-keyword">import</span> cv2<br><br><span class="hljs-comment"># 定义保存图片函数</span><br><span class="hljs-comment"># image:要保存的图片名字</span><br><span class="hljs-comment"># addr；图片地址与相片名字的前部分</span><br><span class="hljs-comment"># num: 相片，名字的后缀。int 类型x</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">save_image</span>(<span class="hljs-params">image,addr,num</span>):<br>    address = addr + <span class="hljs-built_in">str</span>(num)+ <span class="hljs-string">&#x27;.jpg&#x27;</span><br>    cv2.imwrite(address,image)<br><br><span class="hljs-comment"># 读取视频文件</span><br>videoCapture = cv2.VideoCapture(<span class="hljs-string">&quot;sample.mp4&quot;</span>)<br><span class="hljs-comment"># 通过摄像头的方式</span><br><span class="hljs-comment"># videoCapture=cv2.VideoCapture(1)</span><br><br><span class="hljs-comment">#读帧</span><br>success, frame = videoCapture.read()<br>i = <span class="hljs-number">1000</span><br>timeF = <span class="hljs-number">3</span><br>j=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> success :<br>    i = i + <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> (i % timeF == <span class="hljs-number">0</span>):<br>        j = j + <span class="hljs-number">1</span><br>        save_image(frame,<span class="hljs-string">&#x27;./frame/&#x27;</span>,j)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;save image:&#x27;</span>,i)<br>    success, frame = videoCapture.read()<br></code></pre></td></tr></table></figure>
<h2 id="img2mp4">img2mp4</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br>fourcc = cv2.VideoWriter_fourcc(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>)  <span class="hljs-comment"># 设置输出视频为mp4格式</span><br><br><span class="hljs-comment"># cap_fps是帧率，可以根据随意设置</span><br>cap_fps = <span class="hljs-number">30</span><br><br><span class="hljs-comment"># 注意！！！</span><br><span class="hljs-comment"># size要和图片的size一样，但是通过img.shape得到图像的参数是（height，width，channel），但是此处的size要传的是（width，height），这里一定要注意注意不然结果会打不开，比如通过img.shape得到常用的图片尺寸</span><br>size = (<span class="hljs-number">320</span>, <span class="hljs-number">240</span>)<br><br><span class="hljs-comment"># 设置输出视频的参数，如果是灰度图，可以加上 isColor = 0 这个参数</span><br><span class="hljs-comment"># video = cv2.VideoWriter(&#x27;results/result.avi&#x27;,fourcc, cap_fps, size, isColor=0)</span><br>video = cv2.VideoWriter(<span class="hljs-string">&#x27;result_best.mp4&#x27;</span>, fourcc, cap_fps, size)<br><br><span class="hljs-comment"># 这里直接读取py文件所在目录下的pics目录所有图片。</span><br>path = <span class="hljs-string">&#x27;./image/bestf/&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>):<br>    filename = <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&quot;.jpg&quot;</span><br>    img = cv2.imread(path + filename)<br>    video.write(img)<br></code></pre></td></tr></table></figure>
<h2 id="视频加速">视频加速</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><br>vdop = <span class="hljs-string">&quot;.\\lx2.mp4&quot;</span><span class="hljs-comment">#输入视频路径</span><br>cap = cv2.VideoCapture(vdop)<br>fps = cap.get(cv2.CAP_PROP_FPS) <span class="hljs-comment">#获取输入视频的帧率</span><br>size = (<span class="hljs-built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),<br>        <span class="hljs-built_in">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))<span class="hljs-comment">#获取输入视频的大小</span><br>fourcc =  cv2.VideoWriter_fourcc(<span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>)  <span class="hljs-comment"># 设置输出视频为mp4格式</span><br><br>out_path = <span class="hljs-string">&quot;.\\fast.mp4&quot;</span> <span class="hljs-comment">#输出2倍速的avi格式的视频路径</span><br>output_viedo = cv2.VideoWriter()<br>fps = <span class="hljs-number">2</span>*fps <span class="hljs-comment">#2倍速处理</span><br><span class="hljs-comment">#isColor：如果该位值为Ture，解码器会进行颜色框架的解码，否则会使用灰度进行颜色架构</span><br>output_viedo.<span class="hljs-built_in">open</span>(out_path , fourcc, fps, size, isColor=<span class="hljs-literal">True</span>)<br>rval = <span class="hljs-literal">True</span><br><span class="hljs-keyword">while</span> rval:<br>    rval, img = cap.read()<span class="hljs-comment">#逐帧读取原视频</span><br>    output_viedo.write(img)<span class="hljs-comment">#写入视频帧</span><br>output_viedo.release()<br>cap.release()<br></code></pre></td></tr></table></figure>
<h2 id="图像RGB均值-方差计算">图像RGB均值/方差计算</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> cv2<br><br>files_dir = <span class="hljs-string">&#x27;./Images/&#x27;</span><br>files = os.listdir(files_dir)<br><br>R = <span class="hljs-number">0.</span><br>G = <span class="hljs-number">0.</span><br>B = <span class="hljs-number">0.</span><br>R_2 = <span class="hljs-number">0.</span><br>G_2 = <span class="hljs-number">0.</span><br>B_2 = <span class="hljs-number">0.</span><br>N = <span class="hljs-number">0</span><br><br><br><span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> files:<br>    img = cv2.imread(files_dir+file)<br>    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)<br>    img = np.array(img)<br>    h, w, c = img.shape<br>    N += h*w<br><br>    R_t = img[:, :, <span class="hljs-number">0</span>]<br>    R += np.<span class="hljs-built_in">sum</span>(R_t)<br>    R_2 += np.<span class="hljs-built_in">sum</span>(np.power(R_t, <span class="hljs-number">2.0</span>))<br><br>    G_t = img[:, :, <span class="hljs-number">1</span>]<br>    G += np.<span class="hljs-built_in">sum</span>(G_t)<br>    G_2 += np.<span class="hljs-built_in">sum</span>(np.power(G_t, <span class="hljs-number">2.0</span>))<br><br>    B_t = img[:, :, <span class="hljs-number">2</span>]<br>    B += np.<span class="hljs-built_in">sum</span>(B_t)<br>    B_2 += np.<span class="hljs-built_in">sum</span>(np.power(B_t, <span class="hljs-number">2.0</span>))<br><br>R_mean = R/N<br>G_mean = G/N<br>B_mean = B/N<br><br>R_std = np.sqrt(R_2/N - R_mean*R_mean)<br>G_std = np.sqrt(G_2/N - G_mean*G_mean)<br>B_std = np.sqrt(B_2/N - B_mean*B_mean)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;R_mean: %f, G_mean: %f, B_mean: %f&quot;</span> % (R_mean, G_mean, B_mean))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;R_std: %f, G_std: %f, B_std: %f&quot;</span> % (R_std, G_std, B_std))<br></code></pre></td></tr></table></figure>
<h2 id="VOC数据类别统计">VOC数据类别统计</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">#数据集预处理.类别统计</span><br><span class="hljs-string"># !/usr/bin/env python</span><br><span class="hljs-string"># encoding: utf-8</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> xml.dom.minidom <span class="hljs-keyword">as</span> xmldom<br><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">voc_label_statistics</span>(<span class="hljs-params">annotation_path</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    VOC 数据集类别统计</span><br><span class="hljs-string">    :param annotation_path: voc数据集的标签文件夹</span><br><span class="hljs-string">    :return: &#123;&#x27;class1&#x27;:&#x27;count&#x27;,...&#125;</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    count = <span class="hljs-number">0</span><br>    annotation_names = [<br>        os.path.join(annotation_path, i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> os.listdir(annotation_path)<br>    ]<br><br>    labels = <span class="hljs-built_in">dict</span>()<br>    <span class="hljs-keyword">for</span> names <span class="hljs-keyword">in</span> annotation_names:<br>        names_arr = names.split(<span class="hljs-string">&quot;.&quot;</span>)<br>        file_type = names_arr[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> file_type != <span class="hljs-string">&quot;xml&quot;</span>:<br>            <span class="hljs-keyword">continue</span><br>        file_size = os.path.getsize(names)<br>        <span class="hljs-keyword">if</span> file_size == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br><br>        count = count + <span class="hljs-number">1</span><br>        <span class="hljs-comment"># print(&#x27;process：&#x27;, names)</span><br>        xmlfilepath = names<br>        domobj = xmldom.parse(xmlfilepath)<br>        <span class="hljs-comment"># 得到元素对象</span><br>        elementobj = domobj.documentElement<br>        <span class="hljs-comment"># 获得子标签</span><br>        subElementObj = elementobj.getElementsByTagName(<span class="hljs-string">&quot;object&quot;</span>)<br>        <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> subElementObj:<br>            label = s.getElementsByTagName(<span class="hljs-string">&quot;name&quot;</span>)[<span class="hljs-number">0</span>].firstChild.data<br><br>            label_count = labels.get(label, <span class="hljs-number">0</span>)<br>            labels[label] = label_count + <span class="hljs-number">1</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件标注个数：&quot;</span>, count)<br>    <span class="hljs-keyword">return</span> labels<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    annotation_path = <span class="hljs-string">&quot;C:/Users/drluo/Desktop/total train data/Annotations&quot;</span><br><br>    label = voc_label_statistics(annotation_path)<br>    <span class="hljs-built_in">print</span>(label)<br></code></pre></td></tr></table></figure>
<h2 id="VOC数据分配">VOC数据分配</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这是随机划分VOC数据集的脚本</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_split_voc_dataset</span>(<span class="hljs-params">voc_dataset_dir, train_ratio=<span class="hljs-number">0.8</span></span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这是随机划分VOC数据集为训练集和验证集的函数</span><br><span class="hljs-string">    :param voc_dataset_dir: VOC数据集地址</span><br><span class="hljs-string">    :param train_ratio: 训练集比例，默认为0.8</span><br><span class="hljs-string">    :return:</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-comment"># 初始化相关文件和文件夹路径</span><br>    <span class="hljs-comment"># voc_main_dir = os.path.join(voc_dataset_dir,&#x27;ImageSets&#x27;,&#x27;Main&#x27;)</span><br>    voc_main_dir = voc_dataset_dir<br>    voc_image_dir = os.path.join(voc_dataset_dir, <span class="hljs-string">&#x27;Images&#x27;</span>)<br>    train_txt_path = os.path.join(voc_main_dir, <span class="hljs-string">&#x27;train.txt&#x27;</span>)<br>    trainval_txt_path = os.path.join(voc_main_dir, <span class="hljs-string">&#x27;trainval.txt&#x27;</span>)<br>    val_txt_path = os.path.join(voc_main_dir, <span class="hljs-string">&#x27;val.txt&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(voc_main_dir):<br>        os.makedirs(voc_main_dir)<br><br>    <span class="hljs-comment"># 遍历图像文件夹，获取所有图像</span><br>    image_name_list = []<br>    <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> os.listdir(voc_image_dir):<br>        image_name_list.append(image_name)<br>    image_name_list = np.array(image_name_list)<br>    image_name_list = np.random.permutation(image_name_list)<br><br>    <span class="hljs-comment"># 划分训练集和测试集</span><br>    size = <span class="hljs-built_in">len</span>(image_name_list)<br>    random_index = np.random.permutation(size)<br>    train_size = <span class="hljs-built_in">int</span>(size * train_ratio)<br>    train_image_name_list = image_name_list[random_index[<span class="hljs-number">0</span>:train_size]]<br>    val_image_name_list = image_name_list[random_index[train_size:]]<br><br>    <span class="hljs-comment"># 生成trainval</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(trainval_txt_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> image_name_list:<br>            fname, ext = os.path.splitext(image_name)<br>            fname = <span class="hljs-string">&quot;./Images/&quot;</span> + fname + <span class="hljs-string">&quot;.jpg&quot;</span> + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-string">&quot;./Annotations/&quot;</span> + fname + <span class="hljs-string">&quot;.xml&quot;</span><br>            f.write(fname + <span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-comment"># 生成train</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(train_txt_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> train_image_name_list:<br>            fname, ext = os.path.splitext(image_name)<br>            fname = <span class="hljs-string">&quot;./Images/&quot;</span> + fname + <span class="hljs-string">&quot;.jpg&quot;</span> + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-string">&quot;./Annotations/&quot;</span> + fname + <span class="hljs-string">&quot;.xml&quot;</span><br>            f.write(fname + <span class="hljs-string">&quot;\n&quot;</span>)<br>    <span class="hljs-comment"># 生成val</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(val_txt_path, <span class="hljs-string">&#x27;w&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> image_name <span class="hljs-keyword">in</span> val_image_name_list:<br>            fname, ext = os.path.splitext(image_name)<br>            fname = <span class="hljs-string">&quot;./Images/&quot;</span> + fname + <span class="hljs-string">&quot;.jpg&quot;</span> + <span class="hljs-string">&quot;,&quot;</span> + <span class="hljs-string">&quot;./Annotations/&quot;</span> + fname + <span class="hljs-string">&quot;.xml&quot;</span><br>            f.write(fname + <span class="hljs-string">&quot;\n&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_main</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    这是主函数</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    train_ratio = <span class="hljs-number">0.8</span><br>    <span class="hljs-comment"># voc_dataset_dir = os.path.abspath(&quot;./&quot;),</span><br>    voc_dataset_dir = <span class="hljs-string">&#x27;./&#x27;</span><br>    random_split_voc_dataset(voc_dataset_dir, train_ratio)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    run_main()<br></code></pre></td></tr></table></figure>
<h2 id="Paddle模型预测（mobilenet-ssd）">Paddle模型预测（mobilenet_ssd）</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-comment"># 引用 paddle inference 预测库</span><br><span class="hljs-keyword">import</span> paddle.inference <span class="hljs-keyword">as</span> paddle_infer<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 创建 config</span><br>config = paddle_infer.Config(<span class="hljs-string">&quot;./models/mobilenet_ssd/mobilenet-ssd-model&quot;</span>,<br>                             <span class="hljs-string">&quot;./models/mobilenet_ssd/mobilenet-ssd-params&quot;</span>)<br><br><span class="hljs-comment"># 根据 config 创建 predictor</span><br>predictor = paddle_infer.create_predictor(config)<br><br><span class="hljs-comment"># 获取输入 Tensor</span><br>input_names = predictor.get_input_names()<br>input_tensor = predictor.get_input_handle(input_names[<span class="hljs-number">0</span>])<br><br><span class="hljs-built_in">print</span>(input_names)<br><span class="hljs-built_in">print</span>(input_tensor)<br><br><span class="hljs-comment"># 从 CPU 获取数据，设置到 Tensor 内部</span><br>imgPath = <span class="hljs-string">&#x27;./frame/15.jpg&#x27;</span><br><br>cap = cv2.VideoCapture(<span class="hljs-string">&#x27;./models/mobilenet_ssd/sample.mp4&#x27;</span>)<br>frame = []<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    ret, frame = cap.read()<br>    <span class="hljs-keyword">if</span> ret == <span class="hljs-literal">False</span>:<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># cv2.imwrite(&quot;./frame/frame.jpg&quot;, frame)</span><br>    <span class="hljs-comment"># imgPath = &#x27;./frame/frame.jpg&#x27;</span><br>    im = Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB))<span class="hljs-comment"># Image.open(imgPath)</span><br>    im = im.resize((<span class="hljs-number">300</span>, <span class="hljs-number">300</span>), Image.BICUBIC)<br><br>    <span class="hljs-comment"># img = cv2.cvtColor(numpy.asarray(im.resize((320, 240), Image.BICUBIC)), cv2.COLOR_RGB2BGR)#cv2.cvtColor(, cv2.COLOR_RGB2BGR)  # 转换代码</span><br>    <span class="hljs-comment"># cv2.imshow(&#x27;img&#x27;, img)  # opencv显示</span><br>    <span class="hljs-comment"># cv2.waitKey()</span><br><br>    im = np.array(im, dtype=np.float32).transpose(<span class="hljs-number">2</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>).reshape((<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">300</span>, <span class="hljs-number">300</span>))<br>    mean = [<span class="hljs-number">121.636447</span>, <span class="hljs-number">125.696666</span>, <span class="hljs-number">124.807721</span>]<br>    <span class="hljs-comment"># mean = [127.5, 127.5, 127.5]</span><br>    scale = [<span class="hljs-number">0.007843</span>,<br>             <span class="hljs-number">0.007843</span>,<br>             <span class="hljs-number">0.007843</span>]<br>    std = [ <span class="hljs-number">69.480526</span>,<br>            <span class="hljs-number">66.625320</span>,<br>            <span class="hljs-number">50.616609</span>]<br><br>    <span class="hljs-keyword">for</span> ri <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>):<br>        im[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][ri] = (im[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>][ri] / <span class="hljs-number">255</span>)<span class="hljs-comment"># - (scale[0] - mean[0] / 255)</span><br>    <span class="hljs-keyword">for</span> gi <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>):<br>        im[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][gi] = (im[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>][gi] / <span class="hljs-number">255</span>)<span class="hljs-comment"># - (scale[1] - mean[1] / 255)</span><br>    <span class="hljs-keyword">for</span> bi <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">300</span>):<br>        im[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>][bi] = (im[<span class="hljs-number">0</span>][<span class="hljs-number">2</span>][bi] / <span class="hljs-number">255</span>)<span class="hljs-comment"># - (scale[2] - mean[2] / 255)</span><br><br>    fake_input = im<br><br>    input_tensor1 = predictor.get_input_handle(input_names[<span class="hljs-number">0</span>])<br>    input_tensor1.copy_from_cpu(im)<br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># im = np.asarray([[320.0/240.0, 320.0/320.0]], dtype=np.float32)</span><br>    <span class="hljs-comment"># input_tensor2 = predictor.get_input_handle(input_names[1])</span><br>    <span class="hljs-comment"># input_tensor2.copy_from_cpu(im)</span><br>    <span class="hljs-comment">#</span><br>    <span class="hljs-comment"># im = np.asarray([[608, 608]], dtype=np.float32)</span><br>    <span class="hljs-comment"># input_tensor2 = predictor.get_input_handle(input_names[2])</span><br>    <span class="hljs-comment"># input_tensor2.copy_from_cpu(im)</span><br><br>    <span class="hljs-comment"># 执行预测</span><br>    predictor.run()<br><br>    <span class="hljs-comment"># 获取输出 Tensor</span><br>    output_names = predictor.get_output_names()<br>    output_tensor = predictor.get_output_handle(output_names[<span class="hljs-number">0</span>])<br><br>    <span class="hljs-comment"># 从 Tensor 中获取数据到 CPU</span><br>    output_data = output_tensor.copy_to_cpu()<br><br>    <span class="hljs-comment"># 获取 Tensor 的维度信息</span><br>    output_shape = output_tensor.shape()<br><br>    <span class="hljs-comment"># 获取 Tensor 的数据类型</span><br>    output_type = output_tensor.<span class="hljs-built_in">type</span>()<br><br>    results = []<br>    i = <span class="hljs-number">0</span><br>    img = frame<br>    label_list = [<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;cone&quot;</span>, <span class="hljs-string">&quot;bridge&quot;</span>, <span class="hljs-string">&quot;pig&quot;</span>, <span class="hljs-string">&quot;tractor&quot;</span>, <span class="hljs-string">&quot;corn&quot;</span>, <span class="hljs-string">&quot;bump&quot;</span>, <span class="hljs-string">&quot;crosswalk&quot;</span>, <span class="hljs-string">&quot; &quot;</span>]<br>    label_list = [<span class="hljs-string">&quot;background&quot;</span>, <span class="hljs-string">&quot;cone&quot;</span>, <span class="hljs-string">&quot;granary&quot;</span>, <span class="hljs-string">&quot;bridge&quot;</span>, <span class="hljs-string">&quot;tractor&quot;</span>, <span class="hljs-string">&quot;corn&quot;</span>, <span class="hljs-string">&quot;pig&quot;</span>, <span class="hljs-string">&quot;crosswalk&quot;</span>, <span class="hljs-string">&quot;bump&quot;</span>]<br>    img = cv2.resize(img, dsize=(<span class="hljs-number">300</span>, <span class="hljs-number">300</span>), fx=<span class="hljs-number">1</span>, fy=<span class="hljs-number">1</span>, interpolation=cv2.INTER_LINEAR)<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(output_data) &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> output_data:<br>            tmp = &#123;&#125;<br>            <span class="hljs-keyword">if</span> data[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">0.9</span>:<br>                tmp[<span class="hljs-string">&#x27;type&#x27;</span>] = data[<span class="hljs-number">0</span>]<br>                tmp[<span class="hljs-string">&#x27;score&#x27;</span>] = data[<span class="hljs-number">1</span>]<br>                tmp[<span class="hljs-string">&#x27;x&#x27;</span>] = data[<span class="hljs-number">2</span>] * <span class="hljs-number">300</span><br>                tmp[<span class="hljs-string">&#x27;y&#x27;</span>] = data[<span class="hljs-number">3</span>] * <span class="hljs-number">300</span><br>                tmp[<span class="hljs-string">&#x27;width&#x27;</span>] = data[<span class="hljs-number">4</span>] * <span class="hljs-number">300</span> - tmp[<span class="hljs-string">&#x27;x&#x27;</span>]<br>                tmp[<span class="hljs-string">&#x27;height&#x27;</span>] = data[<span class="hljs-number">5</span>] * <span class="hljs-number">300</span> - tmp[<span class="hljs-string">&#x27;y&#x27;</span>]<br>                results.insert(i, tmp)<br>                <span class="hljs-comment"># print(tmp)</span><br>                i = i + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> results:<br>            x = <span class="hljs-built_in">int</span>(i[<span class="hljs-string">&#x27;x&#x27;</span>])<br>            xmax =  <span class="hljs-built_in">int</span>(i[<span class="hljs-string">&#x27;x&#x27;</span>] + i[<span class="hljs-string">&#x27;width&#x27;</span>])<br>            y = <span class="hljs-built_in">int</span>(i[<span class="hljs-string">&#x27;y&#x27;</span>])<br>            ymax = <span class="hljs-built_in">int</span>(i[<span class="hljs-string">&#x27;y&#x27;</span>] + i[<span class="hljs-string">&#x27;height&#x27;</span>])<br>            <span class="hljs-comment"># print((x, y), (xmax, ymax))</span><br>            cv2.rectangle(img, (x, y), (xmax, ymax), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>            <span class="hljs-comment"># cv2.rectangle(img, (x, ymax), (xmax, y), (255, 0, 0), 2)</span><br>            cv2.putText(img,<br>                        <span class="hljs-built_in">str</span>(label_list[<span class="hljs-built_in">int</span>(i[<span class="hljs-string">&#x27;type&#x27;</span>])]),<br>                        (<span class="hljs-built_in">int</span>(x), <span class="hljs-built_in">int</span>(y)),<br>                        cv2.FONT_HERSHEY_SIMPLEX,<br>                        <span class="hljs-number">0.75</span>,<br>                        (<span class="hljs-number">0</span>, <span class="hljs-built_in">int</span>(i[<span class="hljs-string">&#x27;type&#x27;</span>]) * <span class="hljs-number">30</span>, <span class="hljs-number">255</span>),<br>                        <span class="hljs-number">2</span>)<br>    img = cv2.resize(img, dsize=(<span class="hljs-number">320</span>, <span class="hljs-number">240</span>), fx=<span class="hljs-number">1</span>, fy=<span class="hljs-number">1</span>, interpolation=cv2.INTER_LINEAR)<br>    cv2.imshow(<span class="hljs-string">&#x27;src&#x27;</span>, img)<br>    cv2.waitKey(<span class="hljs-number">1</span>)<br><br><span class="hljs-comment"># 释放中间 Tensor</span><br>predictor.clear_intermediate_tensor()<br><br><span class="hljs-comment"># 释放内存池中的所有临时 Tensor</span><br>predictor.try_shrink_memory()<br></code></pre></td></tr></table></figure>
<h1>JAVA</h1>
<h2 id="Pair-Key-Value">Pair&lt;Key, Value&gt;</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> util;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pair</span>&lt;K, V&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> K key;<br>    <span class="hljs-keyword">private</span> V value;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Pair</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-built_in">this</span>.key = key;<br>        <span class="hljs-built_in">this</span>.value = value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;K, V&gt; Pair&lt;K, V&gt; <span class="hljs-title function_">of</span><span class="hljs-params">(K key, V value)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Pair</span>&lt;&gt;(key, value);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> &amp;&amp; value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> &amp;&amp; value <span class="hljs-keyword">instanceof</span> String) <span class="hljs-keyword">return</span> value.toString();<br>        <span class="hljs-keyword">if</span> (value == <span class="hljs-literal">null</span> &amp;&amp; key <span class="hljs-keyword">instanceof</span> String) <span class="hljs-keyword">return</span> key.toString();<br>        <span class="hljs-keyword">if</span> (key == <span class="hljs-literal">null</span> || value == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">return</span> key.toString() + value.toString();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Pair&lt;K, V&gt; obj)</span> &#123;<br>        <span class="hljs-keyword">if</span> (obj == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">return</span> obj.getKey().equals(getKey()) &amp;&amp; obj.getValue().equals(getValue());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>
<h2 id="字符串分段排序">字符串分段排序</h2>
<figure class="highlight java"><table><tr><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> common;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sort</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * sort StringList</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> strArr split array.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> seqStr For split strings, if you need take some content before the seqStr, then this item needs to be adjusted.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> interval inserting content between results.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> sorted ans.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">stringSort</span><span class="hljs-params">(String[] strArr, String seqStr, String interval)</span>&#123;<br>        <span class="hljs-comment">//分割后字符串子串列表</span><br>        <span class="hljs-comment">//[P1012, John Li, 01/01/2000, C001, T001]</span><br>        List&lt;List&lt;String&gt;&gt; splitList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        List&lt;String&gt; stringList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        <span class="hljs-keyword">for</span> (String str : strArr)&#123;<br>            splitList.add(List.of(str.split(seqStr)));<br>            stringList.add(str);<br>        &#125;<br><br>        quickSort(stringList,splitList,<span class="hljs-number">0</span>,stringList.size()-<span class="hljs-number">1</span>);<br><br>        <span class="hljs-type">WordUtil</span> <span class="hljs-variable">words</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WordUtil</span>(interval, stringList, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> words.getResult();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">quickSort</span><span class="hljs-params">(List&lt;String&gt; stringList, List&lt;List&lt;String&gt;&gt; splitList, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>        <span class="hljs-keyword">if</span>(left &lt; right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> partition(stringList, splitList, left, right);<br>            quickSort(stringList, splitList, left, pivot-<span class="hljs-number">1</span>);<br>            quickSort(stringList, splitList, pivot+<span class="hljs-number">1</span>, right);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">partition</span><span class="hljs-params">(List&lt;String&gt; stringList, List&lt;List&lt;String&gt;&gt; splitList, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> right)</span>&#123;<br>        List&lt;String&gt; pivot = splitList.get(left);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> left + <span class="hljs-number">1</span>, j = right;<br>        <span class="hljs-keyword">while</span>(i &lt;= j)&#123;<br>            <span class="hljs-keyword">while</span>(i &lt;= j &amp;&amp; strListCmp(splitList.get(i),pivot) &lt;= <span class="hljs-number">0</span>) i++;<br>            <span class="hljs-keyword">while</span>(i &lt;= j &amp;&amp; strListCmp(splitList.get(j),pivot) &gt; <span class="hljs-number">0</span>) j--;<br>            <span class="hljs-keyword">if</span>(i &lt; j)&#123;<br>                Collections.swap(splitList, i, j);<br>                Collections.swap(stringList, i, j);<br>            &#125;<br>        &#125;<br>        Collections.swap(splitList, left, j);<br>        Collections.swap(stringList, left, j);<br>        <span class="hljs-keyword">return</span> j;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">strListCmp</span><span class="hljs-params">(List&lt;String&gt; str1, List&lt;String&gt; str2)</span>&#123;<br>        <span class="hljs-keyword">if</span>(str1.size() &gt; str2.size())&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(str1.size() &lt; str2.size())&#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; str1.size(); i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">error</span> <span class="hljs-operator">=</span> str1.get(i).compareTo(str2.get(i));<br>            <span class="hljs-keyword">if</span> (error != <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> error;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>
<h1>HTML</h1>
<h2 id="midi播放可视化1">midi播放可视化1</h2>
<p>参考文章：</p>
<p><a href="https://blog.csdn.net/m0_66711291/article/details/131724443">Pixi + Tone 实现简单midi音频可视化_tone.js节拍器-CSDN博客</a></p>
<p>代码实现效果：</p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/index.html">网页详情</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Midi可视化<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/Tone.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/Midi.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/pixi.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;play&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;播放&quot;</span>/&gt;</span><br>	<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">	<span class="hljs-keyword">const</span> <span class="hljs-title class_">Application</span> = <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-property">Application</span>;  <span class="hljs-comment">// 应用类，快速创建PIXI应用</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Sprite</span> = <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-property">Sprite</span>;            <span class="hljs-comment">// 精灵类</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> <span class="hljs-title class_">Graphics</span> = <span class="hljs-variable constant_">PIXI</span>.<span class="hljs-property">Graphics</span>;        <span class="hljs-comment">// 图形类</span></span><br><span class="language-javascript">    <span class="hljs-comment">// 创建应用程序并挂载</span></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> pixi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Application</span>(&#123;</span><br><span class="language-javascript">      <span class="hljs-attr">width</span>: <span class="hljs-number">1000</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>,</span><br><span class="language-javascript">      <span class="hljs-attr">backgroundColor</span>: <span class="hljs-number">0x000000</span></span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">    <span class="hljs-comment">// pixi.view 代表画布，是一个canvas元素</span></span><br><span class="language-javascript">    <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(pixi.<span class="hljs-property">view</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">	<span class="hljs-keyword">const</span> config = &#123;</span><br><span class="language-javascript">		  <span class="hljs-attr">speed</span>: <span class="hljs-number">1</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">leftColor</span>: <span class="hljs-number">0xFF69B4</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">rightColor</span>: <span class="hljs-number">0x00BFFF</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">color1</span>: <span class="hljs-number">0x66A9C9</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">color2</span>: <span class="hljs-number">0xF0C9CF</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">color3</span>: <span class="hljs-number">0xE2C17C</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">color4</span>: <span class="hljs-number">0x363433</span>,</span><br><span class="language-javascript">		  <span class="hljs-attr">color5</span>: <span class="hljs-number">0xFF4500</span>,</span><br><span class="language-javascript">		&#125;</span><br><span class="language-javascript">	<span class="hljs-comment">// 定义灯光类作为音符的可视化</span></span><br><span class="language-javascript">	<span class="hljs-keyword">class</span> <span class="hljs-title class_">Light</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Graphics</span> &#123;</span><br><span class="language-javascript">	  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">color, height, x</span>) &#123;</span><br><span class="language-javascript">		<span class="hljs-variable language_">super</span>();</span><br><span class="language-javascript">		<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">beginFill</span>(color);</span><br><span class="language-javascript">		<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">drawRect</span>(x, <span class="hljs-number">600</span>, <span class="hljs-number">10</span>, height);</span><br><span class="language-javascript">		<span class="hljs-variable language_">this</span>.<span class="hljs-title function_">endFill</span>();</span><br><span class="language-javascript">		<span class="hljs-comment">// pixijs的定时器，可以实现每帧执行一次，并且十分稳定</span></span><br><span class="language-javascript">		pixi.<span class="hljs-property">ticker</span>.<span class="hljs-title function_">add</span>(<span class="hljs-function">() =&gt;</span> &#123;</span><br><span class="language-javascript">		  <span class="hljs-variable language_">this</span>.<span class="hljs-property">y</span> -= config.<span class="hljs-property">speed</span> * <span class="hljs-number">5</span>;</span><br><span class="language-javascript">		&#125;);</span><br><span class="language-javascript">	  &#125;</span><br><span class="language-javascript">	&#125;</span><br><span class="language-javascript">	<span class="hljs-comment">// pixi.stage 代表舞台，所有的物体必须挂载在舞台上才可以显示。</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">const</span> input = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#file&#x27;</span>);</span><br><span class="language-javascript">    input.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">	  <span class="hljs-title function_">parseMidi</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">files</span>[<span class="hljs-number">0</span>]);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">	</span><br><span class="language-javascript">    <span class="hljs-comment">// 读取midi文件</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">parseMidi</span>(<span class="hljs-params">file</span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-comment">// 创建文件读取器</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();</span><br><span class="language-javascript">      <span class="hljs-comment">// 读取文件</span></span><br><span class="language-javascript">      reader.<span class="hljs-title function_">readAsArrayBuffer</span>(file);</span><br><span class="language-javascript">      <span class="hljs-comment">// 文件读取完成后将文件转化为json对象</span></span><br><span class="language-javascript">      reader.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">        currentMidi = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Midi</span>(e.<span class="hljs-property">target</span>.<span class="hljs-property">result</span>);</span><br><span class="language-javascript">        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentMidi);</span><br><span class="language-javascript">      &#125;)</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">	</span><br><span class="language-javascript">	play.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">e</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(currentMidi);</span><br><span class="language-javascript">      <span class="hljs-comment">// 如果未加载midi文件</span></span><br><span class="language-javascript">      <span class="hljs-keyword">if</span>(!currentMidi) &#123;</span><br><span class="language-javascript">        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;未加载文件&#x27;</span>);</span><br><span class="language-javascript">        <span class="hljs-keyword">return</span>;</span><br><span class="language-javascript">      &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> now = <span class="hljs-title class_">Tone</span>.<span class="hljs-title function_">now</span>() + <span class="hljs-number">0.5</span>; <span class="hljs-comment">// 获取当前时间</span></span><br><span class="language-javascript">      <span class="hljs-keyword">const</span> synths = [];            <span class="hljs-comment">// 存储合成器</span></span><br><span class="language-javascript">      <span class="hljs-comment">// 遍历midi文件中的轨道</span></span><br><span class="language-javascript">      currentMidi.<span class="hljs-property">tracks</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">track</span> =&gt;</span> &#123;</span><br><span class="language-javascript">        <span class="hljs-comment">// 创建合成器作为音轨并连接至出口，音色使用Tonejs的默认音色</span></span><br><span class="language-javascript">        <span class="hljs-keyword">const</span> synth = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Tone</span>.<span class="hljs-title class_">PolySynth</span>(<span class="hljs-title class_">Tone</span>.<span class="hljs-property">Synth</span>, &#123;</span><br><span class="language-javascript">					<span class="hljs-attr">envelope</span>: &#123;</span><br><span class="language-javascript">						<span class="hljs-comment">// 声音的生命周期：按下按键 - 渐入 - 攻击阶段 - 衰减阶段 - 衰减结束 - 松开按键 - 声音消逝</span></span><br><span class="language-javascript">						</span><br><span class="language-javascript">						&lt;!-- <span class="hljs-comment">// 旧 --&gt;</span></span><br><span class="language-javascript">						&lt;!-- <span class="hljs-attr">attack</span>: <span class="hljs-number">0.02</span>,     <span class="hljs-comment">// 渐入时间 --&gt;</span></span><br><span class="language-javascript">						&lt;!-- <span class="hljs-attr">decay</span>: <span class="hljs-number">0.1</span>,       <span class="hljs-comment">// 攻击阶段（最大音量）持续时间 --&gt;</span></span><br><span class="language-javascript">						&lt;!-- <span class="hljs-attr">sustain</span>: <span class="hljs-number">0.3</span>,     <span class="hljs-comment">// 衰减结束后的最小声音 --&gt;</span></span><br><span class="language-javascript">						&lt;!-- <span class="hljs-attr">release</span>: <span class="hljs-number">1</span>,       <span class="hljs-comment">// 从松开按键到声音彻底消失所需的时间 --&gt;</span></span><br><span class="language-javascript">						</span><br><span class="language-javascript">						<span class="hljs-comment">// Piano</span></span><br><span class="language-javascript">						<span class="hljs-attr">attack</span>: <span class="hljs-number">0.005</span>,     <span class="hljs-comment">// 渐入时间</span></span><br><span class="language-javascript">						<span class="hljs-attr">decay</span>: <span class="hljs-number">1.5</span>,       <span class="hljs-comment">// 攻击阶段（最大音量）持续时间</span></span><br><span class="language-javascript">						<span class="hljs-attr">sustain</span>: <span class="hljs-number">0.05</span>,     <span class="hljs-comment">// 衰减结束后的最小声音</span></span><br><span class="language-javascript">						<span class="hljs-attr">release</span>: <span class="hljs-number">0.005</span>,       <span class="hljs-comment">// 从松开按键到声音彻底消失所需的时间</span></span><br><span class="language-javascript">					&#125;,</span><br><span class="language-javascript">				&#125;).<span class="hljs-title function_">toDestination</span>();</span><br><span class="language-javascript">		<span class="hljs-comment">// 将合成器存储起来，为之后停止播放的功能留下接口。</span></span><br><span class="language-javascript">        synths.<span class="hljs-title function_">push</span>(synth);</span><br><span class="language-javascript"></span><br><span class="language-javascript">        <span class="hljs-comment">// 遍历轨道中的每个音符</span></span><br><span class="language-javascript">        track.<span class="hljs-property">notes</span>.<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">note</span> =&gt;</span> &#123;</span><br><span class="language-javascript">          <span class="hljs-comment">// 合成器发声</span></span><br><span class="language-javascript">		  note.<span class="hljs-property">velocity</span> = note.<span class="hljs-property">velocity</span>/<span class="hljs-number">10</span>;</span><br><span class="language-javascript">          synth.<span class="hljs-title function_">triggerAttackRelease</span>(</span><br><span class="language-javascript">						note.<span class="hljs-property">name</span>,         <span class="hljs-comment">// 音名</span></span><br><span class="language-javascript">						note.<span class="hljs-property">duration</span>,     <span class="hljs-comment">// 持续时间</span></span><br><span class="language-javascript">						note.<span class="hljs-property">time</span> + now,   <span class="hljs-comment">// 开始发声时间</span></span><br><span class="language-javascript">						note.<span class="hljs-property">velocity</span>      <span class="hljs-comment">// 音量</span></span><br><span class="language-javascript">					);</span><br><span class="language-javascript">					</span><br><span class="language-javascript">			<span class="hljs-comment">// 在播放按钮的事件中，遍历音符时，创建音频调度，实现音画同步</span></span><br><span class="language-javascript">			<span class="hljs-title class_">Tone</span>.<span class="hljs-property">Transport</span>.<span class="hljs-title function_">schedule</span>(<span class="hljs-function">(<span class="hljs-params">time</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">				<span class="hljs-comment">// 根据音调划分颜色，（其实应该根据轨道来划分的）</span></span><br><span class="language-javascript">				<span class="hljs-keyword">var</span> color = config.<span class="hljs-property">color1</span>;</span><br><span class="language-javascript">				<span class="hljs-keyword">if</span>(note.<span class="hljs-property">midi</span> &lt; <span class="hljs-number">15</span>) &#123;</span><br><span class="language-javascript">					color = config.<span class="hljs-property">color1</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (note.<span class="hljs-property">midi</span> &lt; <span class="hljs-number">30</span>)&#123;					</span><br><span class="language-javascript">					color = config.<span class="hljs-property">color2</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (note.<span class="hljs-property">midi</span> &lt; <span class="hljs-number">45</span>)&#123;</span><br><span class="language-javascript">					color = config.<span class="hljs-property">color3</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (note.<span class="hljs-property">midi</span> &lt; <span class="hljs-number">60</span>)&#123;</span><br><span class="language-javascript">					color = config.<span class="hljs-property">color4</span>;</span><br><span class="language-javascript">				&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">					color = config.<span class="hljs-property">color5</span>;</span><br><span class="language-javascript">				&#125;</span><br><span class="language-javascript">				<span class="hljs-comment">//color = &#x27;0x&#x27;+ Math.random().toString(16).substr(2,6);</span></span><br><span class="language-javascript">				pixi.<span class="hljs-property">stage</span>.<span class="hljs-title function_">addChild</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Light</span>(color, note.<span class="hljs-property">duration</span> * <span class="hljs-number">150</span> * config.<span class="hljs-property">speed</span>, (note.<span class="hljs-property">midi</span> - <span class="hljs-number">20</span>) * <span class="hljs-number">10</span>))</span><br><span class="language-javascript">				</span><br><span class="language-javascript">			&#125;, note.<span class="hljs-property">time</span> + now);</span><br><span class="language-javascript"></span><br><span class="language-javascript">			<span class="hljs-comment">// 在代码最外层设置音频调度的模式，并启动音频调度。</span></span><br><span class="language-javascript">			<span class="hljs-title class_">Tone</span>.<span class="hljs-property">context</span>.<span class="hljs-property">latencyHint</span> = <span class="hljs-string">&#x27;fastest&#x27;</span>;</span><br><span class="language-javascript">			<span class="hljs-title class_">Tone</span>.<span class="hljs-property">Transport</span>.<span class="hljs-title function_">start</span>();</span><br><span class="language-javascript"></span><br><span class="language-javascript">        &#125;);</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript">    &#125;)</span><br><span class="language-javascript">	</span><br><span class="language-javascript">	</span><br><span class="language-javascript">	</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br><br></code></pre></td></tr></table></figure>
<hr>
<p>Tone.js文件，Midi.js文件，pixi.js文件：</p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/js/Tone.js">https://www.drluo.top/friends/self/midivisualization/js/Tone.js</a></p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/js/Midi.js">https://www.drluo.top/friends/self/midivisualization/js/Midi.js</a></p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/js/pixi.js">https://www.drluo.top/friends/self/midivisualization/js/pixi.js</a></p>
<h2 id="midi播放可视化2">midi播放可视化2</h2>
<p>由于<a href="https://storage.googleapis.xn--com-rz1ek4i97fjs5adlmrw4a3ljwseky4blx1a">https://storage.googleapis.com网站国内可能无法访问</a>，所以此代码可能因为缺失音效而无法播放，暂未找到相关镜像替代，请等待后续修改。</p>
<p>由于上面的代码效果不好，找了几圈，看到了<a href="https://cifkao.github.io/html-midi-player/">html-midi-player | Play and display MIDI files online (cifkao.github.io)</a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Midi可视化<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> 	<span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> 		<span class="hljs-attr">href</span>=<span class="hljs-string">&quot;./css/style.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> 	<span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/core.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span> 	<span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./js/index.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">main</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;main-content&quot;</span> <span class="hljs-attr">role</span>=<span class="hljs-string">&quot;main&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">midi-visualizer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;piano-roll&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mainVisualizer&quot;</span> </span><br><span class="hljs-tag">			<span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./mid/弱虫だって   咩栗X呜米.mid&quot;</span>&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">midi-visualizer</span>&gt;</span><br><br>			<span class="hljs-tag">&lt;<span class="hljs-name">midi-player</span> </span><br><span class="hljs-tag">			<span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./mid/弱虫だって   咩栗X呜米.mid&quot;</span> </span><br><span class="hljs-tag">			<span class="hljs-attr">sound-font</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">visualizer</span>=<span class="hljs-string">&quot;#mainVisualizer&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;mainPlayer&quot;</span> <span class="hljs-attr">data-js-focus-visible</span>=<span class="hljs-string">&quot;&quot;</span>&gt;</span><br><br><br>				<span class="hljs-comment">&lt;!-- 播放/暂停进度条 --&gt;</span><br>				<span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;controls stopped&quot;</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;control-panel&quot;</span>&gt;</span><br>				  <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;play&quot;</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;play-button&quot;</span>&gt;</span><br>					<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon play-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 6.35 6.35&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>				 <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;m4.4979 3.175-2.1167 1.5875v-3.175z&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;.70201&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>					<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon stop-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 6.35 6.35&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>				 <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;m1.8521 1.5875v3.175h0.92604v-3.175zm1.7198 0v3.175h0.92604v-3.175z&quot;</span> <span class="hljs-attr">stroke-width</span>=<span class="hljs-string">&quot;.24153&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>					<span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;icon error-icon&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;24&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;1.1&quot;</span> <span class="hljs-attr">viewBox</span>=<span class="hljs-string">&quot;0 0 6.35 6.35&quot;</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span><br>				 <span class="hljs-tag">&lt;<span class="hljs-name">path</span> <span class="hljs-attr">transform</span>=<span class="hljs-string">&quot;scale(.26458)&quot;</span> <span class="hljs-attr">d</span>=<span class="hljs-string">&quot;m12 3.5a8.4993 8.4993 0 0 0-8.5 8.5 8.4993 8.4993 0 0 0 8.5 8.5 8.4993 8.4993 0 0 0 8.5-8.5 8.4993 8.4993 0 0 0-8.5-8.5zm-1.4062 3.5h3v6h-3v-6zm0 8h3v2h-3v-2z&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">svg</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>				  <span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>				  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;time&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;current-time&quot;</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;current-time&quot;</span>&gt;</span>0:00<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> / <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;total-time&quot;</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;total-time&quot;</span>&gt;</span>0:15<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>				  <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;range&quot;</span> <span class="hljs-attr">min</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">max</span>=<span class="hljs-string">&quot;15.999984&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">step</span>=<span class="hljs-string">&quot;any&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;seek-bar&quot;</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;seek-bar&quot;</span>&gt;</span><br>				  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;overlay loading-overlay&quot;</span> <span class="hljs-attr">part</span>=<span class="hljs-string">&quot;loading-overlay&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>				<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>				<span class="hljs-comment">&lt;!-- 播放/暂停进度条 --&gt;</span><br>			<span class="hljs-tag">&lt;/<span class="hljs-name">midi-player</span>&gt;</span><br>			<br>		<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br>		<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;midiFile&quot;</span>&gt;</span>选择Midi文件:<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>			<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;midiFile&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;midiFile&quot;</span> <span class="hljs-attr">accept</span>=<span class="hljs-string">&quot;audio/midi, audio/x-midi&quot;</span>&gt;</span><br>		<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>	<br>	<span class="hljs-tag">&lt;/<span class="hljs-name">main</span>&gt;</span><br>  <br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure>
<p>代码实现效果：</p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/index2.html">网页详情</a></p>
<p>由于<a href="https://storage.googleapis.xn--com-rz1ek4i97fjs5adlmrw4a3ljwseky4blx1a">https://storage.googleapis.com网站国内可能无法访问</a>，所以此代码可能因为缺失音效而无法播放，暂未找到相关镜像替代，请等待后续修改。</p>
<p>style.css文件，core.js文件，index.js文件：</p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/css/style.css">https://www.drluo.top/friends/self/midivisualization/css/style.css</a></p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/js/core.js">https://www.drluo.top/friends/self/midivisualization/js/core.js</a></p>
<p><a href="https://www.drluo.top/friends/self/midivisualization/js/index.js">https://www.drluo.top/friends/self/midivisualization/js/index.js</a></p>
]]></content>
      <categories>
        <category>我</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>C/C++</tag>
        <tag>Java</tag>
        <tag>HTML</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
